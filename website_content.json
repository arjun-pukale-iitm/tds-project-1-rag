[
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/2025-01/",
    "downloaded_at": "2025-06-12T02:45:05.536025",
    "content": "Tools in Data Science - Jan 2025 Tools in Data Science is a practical diploma level data science course at IIT Madras that teaches\npopular tools for sourcing data, transforming it, analyzing it, communicating these as visual stories, and deploying them in production. This course exposes you to real-life tools Courses teach you programming and data science. From statistics to algorithms to writing Python code to building models. But one critical subject that\u2019s rarely covered is: what tools should I pick and how do I become proficient in them? These tools might not help your CV much. But they will make things easier in real life. For example, at school: You learn from pristine datasets. But in the industry, you\u2019ll have to scrape them yourself. You learn how to train models. But soon, you\u2019ll just pick something from HuggingFace. You learn to write a log parser over weeks. Instead, your boss writes a + script in minutes. \u201cWe lost the documentation on quantum mechanics. You\u2019ll have to decode the regexes yourself.\u201d In this course, we\u2019ve curated the most important tools people use in data science. Learn them well. You\u2019ll be a lot more productive than your peers. This course is quite hard Here\u2019s students\u2019 feedback: It used to be an easy course until 2024. # # # Now it\u2019s hard and covers more. Take it in your last semester if possible. # # # Plan extra time. It takes more time than typical 3-credit courses. # # # LLMs grade you \u2013 unpredictably. # # The ROE is hard. # Take Graded assignment 1 to check if you\u2019re ready for this course. Please drop this course (do it in a later term) if you score low. It\u2019ll be too tough for you now. Programming skills are a pre-requisite You need a good understanding of Python, JavaScript, HTML, HTTP, Excel, and data science concepts. But isn\u2019t this a data science course? Yes. Good data scientists are good programmers. Data scientists don\u2019t just analyze data or train models. They source data, clean it, transform it, visualize it, deploy it, and automate the whole process. In some organizations, some of this work is done by others (e.g. data engineers, IT teams, etc.). But wherever you are, some of the time, you need to write code for all of this yourself. This course teaches you tools that will make you more productive. But you do need programming to learn many of them. We encourage learning by sharing You CAN copy from friends. You can work in groups. You can share code. Even in projects, assignments, and exams (except the final end-term exam). Why should you copy? Because in real life, there\u2019s no time to re-invent the wheel. You\u2019ll be working in teams on the shoulders of giants. It\u2019s important to learn how to do that well. To learn well, understand what you\u2019re copying. If you\u2019re short of time, prioritize. To learn better, teach what you\u2019ve learnt. We cover 7 modules in 12 weeks The content evolves with technology and feedback.\nTrack the commit history for changes. Released content: Development Tools and concepts to build models and apps. Discussion Thread Deployment Tools and concepts to publish what you built. Discussion Thread Large Language Models that make your work easier and your apps smarter. Discussion Thread Data Sourcing to get data from the web, files, and databases. Discussion Thread Data Preparation to clean up and convert the inputs to the right format. Discussion Thread Project 1 to build an LLM-based automation agent. Discussion Thread Work in progress: Data Analysis to find surprising insights in the data. Data Visualization to communicate those insights as visual stories. Evaluations are mostly open Internet Exam Type Weight Release Date Submission Date GA: Graded assignments Best 4 out of 7 \u2021 15% Graded Assignment 1 Online open MCQ 30 Dec 2024 26 Jan 2025 Graded Assignment 2 Online open MCQ 3 Jan 2025 2 Feb 2025 Graded Assignment 3 Online open MCQ 15 Jan 2025 5 Feb 2025 Graded Assignment 4 Online open MCQ 31 Jan 2025 9 Feb 2025 P1: Project 1 Take-home open-Internet 20% 19 Jan 2025 16 Feb 2025 Graded Assignment 5 Online open MCQ 7 Feb 2025 21 Feb 2025 Graded Assignment 6 Online open MCQ 28 Feb 2025 16 Mar 2025 P2: Project 2 Take-home open-Internet 20% 3 Mar 2025 31 Mar 2025 Graded Assignment 7 Online open MCQ 14 Mar 2025 26 Mar 2025 ROE: Remote Online Exam Online open-Internet MCQ 20% 02 Mar 2025 13:00 02 Mar 2025 13:45 F: Final end-term In-person, no internet, mandatory 25% 13 Apr 2025 Updates 13 Jan 2025: GA3 release date moved from 10 Jan 2025 to 15 Jan 2025 due to faculty delay. Students have till 2 Feb 2025 - more than the 10 days expected for a GA. 22 Jan 2025: GA2 submission date moved from 26 Jan 2025 to 2 Feb 2025. GA4 release date is moved from 24 Jan 2025 to 31 Jan 2025. This is to reduce the amount students have to learn in a short period. 29 Jan 2025: GA3 submission date moved from 2 Feb 2025 to 5 Feb 2025. 13 Feb 2025: GA5 submission date moved from 16 Feb 2025 to 21 Feb 2025. 15 Feb 2025: Project 1 deadline moved from 15 Jan 2025 to 16 Feb 2025. 26 Feb 2025: Project 1 results will be released by 16 Mar 2025. Graded Assignment 6 moved from 14 Feb to 28 Feb 2025. Submission date moved from 9 Mar to 16 Mar 2025. Project 2 moved from 21 Feb to 3 Mar 2025. Submission date moved from 17 Mar to 31 Mar 2025. Graded Assignment 7 moved from 28 Feb to 7 Mar 2025. Submission date moved from 16 Mar to 26 Mar 2025. 7 Mar 2025: GA7 release date moved from 7 Mar to 14 Mar 2025. Notes Graded Assignment 1 checks course pre-requisites . Please drop this course (do it in a later term) if you score low. It\u2019ll be too tough for you now. \u2021 Graded Assignments: Best 4 out 7 . We\u2019ll take the best 4 out of your graded assignments submissions. These, combined, will have a 15% weightage. Remote exams are open and hard You can use the Internet, WhatsApp, ChatGPT, your notes, your friends, your pets\u2026 The RoE is especially hard. Read: What is the purpose of an impossible RoE exam? Final exam is in-person and closed book . It tests your memory. It\u2019s easy. Projects test application . The projects test how well you apply what you learnt in a real-world context. Bonus activities may be posted on Discourse . See previous bonus activities Evaluations are mostly automated . This course uses pre-computed (for objective) or LLMs (for subjective) evaluations. LLMs will evaluate you differently each time. Learn to prompt them robustly to get higher marks. Constantly check communications Check these three links regularly to keep up with the course. Seek Inbox for Course Announcements. Log into seek.onlinedegree.iitm.ac.in and click on \u201cInbox\u201d on the left. Check notifications daily. Your email for Course Announcements. Seek Inbox are forwarded to your email. Check daily. Check spam folders too. TDS Discourse : Faculty, instructors, and TAs will share updates and address queries here. Email support@study.iitm.ac.in cc: discourse-staff1@study.iitm.ac.in if you can\u2019t access Discourse. People who help you Faculty (who design the course) Anand S , s.anand@gramener.com | @s.anand Instructors (who teach the course) Carlton D\u2019Silva. 22f3001919@ds.study.iitm.ac.in | @carlton Prasanna S , prasanna@study.iitm.ac.in | @iamprasna Teaching assistants (who help you with your doubts) Jivraj Singh, 22f3002542@ds.study.iitm.ac.in | @Jivraj | LinkedIn Profile Saransh Saini, 22f1001123@ds.study.iitm.ac.in | @Saransh_Saini | LinkedIn Profile Virtual TA ( GPT Instructions ) Their job is to help you. Trouble them for your slightest doubts! Course Links TDS Discourse - Ask questions, get help, and discuss with your peers. IITM BS Degree Programme - Student Handbook Tools in Data Science Public course home page Jan 2025 Links Jan 2025 Grading Document . TDS: Course page - Jan 2025 \u2013 for students to access course content. TDS: Course calendar - Jan 2025 TDS: Announcement group - Jan 2025 TDS: Course material \u2013 Jupyter notebooks, datasets, etc. TDS: TA Sessions - Jan 2025 \u2013 YouTube playlist"
  },
  {
    "title": "Scraping emarketer.com",
    "original_url": "https://tds.s-anand.net/#/scraping-emarketer",
    "downloaded_at": "2025-06-12T02:45:06.629822",
    "content": "Scraping emarketer In this live scraping session, we explore a real-life scenario where Straive had to scrape data from emarketer.com for a demo. This is a fairly realistic and representative way of how one might go about scraping a website. You\u2019ll learn: Scraping : How to extract data from web pages, including constructing URLs, fetching page content, and parsing HTML using packages like and . Caching : Implementing a caching strategy to avoid redundant data fetching for efficiency and reliability. Error Handling and Debugging : Practical tips for troubleshooting, such as using liberal print statements, breakpoints for in-depth debugging, and the concept of \u201crubber duck debugging\u201d to clarify problems. LLMs : Benefits of Gemini / ChatGPT for code suggestions and troubleshooting. Real-World Application : How quick proofs of concept to showcase capabilities to clients, emphasizing practice over theory. Previous Scheduled Scraping with GitHub Actions Next Scraping: Live Sessions"
  },
  {
    "title": "Data Analysis with DuckDB",
    "original_url": "https://tds.s-anand.net/#/data-analysis-with-duckdb",
    "downloaded_at": "2025-06-12T02:45:07.717141",
    "content": "Data Analysis with DuckDB You\u2019ll learn how to perform data analysis using DuckDB and Pandas, covering: Parquet for Data Storage : Understand why Parquet is a faster, more compact, and better-typed storage format compared to CSV, JSON, and SQLite. DuckDB Setup : Learn how to install and set up DuckDB, along with integrating it into a Jupyter notebook environment. File Format Comparisons : Compare file formats by speed and size, observing the performance difference between saving and loading data in CSV, JSON, SQLite, and Parquet. Faster Queries with DuckDB : Learn how DuckDB uses parallel processing, columnar storage, and on-disk operations to outperform Pandas in speed and memory efficiency. SQL Query Execution in DuckDB : Run SQL queries directly on Parquet files and Pandas DataFrames to compute metrics such as the number of unique flight routes delayed by certain time intervals. Memory Efficiency : Understand how DuckDB performs analytics without loading entire datasets into memory, making it highly efficient for large-scale data analysis. Mixing DuckDB and Pandas : Learn to interleave DuckDB and Pandas operations, leveraging the strengths of both tools to perform complex queries like correlations and aggregations. Ranking and Filtering Data : Use SQL and Pandas to rank arrival delays by distance and extract key insights, such as the earliest flight arrival for each route. Joining Data : Create a cost analysis by joining datasets and calculating total costs of flight delays, demonstrating DuckDB\u2019s speed in joining and aggregating large datasets. Here are the links used in the video: Data analysis with DuckDB - Notebook Parquet file format - a fast columnar storage format that\u2019s becoming a de facto standard for big data DuckDB - a fast in-memory database that\u2019s very good with large-scale analysis Plotly Datasets - a collection of sample datasets for analysis. This includes the Kaggle Flights Dataset that the notebook downloads as 2015_flights.parquet Previous Data Analysis with Datasette Next Data Analysis with ChatGPT"
  },
  {
    "title": "Extracting Audio and Transcripts",
    "original_url": "https://tds.s-anand.net/#/extracting-audio-and-transcripts",
    "downloaded_at": "2025-06-12T02:45:08.816766",
    "content": "Extracting Audio and Transcripts Media Processing: FFmpeg FFmpeg is the standard command-line tool for processing video and audio files. It\u2019s essential for data scientists working with media files for: Extracting audio/video for machine learning Converting formats for web deployment Creating visualizations and presentations Processing large media datasets Basic Operations: Common Data Science Tasks: Processing Multiple Files: Data Analysis Features: Watch this introduction to FFmpeg (12 min): Tools: ffmpeg.lav.io : Interactive command builder FFmpeg Explorer : Visual FFmpeg command generator FFmpeg Buddy : Simple command generator Tips: Use when possible to avoid re-encoding Monitor progress with Use to reduce output verbosity Test commands with small clips first Use hardware acceleration when available (-hwaccel auto) Error Handling: Media tools: yt-dlp yt-dlp is a feature-rich command-line tool for downloading audio/video from thousands of sites. It\u2019s particularly useful for extracting audio and transcripts from videos. Install using your package manager: Common operations for extracting audio and transcripts: For Python integration: Tools: ffmpeg : Required for audio extraction and conversion whisper : Can be used with yt-dlp for speech-to-text gallery-dl : Alternative for image-focused sites Note: Always respect copyright and terms of service when downloading content. Whisper transcription Faster Whisper is a highly optimized implementation of OpenAI\u2019s Whisper model , offering up to 4x faster transcription while using less memory. You can install it via: Download Windows Standalone Here\u2019s a basic usage example: Here\u2019s my recommendation for transcribing videos. This saves the output in JSON as well as SRT format in the source directory. : The OpenAI Whisper model to use. You can choose from: : Fastest but least accurate : Good for simple audio : Balanced speed/accuracy : Recommended default : Most accurate but slowest : The output format to use. You can pick multiple formats from: : Has the most detailed information including timing, text, quality, etc. : A popular subtitle format. You can use this in YouTube, for example. : A modern subtitle format. : Just the text transcript : The directory to save the output files. indicates the source directory, i.e. where the input is : The language of the input file. If you don\u2019t specify it, it analyzes the first 30 seconds to auto-detect. You can speed it up by specifying it. Run for more options. Gemini transcription The Gemini models from Google are notable in two ways: They have a huge input context window. Gemini 2.0 Flash can accept 1M tokens, for example. They can handle audio input. This allows us to use Gemini to transcribe audio files. LLMs are not good at transcribing audio faithfully . They tend to correct errors and meander from what was said. But they are intelligent. That enables a few powerful workflows. Here are some examples: Transcribe into other languages . Gemini will handle the transcription and translation in a single step. Summarize audio transcripts . For example, convert a podcast into a tutorial, or a meeting recording into actions. Legal Proceeding Analysis . Extract case citations, dates, and other details from a legal debate. Medical Consultation Summary . Extract treatments, medications, details of next visit, etc. from a medical consultation. Here\u2019s how to use Gemini to transcribe audio files. Get a Gemini API key from Google AI Studio. Set the environment variable to the API key. Set the environment variable to the path of the MP3 file you want to transcribe. Run this code: Previous Transforming Images Next 6. Data Analysis"
  },
  {
    "title": "2. Deployment Tools",
    "original_url": "https://tds.s-anand.net/#/deployment-tools",
    "downloaded_at": "2025-06-12T02:45:09.941200",
    "content": "Deployment Tools Any application you build is likely to be deployed somewhere. This section covers the most popular tools involved in deploying an application. Previous Version Control: Git, GitHub Next Markdown"
  },
  {
    "title": "Visualizing Animated Data with PowerPoint",
    "original_url": "https://tds.s-anand.net/#/visualizing-animated-data-with-powerpoint",
    "downloaded_at": "2025-06-12T02:45:11.039170",
    "content": "Visualizing Animated Data with PowerPoint How to make a bar chart race in PowerPoint Previous Visualizing Forecasts with Excel Next Visualizing Animated Data with Flourish"
  },
  {
    "title": "Convert HTML to Markdown",
    "original_url": "https://tds.s-anand.net/#/convert-html-to-markdown",
    "downloaded_at": "2025-06-12T02:45:12.132646",
    "content": "Converting HTML to Markdown When working with web content, converting HTML files to plain text or Markdown is a common requirement for content extraction, analysis, and preservation. For example: Content analysis : Extract clean text from HTML for natural language processing Data mining : Strip formatting to focus on the actual content Offline reading : Convert web pages to readable formats for e-readers or offline consumption Content migration : Move content between different CMS platforms SEO analysis : Extract headings, content structure, and text for optimization Archive creation : Store web content in more compact, preservation-friendly formats Accessibility : Convert content to formats that work better with screen readers This tutorial covers both converting existing HTML files and combining web crawling with HTML-to-text conversion in a single workflow \u2013 all using the command line. defuddle-cli defuddle-cli specializes in HTML - Markdown conversion. It\u2019s a bit slow and not very customizable but produces clean Markdown that preserves structure, links, and basic formatting. Best for content where preserving the document structure is important. : Finds all HTML files in the current directory and subdirectories : Executes the following command for each file found : Installs and runs defuddle-cli without prompting : Parses the HTML file (represented by ) and converts to markdown : Outputs to a file with the original name plus .md extension Pandoc Pandoc is a bit slow and highly customizable, preserving almost all formatting elements, leading to verbose markdown. Best for academic or documentation conversion where precision matters. Pandoc can convert from many other formats (such as Word, PDF, LaTeX, etc.) to Markdown and vice versa, making it one of most popular and versatele document convertors. : Finds all HTML files in the current directory and subdirectories : Executes the following command for each file found : The Swiss Army knife of document conversion : Convert from HTML format to strict markdown : Output to a markdown file, with the input file as the last argument Lynx Lynx is fast and generates text (not Markdown) with minimal formatting. Lynx renders the HTML as it would appear in a text browser, preserving basic structure but losing complex formatting. Best for quick content extraction or when processing large numbers of files. : Finds all HTML files in the current directory and subdirectories : Executes a shell command with batched files for efficiency : Loops through each file in the batch : Uses the lynx text browser to render HTML as plain text : Output the rendered page to stdout : Don\u2019t include the list of links at the end : Save output to a .txt file with the same base name w3m w3m is very slow processing with minimal formatting. w3m tends to be more thorough in its rendering than lynx but takes considerably longer. It supports basic JavaScript processing, making it better at handling modern websites with dynamic content. Best for cases where you need slightly better rendering than lynx, particularly for complex layouts and tables, and when some JavaScript processing is beneficial. : Finds all HTML files in the current directory and subdirectories : Executes a shell command with batched files for efficiency : Loops through each file in the batch : Uses the w3m text browser to render HTML : Output the rendered page to stdout : Specify input format as HTML : Set output width to 80 columns : Don\u2019t show graphic characters for tables and frames : Save output to a .md file with the same base name Comparison Approach Speed Format Quality Preservation Best For defuddle-cli Slow High Good structure and links Content migration, publishing pandoc Slow Very High Almost everything Academic papers, documentation lynx Fast Low Basic structure only Quick extraction, large batches w3m Very Slow Medium-Low Basic structure with better tables Improved readability over lynx Optimize Batch Processing Process in parallel : Use GNU Parallel for multi-core processing: Filter files before processing : Customize output format with additional parameters: Handle errors gracefully : Choosing the Right Tool Need speed with minimal formatting? Use the lynx approach Need precise, complete conversion? Use pandoc Need a balance of structure and cleanliness? Try defuddle-cli Working with complex tables? w3m might render them better Remember that the best approach depends on your specific use case, volume of files, and how you intend to use the converted text. Combined Crawling and Conversion Sometimes you need to both crawl a website and convert its content to markdown or text in a single workflow, like Crawl4AI or markdown-crawler . For research/data collection : Use a specialized crawler (like Crawl4AI) with post-processing conversion For simple website archiving : Markdown-crawler provides a convenient all-in-one solution For high-quality conversion : Use wget/wget2 for crawling followed by pandoc for conversion For maximum speed : Combine wget with lynx in a pipeline Crawl4AI Crawl4AI is designed for single-page extraction with high-quality content processing. Crawl4AI is optimized for AI training data extraction, focusing on clean, structured content rather than complete site preservation. It excels at removing boilerplate content and preserving the main article text. : Creates a Python virtual environment using uv (a faster alternative to virtualenv) : Activates the virtual environment (fish shell syntax) : Installs the crawl4ai package : Initializes crawl4ai\u2019s required dependencies markdown-crawler markdown-crawler combines web crawling with markdown conversion in one tool. It\u2019s efficient for bulk processing but tends to produce lower-quality markdown conversion compared to specialized converters like pandoc or defuddle. Best for projects where quantity and integration are more important than perfect formatting. and activation: Same as above : Installs the markdown-crawler package : Runs the crawler with these options: : Sets 5 threads for parallel crawling : Limits crawl depth to 3 levels : Sets the base output directory Final argument is the starting URL Previous Convert PDFs to Markdown Next LLM Website Scraping"
  },
  {
    "title": "Data Storytelling",
    "original_url": "https://tds.s-anand.net/#/data-storytelling",
    "downloaded_at": "2025-06-12T02:45:13.254309",
    "content": "Data Storytelling Previous RAWgraphs Next Narratives with LLMs"
  },
  {
    "title": "Scheduled Scraping with GitHub Actions",
    "original_url": "https://tds.s-anand.net/#/scheduled-scraping-with-github-actions",
    "downloaded_at": "2025-06-12T02:45:14.358725",
    "content": "Scheduled Scraping with GitHub Actions GitHub Actions provides an excellent platform for running web scrapers on a schedule. This tutorial shows how to automate data collection from websites using GitHub Actions workflows. Key Concepts Scheduling : Use cron syntax to run scrapers at specific times Dependencies : Install required packages like , Data Storage : Save scraped data to files and commit back to the repository Error Handling : Implement robust error handling for network issues and HTML parsing Rate Limiting : Respect website terms of service and implement delays between requests Here\u2019s a sample that scrapes the IMDb Top 250 movies using httpx and lxml: Here\u2019s a sample that runs the scraper daily and saves the data: Best Practices Cache Dependencies : Use GitHub\u2019s caching to speed up package installation Handle Errors : Implement retries and error logging Rate Limiting : Add delays between requests to avoid overwhelming servers Data Validation : Verify scraped data structure before saving Monitoring : Set up notifications for workflow failures Tools and Resources httpx : Async HTTP client GitHub Actions Marketplace GitHub Actions Documentation Video Tutorials Previous Web Automation with Playwright Next Scraping emarketer.com"
  },
  {
    "title": "4. Data Sourcing",
    "original_url": "https://tds.s-anand.net/#/data-sourcing",
    "downloaded_at": "2025-06-12T02:45:15.470621",
    "content": "Data Sourcing Before you do any kind of data science, you obviously have to get the data to be able to analyze it, visualize it, narrate it, and deploy it.\nAnd what we are going to cover in this module is how you get the data. There are three ways you can get the data. The first is you can download the data. Either somebody gives you the data and says download it from here, or you are asked to download it from the internet because it\u2019s a public data source. But that\u2019s the first way\u2014you download the data. The second way is you can query it from somewhere. It may be on a database. It may be available through an API. It may be available through a library. But these are ways in which you can selectively query parts of the data and stitch it together. The third way is you have to scrape it . It\u2019s not directly available in a convenient form that you can query or download. But it is, in fact, on a web page. It\u2019s available on a PDF file. It\u2019s available in a Word document. It\u2019s available on an Excel file. It\u2019s kind of structured, but you will have to figure out that structure and extract it from there. In this module, we will be looking at the tools that will help you either download from a data source or query from an API or from a database or from a library. And finally, how you can scrape from different sources. Here are links used in the video: The Movies Dataset IMDb Datasets Download the IMDb Datasets Explore the Internet Movie Database What does the world search for? HowStat - Cricket statistics Cricket Strike Rates Previous Project 1 Next Scraping with Excel"
  },
  {
    "title": "Data Preparation in the Shell",
    "original_url": "https://tds.s-anand.net/#/data-preparation-in-the-shell",
    "downloaded_at": "2025-06-12T02:45:16.561085",
    "content": "Data Preparation in the Shell You\u2019ll learn how to use UNIX tools to process and clean data, covering: (or ) to fetch data from websites. (or ) to compress and decompress files. to count lines, words, and characters in text. and to get the start and end of files. to extract specific columns from text. to de-duplicate lines. to sort lines. to filter lines containing specific text. to search and replace text. for more complex text processing. Here are the links used in the video: Data preparation in the shell - Notebook Data Science at the Command Line Previous Data Aggregation in Excel Next Data Preparation in the Editor"
  },
  {
    "title": "LLM Text Extraction",
    "original_url": "https://tds.s-anand.net/#/llm-text-extraction",
    "downloaded_at": "2025-06-12T02:45:17.628061",
    "content": "LLM Text Extraction JSON is one of the most widely used formats in the world for applications to exchange data. This video explains how to use LLMs to extract structure from unstructured data, covering: LLM for Data Extraction : Use OpenAI\u2019s API to extract structured information from unstructured data like addresses. JSON Schema : Define a JSON schema to ensure consistent and structured output from the LLM. Prompt Engineering : Craft effective prompts to guide the LLM\u2019s response and improve accuracy. Data Cleaning : Use string functions and OpenAI\u2019s API to clean and standardize data. Data Analysis : Analyze extracted data using Pandas to gain insights. LLM Limitations : Understand the limitations of LLMs, including potential errors and inconsistencies in output. Production Use Cases : Explore real-world applications of LLMs for data extraction, such as customer service email analysis. Here are the links used in the video: Jupyter Notebook JSON Schema Function calling Structured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied JSON Schema , so you don\u2019t need to worry about the model omitting a required key,\nor hallucinating an invalid enum value. Here\u2019s what the tells OpenAI. The items marked \u26a0\ufe0f are OpenAI specific requirements for the JSON schema. : We want you to generate a JSON response that follows this schema. : We\u2019re going to give you a schema. : The schema is called . (We can call it anything.) : Follow the schema exactly. : Now, here\u2019s the actual JSON schema. : Return an object. \u26a0\ufe0f The root object must be an object. : The object has these properties: : There\u2019s a property. : It\u2019s an array. : Each item in the array\u2026 : \u2026 is an object. : The object has these properties: : There\u2019s an property. : \u2026 which is a string. : There\u2019s an property. : \u2026 which is a string, too. : \u26a0\ufe0f You must add and include all fields int he object. : \u26a0\ufe0f OpenAI requires every object to have . : There\u2019s a property. : \u2026 which is a string. : \u26a0\ufe0f You must add and include all fields in the object. : \u26a0\ufe0f OpenAI requires every object to have . Previous LLM Sentiment Analysis Next Base 64 Encoding"
  },
  {
    "title": "Visualizing Animated Data with Flourish",
    "original_url": "https://tds.s-anand.net/#/visualizing-animated-data-with-flourish",
    "downloaded_at": "2025-06-12T02:45:18.703643",
    "content": "Visualizing Animated Data with Flourish Previous Visualizing Animated Data with PowerPoint Next Visualizing Network Data with Kumu"
  },
  {
    "title": "Cleaning Data with OpenRefine",
    "original_url": "https://tds.s-anand.net/#/cleaning-data-with-openrefine",
    "downloaded_at": "2025-06-12T02:45:19.781954",
    "content": "Cleaning Data with OpenRefine This session covers the use of OpenRefine for data cleaning, focusing on resolving entity discrepancies: Data Upload and Project Creation : Import data into OpenRefine and create a new project for analysis. Faceting Data : Use text facets to group similar entries and identify frequency of address crumbs. Clustering Methodology : Apply clustering algorithms to merge similar entries with minor differences, such as punctuation. Manual and Automated Clustering : Learn to merge clusters manually or in one go, trusting the system\u2019s clustering accuracy. Entity Resolution : Clean and save the data by resolving multiple versions of the same entity using Open Refine. Here are links used in the video: OpenRefine software Dataset for OpenRefine Previous Data Preparation in the Editor Next Profiling Data with Python"
  },
  {
    "title": "CI/CD: GitHub Actions",
    "original_url": "https://tds.s-anand.net/#/github-actions",
    "downloaded_at": "2025-06-12T02:45:20.907249",
    "content": "CI/CD: GitHub Actions GitHub Actions is a powerful automation platform built into GitHub. It helps automate your development workflow - running tests, deploying applications, updating datasets, retraining models, etc. Understand the basics of YAML configuration files Explore the pre-built actions from the marketplace How to handle secrets securely Triggering a workflow Staying within the free tier limits Caching dependencies to speed up workflows Here is a sample that runs daily, appends the International Space Station location data into , and commits it to the repository. Tools: GitHub CLI : Manage workflows from terminal Super-Linter : Validate code style Release Drafter : Automate releases act : Run actions locally How to handle secrets in GitHub Actions Previous Serverless hosting: Vercel Next Containers: Docker, Podman"
  },
  {
    "title": "7. Data Visualization",
    "original_url": "https://tds.s-anand.net/#/data-visualization",
    "downloaded_at": "2025-06-12T02:45:21.985249",
    "content": "Data visualization Previous Network Analysis in Python Next Visualizing Forecasts with Excel"
  },
  {
    "title": "LLM Sentiment Analysis",
    "original_url": "https://tds.s-anand.net/#/llm-sentiment-analysis",
    "downloaded_at": "2025-06-12T02:45:23.090581",
    "content": "LLM Sentiment Analysis OpenAI\u2019s API provides access to language models like GPT 4o, GPT 4o mini, etc. For more details, read OpenAI\u2019s guide for: Text Generation Vision Structured Outputs Start with this quick tutorial: Here\u2019s a minimal example using to generate text: Let\u2019s break down the request: : The API endpoint for text generation. : The content type of the request. : The API key for authentication. : The request body. : The model to use for text generation. : The messages to send to the model. : The role of the message. : The content of the message. This video explains how to use large language models (LLMs) for sentiment analysis and classification, covering: Sentiment Analysis : Use OpenAI API to identify the sentiment of movie reviews as positive or negative. Prompt Engineering : Learn how to craft effective prompts to get desired results from LLMs. LLM Training : Understand how to train LLMs by providing examples and feedback. OpenAI API Integration : Integrate OpenAI API into Python code to perform sentiment analysis. Tokenization : Learn about tokenization and its impact on LLM input and cost. Zero-Shot, One-Shot, and Multi-Shot Learning : Understand different approaches to using LLMs for learning. Here are the links used in the video: Jupyter Notebook Movie reviews dataset OpenAI Playground OpenAI Pricing OpenAI Tokenizer OpenAI API Reference OpenAI Docs Previous TDS GPT Reviewer Next LLM Text Extraction"
  },
  {
    "title": "Tunneling: ngrok",
    "original_url": "https://tds.s-anand.net/#/ngrok",
    "downloaded_at": "2025-06-12T02:45:24.214467",
    "content": "Tunneling: ngrok Ngrok is a tool that creates secure tunnels to your localhost, making your local development server accessible to the internet. It\u2019s essential for testing webhooks, sharing work in progress, or debugging applications in production-like environments. Run the command to create a tunnel to your local server on port 8000. This generates a public URL that you can share with others. To get started, log into and get an authtoken from the dashboard . Copy it. Then run: Now you can forward any local port to the internet. For example: Here are useful things you can do with : to serve local files to enable CORS to restrict users to @example.com and user@example.org using Google Auth to reject user agents ending with Previous DevContainers: GitHub Codespaces Next CORS"
  },
  {
    "title": "Tunneling: ngrok",
    "original_url": "https://tds.s-anand.net/#/data-analysis-with-chatgpt",
    "downloaded_at": "2025-06-12T02:45:25.307112",
    "content": "404 - Not found"
  },
  {
    "title": "Geospatial Analysis with Python",
    "original_url": "https://tds.s-anand.net/#/geospatial-analysis-with-python",
    "downloaded_at": "2025-06-12T02:45:26.423087",
    "content": "Geospatial Analysis with Python You\u2019ll learn how to perform geospatial analysis for location-based decision making, covering: Distance Calculation : Compute distances between various store locations and a reference point, such as the Empire State Building. Data Visualization : Visualize store locations on a map using Python libraries like Folium. Store Density Analysis : Determine the number of stores within a specified radius. Proximity Analysis : Identify the closest and farthest stores from a specific location. Decision Making : Use geospatial data to assess whether opening a new store is feasible based on existing store distribution. Here are links used in the video: Jupyter Notebook Learn about the package and video Learn about the package and video Learn about the package and video Learn about the package and video Previous Geospatial Analysis with Excel Next Geospatial Analysis with QGIS"
  },
  {
    "title": "3. Large Language Models",
    "original_url": "https://tds.s-anand.net/#/large-language-models",
    "downloaded_at": "2025-06-12T02:45:27.521755",
    "content": "Large Language Models This module covers the practical usage of large language models (LLMs). LLMs incur a cost. For the May 2025 batch, use aipipe.org as a proxy.\nEmails with get a $1 per calendar month allowance. (Don\u2019t exceed that.) Read the AI Pipe documentation to learn how to use it. But in short: Replace , i.e. with or Replace with the Replace model names, e.g. , with For example, let\u2019s use Gemini 2.0 Flash Lite via OpenRouter for chat completions and Text Embedding 3 Small via OpenAI for embeddings: Or using : For a 50% discount (but slower speed), use Flex processing by adding to your JSON request. AI Proxy - Jan 2025 For the Jan 2025 batch, we had created API keys for everyone with an email to use and . Your usage is limited to $1 per calendar month for this course. Don\u2019t exceed that. Use AI Proxy instead of OpenAI. Specifically: Replace your API to with Replace the with the that someone will give you. Previous Local LLMs: Ollama Next Prompt engineering"
  },
  {
    "title": "Data Visualization with Seaborn",
    "original_url": "https://tds.s-anand.net/#/data-visualization-with-seaborn",
    "downloaded_at": "2025-06-12T02:45:28.604538",
    "content": "Data Visualization with Seaborn Seaborn is a data visualization library for Python. It\u2019s based on Matplotlib but a bit easier to use, and a bit prettier. Previous Visualizing Charts with Excel Next Data Visualization with ChatGPT"
  },
  {
    "title": "Forecasting with Excel",
    "original_url": "https://tds.s-anand.net/#/forecasting-with-excel",
    "downloaded_at": "2025-06-12T02:45:29.667767",
    "content": "Forecasting with Excel Here are links used in the video: FORECAST reference FORECAST.ETS reference Height-weight dataset from Kaggle Traffic dataset from Kaggle Previous Regression with Excel Next Outlier Detection with Excel"
  },
  {
    "title": "Interactive Notebooks: Marimo",
    "original_url": "https://tds.s-anand.net/#/marimo",
    "downloaded_at": "2025-06-12T02:45:30.733487",
    "content": "Interactive Notebooks: Marimo Marimo is a new take on notebooks that solves some headaches of Jupyter. It runs cells reactively - when you change one cell, all dependent cells update automatically, just like a spreadsheet. Marimo\u2019s cells can\u2019t be run out of order. This makes Marimo more reproducible and easier to debug, but requires a mental shift from the Jupyter/Colab way of working. It also runs Python directly in the browser and is quite interactive. Browse the gallery of examples . With a wide variety of interactive widgets, It\u2019s growing popular as an alternative to Streamlit for building data science web apps. Common Operations: Best Practices: Cell Dependencies Keep cells focused and atomic Use clear variable names Document data flow between cells Interactive Elements Version Control Keep notebooks are Python files Use Git to track changes Publish on marimo.app for collaboration Previous Narratives with LLMs Next HTML Slides: RevealJS"
  },
  {
    "title": "BBC Weather API with Python",
    "original_url": "https://tds.s-anand.net/#/bbc-weather-api-with-python",
    "downloaded_at": "2025-06-12T02:45:31.803449",
    "content": "BBC Weather location ID with Python You\u2019ll learn how to get the location ID of any city from the BBC Weather API \u2013 as a precursor to scraping weather data \u2013 covering: Understanding API Calls : Learn how backend API calls work when searching for a city on the BBC weather website. Inspecting Web Interactions : Use the browser\u2019s inspect element feature to track API calls and understand the network activity. Extracting Location IDs : Identify and extract the location ID from the API response using Python. Using Python Libraries : Import and use requests, json, and urlencode libraries to make API calls and process responses. Constructing API URLs : Create structured API URLs dynamically with constant prefixes and query parameters using urlencode. Building Functions : Develop a Python function that accepts a city name, constructs the API call, and returns the location ID. To open the browser Developer Tools on Chrome, Edge, or Firefox, you can: Right-click on the page and select \u201cInspect\u201d to open the developer tools OR: Press OR: Press on Windows OR: Press on Mac Here are links and references: BBC Location ID scraping - Notebook BBC Weather - Palo Alto (location ID: 5380748) BBC Locator Service - Los Angeles Learn about the package . Watch Python Requests Tutorial: Request Web Pages, Download Images, POST Data, Read JSON, and More BBC Weather data with Python You\u2019ll learn how to scrape the live weather data of a city from the BBC Weather API, covering: Introduction to Web Scraping : Understand the basics of web scraping and its legality. Libraries Overview : Learn the importance of and . Fetching HTML : Use to fetch HTML content from a web page. Parsing HTML : Utilize to parse and navigate the HTML content. Identifying Data : Inspect HTML elements to locate specific data (e.g., high and low temperatures). Extracting Data : Extract relevant data using \u2018s function. Data Cleanup : Clean extracted data to remove unwanted elements. Post-Processing : Use regular expressions to split large strings into meaningful parts. Data Structuring : Combine extracted data into a structured pandas DataFrame. Handling Special Characters : Replace unwanted characters for better data manipulation. Saving Data : Save the cleaned data into CSV and Excel formats. Here are links and references: BBC Weather scraping - Notebook BBC Locator Service - Mumbai BBC Weather - Mumbai (location ID: 1275339) BBC Weather API - Mumbai (location ID: 1275339) Learn about the package . Watch Python Tutorial: Working with JSON Data using the json Module Learn about the package . Watch Python Tutorial: Web Scraping with BeautifulSoup and Requests Learn about the package . Watch Python Pandas Tutorial (Part 1): Getting Started with Data Analysis - Installation and Loading Data Python Pandas Tutorial (Part 2): DataFrame and Series Basics - Selecting Rows and Columns Learn about the package . Watch Python Tutorial: re Module - How to Write and Match Regular Expressions (Regex) Learn about the package . Watch Python Tutorial: Datetime Module - How to work with Dates, Times, Timedeltas, and Timezones Previous Crawling with the CLI Next Scraping IMDb with JavaScript"
  },
  {
    "title": "Actor Network Visualization",
    "original_url": "https://tds.s-anand.net/#/actor-network-visualization",
    "downloaded_at": "2025-06-12T02:45:32.871948",
    "content": "Actor Network Visualization Find the shortest path between Govinda & Angelina Jolie using IMDb data using Python: networkx or scikit-network . Notebook: How this video was created The data used to visualize the network The shortest path between actors IMDB data Codebase Previous Data Visualization with ChatGPT Next RAWgraphs"
  },
  {
    "title": "Scraping with Excel",
    "original_url": "https://tds.s-anand.net/#/scraping-with-excel",
    "downloaded_at": "2025-06-12T02:45:33.938273",
    "content": "Scraping with Excel You\u2019ll learn how to import tables on the web using Excel , covering: Data Import from Web : Use the query feature in Excel to scrape data from websites. Establishing Web Connections : Connect Excel to a web page using a URL. Using Query Editor : Navigate the query editor to view and manage web data tables. Loading Data : Load data from the web into Excel for further manipulation. Data Transformation : Remove unnecessary columns and transform data as needed. Applying Transformations : Track applied steps in the sequence for reproducibility. Refreshing Data : Refresh the imported data to get the latest updates from the web. Here are links used in the video: Chennai Weather Forecast Excel Scraping Workbook If you use Excel on Mac, the process is a bit different. See Importing External Data Into Excel on Mac . Previous 4. Data Sourcing Next Scraping with Google Sheets"
  },
  {
    "title": "1. Development Tools",
    "original_url": "https://tds.s-anand.net/#/development-tools",
    "downloaded_at": "2025-06-12T02:45:35.006055",
    "content": "Development Tools NOTE : The tools in this module are PRE-REQUISITES for the course. You would have used most of these before. If most of this is new to you, please take this course later. Some tools are fundamental to data science because they are industry standards and widely used by data science professionals. Mastering these tools will align you with current best practices and making you more adaptable in a fast-evolving industry. The tools we cover here are not just popular, they\u2019re the core technology behind most of today\u2019s data science and software development. Previous Tools in Data Science Next Editor: VS Code"
  },
  {
    "title": "Project 1",
    "original_url": "https://tds.s-anand.net/#/project-tds-virtual-ta",
    "downloaded_at": "2025-06-12T02:45:36.078235",
    "content": "Project: TDS Virtual TA Create a virtual Teaching Assistant Discourse responder. Background You are a clever student who has joined IIT Madras\u2019 Online Degree in Data Science. You have just enrolled in the Tools in Data Science course. Out of kindness for your teaching assistants, you have decided to build an API that can automatically answer student questions on their behalf based on: Course content with content for TDS Jan 2025 as on 15 Apr 2025. TDS Discourse posts with content from 1 Jan 2025 - 14 Apr 2025. Scrape the data To make sure you can answer these questions, you will need to extract the data from the above source. Create an API Your application exposes an API endpoint. You may host it anywhere. Let\u2019s assume it\u2019s at . The endpoint must accept a POST request, e.g. with a student question as well as optional base64 file attachments as JSON. For example, here\u2019s how anyone can make a request: This is a real question and uses this screenshot : The response must be a JSON object like this: The response must be sent within 30 seconds. Evaluate your application Here are a few sample questions and evaluation parameters . These are indicative . The actual evaluation could ask any realistic student question. To run this: Edit to replace with your API URL. Run this script: Deploy your application Deploy your application to a public URL that can be accessed by anyone. You may use any platform. (If you use ngrok, ensure that it is running continuously until you get your results.) Share your code Create a new public GitHub repository Add an MIT file Commit and push your code Submit your URL Submit your GitHub repository URL and your API endpoint URL at https://exam.sanand.workers.dev/tds-project-virtual-ta Evaluation Pre-requisites : Your repository MUST meet the following criteria to be eligible for evaluation Your GitHub repository exists and is publicly accessible Your GitHub repository has a file with the MIT license in the root folder We will use a modified version of with 10 realistic questions. Correct answers will be awarded up to 2 marks each. Your score will be the sum of the marks above. No normalization. What you get is what you get. Bonus: 1 mark if your GitHub repo includes a script that scrapes the Discourse posts across a date range from a Discourse course page like TDS 2 marks if we deploy your solution (with minimal modifications) as an official solution for students to use. Previous LLM Evals Next 4. Data Sourcing"
  },
  {
    "title": "Multimodal Embeddings",
    "original_url": "https://tds.s-anand.net/#/multimodal-embeddings",
    "downloaded_at": "2025-06-12T02:45:37.184853",
    "content": "Multimodal Embeddings Multimodal embeddings map text and images into the same vector space, enabling direct comparison between, say, a caption\u2009\u2014 \u201cA cute cat\u201d\u2009\u2014 and an image of that cat. This unified representation powers real-world applications like: Cross-modal search (e.g. \u201cfind images of a sunset\u201d via text queries) Content recommendation (suggesting visually similar products to text descriptions) Clustering & retrieval (grouping documents and their associated graphics) Anomaly detection (spotting unusual image\u2013text pairings) By reducing different data types to a common numeric form, you unlock richer search, enhanced recommendations, and tighter integration of visual and textual data. Get API keys Below are the steps to grab a free API key for each provider. Nomic Atlas Sign up at the Nomic Atlas homepage:\n\ud83d\udc49 https://atlas.nomic.ai/ ( Atlas | Nomic Atlas Documentation ) Once logged in, open the Dashboard and navigate to Settings \u2192 API Keys . Click Create API Key , name it, and copy the generated key. Set in your shell: Jina AI Visit the Jina AI Embeddings page:\n\ud83d\udc49 https://jina.ai/embeddings/ ( Jina AI ) Click Get Started (no credit card needed) and register for a free account. Every new key comes with 1 million free tokens . In the dashboard, go to API Key & Billing and copy your key. Set in your shell: Google Vertex AI Sign up for Google Cloud\u2019s free tier (90 days, $300 credit):\n\ud83d\udc49 https://cloud.google.com/free ( Google Cloud ) In the Cloud Console, open APIs & Services \u2192 Credentials :\n\ud83d\udc49 https://console.cloud.google.com/apis/credentials ( Google Cloud ) Click Create credentials \u2192 API key , then copy the key. Set in your shell: Example Requests Below are fully-workable snippets that: Embed two texts (\u201cA cute cat\u201d, \u201cA cardboard box\u201d) Embed two images ( , ) Send them to the respective API Replace variables ( , , , ) before running. 1. Nomic Atlas Text Embeddings Image Embeddings 2. Jina AI Jina\u2019s unified endpoint accepts text strings and base64-encoded image bytes in one batch. ( Jina AI ) 3. Google Vertex AI Multimodal Embeddings Vertex AI\u2019s multimodal model ( ) takes JSON instances combining text and base64 image data. ( Google Cloud ) With these steps, you\u2019re all set to explore and experiment with multimodal embeddings across text + image data\u2014unifying your applications\u2019 visual and linguistic understanding. Previous Embeddings Next Topic modeling"
  },
  {
    "title": "Vector databases",
    "original_url": "https://tds.s-anand.net/#/vector-databases",
    "downloaded_at": "2025-06-12T02:45:38.320148",
    "content": "Vector Databases Vector databases are specialized databases that store and search vector embeddings efficiently. Use vector databases when your embeddings exceed available memory or when you want it run fast at scale. (This is important. If your code runs fast and fits in memory, you DON\u2019T need a vector database. You can can use for these tasks.) Vector databases are an evolving space. The first generation of vector databases were written in C and typically used an algorithm called HNSW (a way to approximately find the nearest neighbor). Some popular ones are: chroma 19,637 \u2b50 May 2025 qdrant 23,341 \u2b50 May 2025 lancedb 6,327 \u2b50 May 2025 faiss 34,684 \u2b50 May 2025 milvus 34,476 \u2b50 May 2025 weaviate 13,222 \u2b50 May 2025 In addition, most relational databases now support vector search. For example: DuckDB : Supports vector search with . SQLite : Supports vector search with . PostgreSQL : Supports vector search with . Take a look at this Vector DB Comparison . Watch this Vector Database Tutorial (3 min): ChromaDB Here\u2019s a minimal example using Chroma: LanceDB Here\u2019s the same example using LanceDB: DuckDB Here\u2019s the same example using DuckDB: Previous Topic modeling Next RAG with the CLI)"
  },
  {
    "title": "LLM Video Screen-Scraping",
    "original_url": "https://tds.s-anand.net/#/llm-video-screen-scraping",
    "downloaded_at": "2025-06-12T02:45:39.510592",
    "content": "LLM Video Screen-Scraping Video screen-scraping with LLMs is a powerful technique for extracting structured data from screen recordings. This approach works with any visible screen content and bypasses traditional web scraping limitations like authentication or anti-scraping measures. Key benefits: No setup cost or authentication handling Works with any visible screen content Full control over data exposure Extremely cost-effective (< $0.001 per short video) Bypasses anti-scraping measures Handles varying formats and layouts Quick Start Example Here\u2019s a basic workflow using Google\u2019s AI Studio and Gemini: Record the Screen Use QuickTime (Mac) or Windows Game Bar (Windows), Screen2Gif, or any tool of your choice Select specific screen area containing target data Record scrolling/clicking through content Keep recordings short (30-60 seconds) Process with Gemini Upload to Google AI Studio Select Gemini 1.5 Flash (cost-effective) Prompt for structured output (JSON/CSV) Example prompt for extracting tabular data: Cost Calculation Gemini 1.5 Flash pricing (as of January 2025): $0.075 per million tokens Cost per frame ~ 250 tokens Cost for 24 hours of video at 1 frame per second ~ $1.62! Best Practices Recording Quality Frame only relevant content Pause briefly on important data Maintain consistent scroll speed Use high contrast display settings Data Validation Always verify critical data manually Use spot-checking for large datasets Consider running multiple passes Log and review any anomalies Error Handling Request data in simple formats (CSV/JSON) Include validation in prompts Split long videos into segments Handle missing/partial data gracefully Use Cases Data Extraction Email content aggregation Dashboard metrics collection Protected web content Legacy system data Data Journalism Public records analysis Time-series data collection Interactive visualization data Government website scraping Business Intelligence Competitor pricing analysis Market research data Internal system migration Legacy report conversion Tools: Google AI Studio : Process videos with Gemini QuickTime Player : Screen recording (Mac) Screen2Gif : Screen recording (Windows) OBS Studio : Advanced screen recording (cross-platform) References: Simon Willison\u2019s Video Scraping Tutorial Gemini API Documentation Previous LLM Website Scraping Next Web Automation with Playwright"
  },
  {
    "title": "LLM Video Screen-Scraping",
    "original_url": "https://tds.s-anand.net/#/revealjs",
    "downloaded_at": "2025-06-12T02:45:40.627318",
    "content": "404 - Not found"
  },
  {
    "title": "Profiling Data with Python",
    "original_url": "https://tds.s-anand.net/#/profiling-data-with-python",
    "downloaded_at": "2025-06-12T02:45:41.759069",
    "content": "Profile Data with Python This session covers the use of the library for generating comprehensive data reports in Python: Library Installation and Import : Learn how to install and import the pandas_profiling library. Profile Report Generation : Generate an HTML report with a single line of code using ProfileReport. Descriptive Statistics : View detailed descriptive statistics such as variance, standard deviation, and kurtosis. Outlier Detection : Identify and analyze outliers within the dataset. Correlation Analysis : Understand how variables are correlated with each other using visual representations. Handling Missing Values : Get insights on missing data and decide on imputation or removal strategies. Initial Data Insights : Use the report to gather early warnings and insights before starting the data cleaning and modeling process. Here are links used in the video: Jupyter Notebook Pandas Profiling output Learn about the package . Video Learn about the package Previous Cleaning Data with OpenRefine Next Parsing JSON"
  },
  {
    "title": "JSON",
    "original_url": "https://tds.s-anand.net/#/json",
    "downloaded_at": "2025-06-12T02:45:42.871425",
    "content": "JSON JSON (JavaScript Object Notation) is the de facto standard format for data exchange on the web and APIs. Its human-readable format and widespread support make it essential for data scientists working with web services, APIs, and configuration files. For data scientists, JSON is essential when: Working with REST APIs and web services Storing configuration files and metadata Parsing semi-structured data from databases like MongoDB Creating data visualization specifications (e.g., Vega-Lite) Watch this comprehensive introduction to JSON (15 min): Key concepts to understand in JSON: JSON only supports 6 data types: strings, numbers, booleans, null, arrays, and objects You can nest data. Arrays and objects can contain other data types, including other arrays and objects Always validate. Ensure JSON is well-formed. Comm errors: Trailing commas, missing quotes, and escape characters JSON Lines is a format that allows you to store multiple JSON objects in a single line.\nIt\u2019s useful for logging and streaming data. Tools you could use with JSON: JSONLint : Validate and format JSON JSON Editor Online : Visual JSON editor and formatter JSON Schema : Define the structure of your JSON data jq : Command-line JSON processor Common Python operations with JSON: Practice JSON skills with these resources: JSON Generator : Create sample JSON data JSON Path Finder : Learn to navigate complex JSON structures JSON Schema Validator : Validate JSON against schemas Previous CSS Selectors Next Terminal: Bash"
  },
  {
    "title": "Geospatial Analysis with QGIS",
    "original_url": "https://tds.s-anand.net/#/geospatial-analysis-with-qgis",
    "downloaded_at": "2025-06-12T02:45:43.959957",
    "content": "Geospatial Analysis with QGIS You\u2019ll learn how to use QGIS for geographic data processing, covering: Shapefiles and KML Files : Create and manage shapefiles and KML files for storing and analyzing geographic information. Downloading QGIS : Install QGIS on different operating systems and familiarize yourself with its interface. Geospatial Data : Access and utilize shapefiles from sources like Diva-GIS and integrate them into QGIS projects. Creating Custom Shapefiles : Learn how to create custom shapefiles when existing ones are unavailable, including creating a shapefile for South Sudan. Editing and Visualization : Use QGIS tools to edit shapefiles, add attributes, and visualize geographic data with various styling and labeling options. Exporting Data : Export shapefiles or KML files for use in other applications, such as Google Earth. Here are links used in the video: QGIS Project Shapefile Data Previous Geospatial Analysis with Python Next Network Analysis in Python"
  },
  {
    "title": "Spreadsheet: Excel, Google Sheets",
    "original_url": "https://tds.s-anand.net/#/spreadsheets",
    "downloaded_at": "2025-06-12T02:45:45.032775",
    "content": "Spreadsheet: Excel, Google Sheets You\u2019ll use spreadsheets for data cleaning and exploration. The most popular spreadsheet program is Microsoft Excel followed by Google Sheets . You may be already familiar with these. If not, make sure to learn the basics of both. Go through the Microsoft Excel video training and make sure you cover: Intro to Excel Rows & columns Cells Formatting Formulas & Functions Tables PivotTables Watch this video for an introduction to Google Sheets (49 min): Previous AI Terminal Tools: llm Next Database: SQLite"
  },
  {
    "title": "Splitting Text in Excel",
    "original_url": "https://tds.s-anand.net/#/splitting-text-in-excel",
    "downloaded_at": "2025-06-12T02:45:46.197572",
    "content": "Splitting Text in Excel You\u2019ll learn how to transform a single-column data set into multiple, organized columns based on specific delimiters using the \u201cText to Columns\u201d feature. Here are links used in the video: US Senate Legislation - Votes Previous Data Transformation in Excel Next Data Aggregation in Excel"
  },
  {
    "title": "Narratives with LLMs",
    "original_url": "https://tds.s-anand.net/#/narratives-with-llms",
    "downloaded_at": "2025-06-12T02:45:47.341724",
    "content": "Narratives with LLMs #TODO Previous Data Storytelling Next Interactive Notebooks: Marimo"
  },
  {
    "title": "Containers: Docker, Podman",
    "original_url": "https://tds.s-anand.net/#/docker",
    "downloaded_at": "2025-06-12T02:45:48.481473",
    "content": "Containers: Docker, Podman Docker and Podman are containerization tools that package your application and its dependencies into a standardized unit for software development and deployment. Docker is the industry standard. Podman is compatible with Docker and has better security (and a slightly more open license). In this course, we recommend Podman but Docker works in the same way. Initialize the container engine: Common Operations. (You can use instead of in the same way.) You can create a to build a container image. Here\u2019s a sample that converts a Python script into a container image. To build, run, and deploy the container, run these commands: Tools: Dive : Explore image layers Skopeo : Work with container images Trivy : Security scanner Optional: For Windows, see WSL 2 with Docker getting started Previous CI/CD: GitHub Actions Next DevContainers: GitHub Codespaces"
  },
  {
    "title": "Convert PDFs to Markdown",
    "original_url": "https://tds.s-anand.net/#/convert-pdfs-to-markdown",
    "downloaded_at": "2025-06-12T02:45:49.622376",
    "content": "Converting PDFs to Markdown PDF documents are ubiquitous in academic, business, and technical contexts, but extracting and repurposing their content can be challenging. This tutorial explores various command-line tools for converting PDFs to Markdown format, with a focus on preserving structure and formatting suitable for different use cases, including preparation for Large Language Models (LLMs). Use Cases: LLM training and fine-tuning : Create clean text data from PDFs for AI model training Knowledge base creation : Transform PDFs into searchable, editable markdown documents Content repurposing : Convert academic papers and reports for web publication Data extraction : Pull structured content from PDF documents for analysis Accessibility : Convert PDFs to more accessible formats for screen readers Citation and reference management : Extract bibliographic information from academic papers Documentation conversion : Transform technical PDFs into maintainable documentation PyMuPDF4LLM PyMuPDF4LLM is a specialized component of the PyMuPDF library that generates Markdown specifically formatted for Large Language Models. It produces high-quality markdown with good preservation of document structure. It\u2019s specifically optimized for producing text that works well with LLMs, removing irrelevant formatting while preserving semantic structure. Requires PyTorch, which adds dependencies but enables more advanced processing capabilities. PyMuPDF4LLM uses MuPDF as its PDF parsing engine. PyMuPDF is emerging as a strong default for PDF text extraction due to its accuracy and performance in handling complex PDF structures. : Forces Python to use UTF-8 encoding regardless of system locale : Uses uv package manager to run Python with the pymupdf4llm package : Executes Python code directly from the command line : Imports the PDF-to-Markdown module : Creates a file to write the markdown output : Converts the PDF to markdown and writes to file Markitdown Markitdown is Microsoft\u2019s tool for converting various document formats to Markdown, including PDFs, DOCX, XLSX, PPTX, and ZIP files. It\u2019s a versatile multi-format converter that handles PDFs via PDFMiner, DOCX via Mammoth, XLSX via Pandas, and PPTX via Python-PPTX. Good for batch processing of mixed document types. The quality of PDF conversion is generally good but may struggle with complex layouts or heavily formatted documents. : Forces Python to use UTF-8 encoding : Runs the markitdown tool via the uv package manager : The input PDF file : Redirects output to a markdown file Unstructured Unstructured is rapidly becoming the de facto library for parsing over 40 different file types. It is excellent for extracting text and tables from diverse document formats. Particularly useful for generating clean content to pass to LLMs. Strong community support and actively maintained. GROBID If you specifically need to parse references from text-native PDFs or reliably OCR\u2019ed ones, GROBID remains the de facto choice. It excels at extracting structured bibliographic information with high accuracy. Mistral OCR API Mistral OCR offers an end-to-end cloud API that preserves both text and layout, making it easier to isolate specific sections like References. It shows the most promise currently, though it requires post-processing. Azure Document Intelligence API For enterprise users already in the Microsoft ecosystem, Azure Document Intelligence provides excellent raw OCR with enterprise SLAs. May require custom model training or post-processing to match GROBID\u2019s reference extraction capabilities. Other libraries Docling is IBM\u2019s document understanding library that supports PDF conversion. It can be challenging to install, particularly on Windows and some Linux distributions. Offers advanced document understanding capabilities beyond simple text extraction. MegaParse takes a comprehensive approach using LibreOffice, Pandoc, Tesseract OCR, and other tools. It has Robust handling of different document types but requires an OpenAI API key for some features. Good for complex documents but has significant dependencies. Comparison of PDF-to-Markdown Tools Tool Strengths Weaknesses Best For PyMuPDF4LLM Structure preservation, LLM optimization Requires PyTorch AI training data, semantic structure Markitdown Multi-format support, simple usage Less precise layout handling Batch processing, mixed documents Unstructured Wide format support, active development Can be resource-intensive Production pipelines, integration GROBID Reference extraction excellence Narrower use case Academic papers, citations Docling Advanced document understanding Installation difficulties Research applications MegaParse Comprehensive approach Requires OpenAI API Complex documents, OCR needs How to pick: Need LLM-ready content? PyMuPDF4LLM is specifically designed for this Working with multiple document formats? Markitdown handles diverse inputs Extracting academic references? GROBID remains the standard Building a production pipeline? Unstructured offers the best integration options Handling complex layouts? Consider commercial OCR like Mistral or Azure Document Intelligence The optimal approach depends on your specific requirements regarding accuracy, structure preservation, and the intended use of the extracted content. Tips for Optimal PDF Conversion Pre-process PDFs when possible: Try multiple tools on the same document to compare results: Handle scanned PDFs appropriately: Consider post-processing for better results: Previous Scraping PDFs with Tabula Next Convert HTML to Markdown"
  },
  {
    "title": "Crawling with the CLI",
    "original_url": "https://tds.s-anand.net/#/crawling-cli",
    "downloaded_at": "2025-06-12T02:45:50.746312",
    "content": "Crawling with the CLI Since websites are a common source of data, we often download entire websites (crawling) and then process them offline. Web crawling is essential in many data-driven scenarios: Data mining and analysis : Gathering structured data from multiple pages for market research, competitive analysis, or academic research Content archiving : Creating offline copies of websites for preservation or backup purposes SEO analysis : Analyzing site structure, metadata, and content to improve search rankings Legal compliance : Capturing website content for regulatory or compliance documentation Website migration : Creating a complete copy before moving to a new platform or design Offline access : Downloading educational resources, documentation, or reference materials for use without internet connection The most commonly used tool for fetching websites is . It is pre-installed in many UNIX distributions and easy to install. To crawl the IIT Madras Data Science Program website for example, you could run: Here\u2019s what each option does: : Enables recursive downloading (following links) : Limits recursion depth to 3 levels from the initial URL : Restricts crawling to only URLs below the initial directory : Converts all links in downloaded documents to work locally : Adds proper extensions to files (.html, .jpg, etc.) based on MIME types : Automatically handles compressed content (gzip, deflate) : Only downloads files with these extensions : Saves all downloaded files to the specified directory wget2 is a better version of and supports HTTP2, parallel connections, and only updates modified sites. The syntax is (mostly) the same. There are popular free and open-source alternatives to Wget: Wpull Wpull is a wget\u2010compatible Python crawler that supports on-disk resumption, WARC output, and PhantomJS integration. HTTrack HTTrack is dedicated website\u2010mirroring tool with rich filtering and link\u2010conversion options. Robots.txt is a standard file found in a website\u2019s root directory that specifies which parts of the site should not be accessed by web crawlers. It\u2019s part of the Robots Exclusion Protocol, an ethical standard for web crawling. Why it\u2019s important : Server load protection : Prevents excessive traffic that could overload servers Privacy protection : Keeps sensitive or private content from being indexed Legal compliance : Respects website owners\u2019 rights to control access to their content Ethical web citizenship : Shows respect for website administrators\u2019 wishes How to override robots.txt restrictions : wget, wget2 : Use httrack : Use wpull : Use When to override robots.txt (use with discretion) : Only bypass when: You have explicit permission from the website owner You\u2019re crawling your own website The content is publicly accessible and your crawling won\u2019t cause server issues You\u2019re conducting authorized security testing Remember that bypassing without legitimate reason may: Violate terms of service Lead to IP banning Result in legal consequences in some jurisdictions Cause reputation damage to your organization Always use the minimum necessary crawling speed and scope, and consider contacting website administrators for permission when in doubt. Previous Scraping with Google Sheets Next BBC Weather API with Python"
  },
  {
    "title": "Scraping: Live Sessions",
    "original_url": "https://tds.s-anand.net/#/scraping-live-sessions",
    "downloaded_at": "2025-06-12T02:45:51.829619",
    "content": "Scraping: Live Sessions Fundamentals of web scraping with urllib and BeautifulSoup Intermediate web scraping use of cookies XML intro and scraping Previous Scraping emarketer.com Next 5. Data Preparation"
  },
  {
    "title": "Outlier Detection with Excel",
    "original_url": "https://tds.s-anand.net/#/outlier-detection-with-excel",
    "downloaded_at": "2025-06-12T02:45:52.922041",
    "content": "Outlier Detection with Excel You\u2019ll learn how to identify and handle outliers in data using Excel, covering: Understanding Outliers : Definition of outliers and their impact on statistical analysis. Calculating Quartiles : Using Excel formulas to calculate Q1 (first quartile) and Q3 (third quartile). Interquartile Range (IQR) : Finding the IQR by subtracting Q1 from Q3. Determining Bounds : Calculating lower and upper bounds using 1.5 times the IQR. Identifying Outliers : Using Excel functions to determine if data points fall outside the calculated bounds. Visualizing Data : Creating box plots to visualize outliers and data distribution. Handling Outliers : Deciding whether to exclude or keep outliers based on their impact on analysis. Here are the links used in the video: Understand distributions and outliers COVID-19 vaccinations data - Excel Previous Forecasting with Excel Next Data Analysis with Python"
  },
  {
    "title": "Nominatim API with Python",
    "original_url": "https://tds.s-anand.net/#/nominatim-api-with-python",
    "downloaded_at": "2025-06-12T02:45:54.045928",
    "content": "Nominatim API with Python You\u2019ll learn how to get the latitude and longitude of any city from the Nominatim API. Introduction to Nominatim : Understand how Nominatim, from OpenStreetMap, works similarly to Google Maps for geocoding. Installation and Import : Learn to install and import geopy and nominatim . Using the Locator : Create a locator object using Nominatim and set up a user agent. Geocoding an Address : Use to input an address (e.g., Eiffel Tower) and fetch geocoded data. Extracting Data : Access detailed information like latitude, longitude, bounding box, and accurate address from the JSON response. Classifying Locations : Identify the type of place (e.g., tourism, university) using the response data. Practical Example : Geocode \u201cIIT Madras\u201d and retrieve its full address, type (university), and other relevant information. Here are links and references: Geocoding using Nominatim - Notebook Learn about the module in the package Learn about the package If you get a HTTP Error 403 from Nominatim, use your email ID or your name instead of \u201cmyGeocoder\u201d in Previous Scraping IMDb with JavaScript Next Wikipedia Data with Python"
  },
  {
    "title": "Data Analysis with Python",
    "original_url": "https://tds.s-anand.net/#/data-analysis-with-python",
    "downloaded_at": "2025-06-12T02:45:55.176154",
    "content": "Data Analysis with Python You\u2019ll learn practical data analysis techniques in Python using Pandas, covering: Reading Parquet Files : Utilize Pandas to read Parquet file formats for efficient data handling. Dataframe Inspection : Methods to preview and understand the structure of a dataset. Pivot Tables : Creating and interpreting pivot tables to summarize data. Percentage Calculations : Normalize pivot table values to percentages for better insights. Correlation Analysis : Calculate and interpret correlation between variables, including significance testing. Statistical Significance : Use statistical tests to determine the significance of observed correlations. Datetime Handling : Extract and manipulate date and time information from datetime columns. Data Visualization : Generate and customize heat maps to visualize data patterns effectively. Leveraging AI : Use ChatGPT to generate and refine analytical code, enhancing productivity and accuracy. Here are the links used in the video: Data analysis with Python - Notebook Card transactions dataset (Parquet) 10 minutes to Pandas Python Pandas tutorials Previous Outlier Detection with Excel Next Data Analysis with SQL"
  },
  {
    "title": "Scraping IMDb with JavaScript",
    "original_url": "https://tds.s-anand.net/#/scraping-imdb-with-javascript",
    "downloaded_at": "2025-06-12T02:45:56.316649",
    "content": "Scraping IMDb with JavaScript You\u2019ll learn how to scrape the IMDb Top 250 movies directly in the browser using JavaScript on the Chrome DevTools, covering: Access Developer Tools : Use F12 or right-click > Inspect to open developer tools in Chrome or Edge. Inspect Elements : Identify and inspect HTML elements using the Elements tab. Query Selectors : Use and to find elements by CSS class. Extract Text Content : Retrieve text content from elements using JavaScript. Functional Programming : Apply map and arrow functions for concise data processing. Data Structuring : Collect and format data into an array of arrays. Copying Data : Use the copy function to transfer data to the clipboard. Convert to Spreadsheet : Use online tools to convert JSON data to CSV or Excel format. Text Manipulation : Perform text splitting and cleaning in Excel for final data formatting. Here are links and references: IMDB Top 250 movies Learn about Chrome Devtools Previous BBC Weather API with Python Next Nominatim API with Python"
  },
  {
    "title": "Prompt engineering",
    "original_url": "https://tds.s-anand.net/#/prompt-engineering",
    "downloaded_at": "2025-06-12T02:45:57.431113",
    "content": "Prompt Engineering Prompt engineering is the process of crafting effective prompts for large language models (LLMs). One of the best ways to approach prompt engineering is to think of LLMs as a smart colleague (with amnesia) who needs explicit instructions. The most authoritative guides are from the LLM providers themselves: Anthropic Google OpenAI Here are some best practices: Use prompt optimizers They rewrite your prompt to improve it. Explore: Anthropic Prompt Optimizer OpenAI Prompt Generation Google AI-powered prompt writing tools Be clear, direct, and detailed Be explicit and thorough. Include all necessary context, goals, and details so the model understands the full picture. BAD : Explain gravitation lensing. (Reason: Vague and lacks context or detail.) GOOD : Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it\u2019s observed and its significance in astronomy. (Reason: Specifies the audience, scope, and focus.) When you ask a question, don\u2019t be vague. Spell it out. Give every detail the listener needs.\nThe clearer you are, the better the answer you\u2019ll get.\nFor example, don\u2019t just say, Explain Gravitation Lensing.\nSay, Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it\u2019s observed and its significance in astronomy. Anthropic | OpenAI | Google Give examples Provide 2-3 relevant examples to guide the model on the style, structure, or format you expect. This helps the model produce outputs consistent with your desired style. BAD : Explain how to tie a bow tie. (Reason: No examples or reference points given.) GOOD : Explain how to tie a bow tie. For example: To tie a shoelace, you cross the laces and pull them tight\u2026 To tie a necktie, you place it around the collar and loop it through\u2026 Now, apply a similar step-by-step style to describe how to tie a bow tie. (Reason: Provides clear examples and a pattern to follow.) Give examples to the model. If you want someone to build a house, show them a sketch. Don\u2019t just say \u2018build something.\u2019\nGiving examples is like showing a pattern. It makes everything easier to follow. Anthropic | OpenAI | Google Think step by step Instruct the model to reason through the problem step by step. This leads to more logical, well-structured answers. BAD : Given this transcript, is the customer satisfied? (Reason: No prompt for structured reasoning.) GOOD : Given this transcript, is the customer satisfied? Think step by step. (Reason: Directly instructs the model to break down reasoning into steps.) Ask the model to think step by step. Don\u2019t ask the model to just give the final answer right away.\nThat\u2019s like asking someone to answer with the first thing that pops into their head.\nInstead, ask them to break down their thought process into simple moves \u2014 like showing each rung of a ladder as they climb.\nFor example, when thinking step by step, the model could, A, list each customer question, B, find out if it was addressed, and C, decide that the agent answered only 2 out of the 3 questions. Anthropic | OpenAI | Google Assign a role Specify a role or persona for the model. This provides context and helps tailor the response style. BAD : Explain how to fix a software bug. (Reason: No role or perspective given.) GOOD : You are a seasoned software engineer. Explain how to fix a software bug in legacy code, including the debugging and testing process. (Reason: Assigns a clear, knowledgeable persona, guiding the style and depth.) Tell the model who they are. Maybe they\u2019re a seasoned software engineer fixing a legacy bug, or an experienced copy editor revising a publication.\nBy clearly telling the model who they are, you help them speak with just the right expertise and style.\nSuddenly, your explanation sounds like it\u2019s coming from a true specialist, not a random voice. Anthropic | OpenAI | Google Use XML to structure your prompt Use XML tags to separate different parts of the prompt clearly. This helps the model understand structure and requirements. BAD : Here\u2019s what I want: Provide a summary and then an example. (Reason: Unstructured, no clear separation of tasks.) GOOD : (Reason: Uses XML tags to clearly distinguish instructions from examples.) Think of your request like a box. XML tags are neat little labels on that box.\nThey help keep parts sorted, so nothing gets lost in the shuffle. Anthropic | OpenAI | Google Use Markdown to format your output Encourage the model to use Markdown for headings, lists, code blocks, and other formatting features to produce structured, easily readable answers. BAD : Give me the steps in plain text. (Reason: No specific formatting instructions, less readable.) GOOD : Provide the steps in a markdown-formatted list with ### headings for each section and numbered bullet points. (Reason: Directly instructs to use Markdown formatting, making output more structured and clear.) BAD : Correct the spelling and show the corrections. (Reason: No specific formatting instructions) GOOD : Correct the spelling, showing <ins>additions</ins> and <del>deletions</del>. (Reason: Directly instructs to use HTML formatting, making output more structured and clear.) Markdown is a simple formatting language that all models understand.\nYou can have them add neat headings, sections, bold highlights, and bullet points.\nThese make complex documents more scannable and easy on the eyes. Use JSON for machine-readable output When you need structured data, ask for a JSON-formatted response. This ensures the output is machine-readable and organized. BAD : Just list the items. (Reason: Unstructured plain text makes parsing harder.) GOOD : (Reason: Instructing JSON format ensures structured, machine-readable output.) Note: Always use JSON schema if possible. JSON schema is a way to describe the structure of JSON data. An easy way to get the JSON schema is to give ChatGPT sample output and ask it to generate the schema. Imagine you\u2019re organizing data for a big project. Plain text is like dumping everything into one messy pile \u2014 it\u2019s hard to find what you need later.\nJSON, on the other hand, is like packing your data into neat, labeled boxes within boxes.\nEverything has its place: fields like \u2018name,\u2019 \u2018description,\u2019 and \u2018value\u2019 make the data easy to read, especially for machines.\nFor example, instead of just listing items, you can structure them as a JSON array, with each item as an object.\nThat way, when you hand it to a program, it\u2019s all clear and ready to use. Prefer Yes/No answers Convert rating or percentage questions into Yes/No queries. LLMs handle binary choices better than numeric scales. BAD : On a scale of 1-10, how confident are you that this method works? (Reason: Asks for a numeric rating, which can be imprecise.) GOOD : Is this method likely to work as intended? Please give a reasoning and then answer Yes or No. (Reason: A binary question simplifies the response and clarifies what\u2019s being asked.) Don\u2019t ask \u2018On a scale of one to five\u2026\u2019. Models are not good with numbers.\nThey don\u2019t know how to grade something 7 versus 8 on a 10 point scale. \u2018Yes or no?\u2019 is simple. It\u2019s clear. It\u2019s quick.\nSo, break your question into simple parts that they can answer with just a yes or a no. Ask for reason first, then the answer Instruct the model to provide its reasoning steps before stating the final answer. This makes it less likely to justify itself and more likely to think deeper, leading to more accurate results. BAD : What is the best route to take? (Reason: Direct question without prompting reasoning steps first.) GOOD : First, explain your reasoning step by step for how you determine the best route. Then, after you\u2019ve reasoned it out, state your final recommendation for the best route. (Reason: Forces the model to show its reasoning process before giving the final answer.) BEFORE making its final choice, have the model talk through their thinking. Reasoning first, answer second.\nThat way, the model won\u2019t be tempted to justify an answer that they gave impulsively. It is also more likely to think deeper. Use proper spelling and grammar A well-written, grammatically correct prompt clarifies expectations. Poorly structured prompts can confuse the model. BAD : xplin wht the weirless netork do? make shur to giv me a anser?? (Reason: Poor spelling and unclear instructions.) GOOD : Explain what a wireless network does. Please provide a detailed, step-by-step explanation. (Reason: Proper spelling and clarity lead to a more coherent response.) If your question sounds like gibberish, expect a messy answer. Speak cleanly.\nWhen you do, the response will be much clearer. Video Tutorials Watch Prompt Engineering Tutorial \u2013 Master ChatGPT and LLM Responses (41 min) . It covers: Basics of AI and large language models . How to write clear and detailed prompts to improve answers. Tips for creating interactive and personalized AI responses. Advanced topics like AI mistakes (hallucinations) and text embeddings (how AI understands words). Fun examples, like making AI write poems or correct grammar. Previous 3. Large Language Models Next TDS TA Instructions"
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/README",
    "downloaded_at": "2025-06-12T02:45:58.519478",
    "content": "Tools in Data Science - May 2025 Tools in Data Science is a practical diploma level data science course at IIT Madras that teaches\npopular tools for sourcing data, transforming it, analyzing it, communicating these as visual stories, and deploying them in production. This course exposes you to real-life tools Courses teach you programming and data science. From statistics to algorithms to writing Python code to building models. But one critical subject that\u2019s rarely covered is: what tools should I pick and how do I become proficient in them? These tools might not help your CV much. But they will make things easier in real life. For example, at school: You learn from pristine datasets. But in the industry, you\u2019ll have to scrape them yourself. You learn how to train models. But soon, you\u2019ll just pick something from HuggingFace. You learn to write a log parser over weeks. Instead, your boss writes a + script in minutes. \u201cWe lost the documentation on quantum mechanics. You\u2019ll have to decode the regexes yourself.\u201d In this course, we\u2019ve curated the most important tools people use in data science. Learn them well. You\u2019ll be a lot more productive than your peers. This course is quite hard Here\u2019s students\u2019 feedback: 2 out of 5 students in the Jan 2025 batch failed It used to be an easy course until 2024. # # # Now it\u2019s hard and covers more. Take it in your last semester if possible. # # # Plan extra time. It takes more time than typical 3-credit courses. # # # LLMs grade you \u2013 unpredictably. # # The ROE is hard. # Take Graded assignment 1 to check if you\u2019re ready for this course. Please drop this course (do it in a later term) if you score low. It\u2019ll be too tough for you now. But it's probably worth it. Here\u2019s students\u2019 feedback: Course experience and farewell post Programming skills are a pre-requisite You need a good understanding of Python, JavaScript, HTML, HTTP, Excel, and data science concepts. But isn\u2019t this a data science course? Yes. Good data scientists are good programmers. Data scientists don\u2019t just analyze data or train models. They source data, clean it, transform it, visualize it, deploy it, and automate the whole process. In some organizations, some of this work is done by others (e.g. data engineers, IT teams, etc.). But wherever you are, some of the time, you need to write code for all of this yourself. This course teaches you tools that will make you more productive. But you do need programming to learn many of them. If you passed, don't enroll again The course is public, so you can always audit it. Also, registering again for the course does not improve marks much . We encourage learning by sharing You CAN copy from friends. You can work in groups. You can share code. Even in projects, assignments, and exams (except the final end-term exam). Why should you copy? Because in real life, there\u2019s no time to re-invent the wheel. You\u2019ll be working in teams on the shoulders of giants. It\u2019s important to learn how to do that well. To learn well, understand what you\u2019re copying. If you\u2019re short of time, prioritize. To learn better, teach what you\u2019ve learnt. We cover 7 modules in 12 weeks The content evolves with technology and feedback.\nTrack the commit history for changes. Development Tools and concepts to build models and apps. Deployment Tools and concepts to publish what you built. Large Language Models that make your work easier and your apps smarter. Data Sourcing to get data from the web, files, and databases. Data Preparation to clean up and convert the inputs to the right format. Data Analysis to find surprising insights in the data. Data Visualization to communicate those insights as visual stories. Anyone can audit this course Everyone has access to: Course content at https://tds.s-anand.net/ Evaluations You can solve these questions any time and check your answers before the submission dates. Only enrolled students can participate in Discourse , get project evaluations, take the final end-term, or get a certificate. Those auditing can join the TDS 2025 May Google Group for announcements. Evaluations are mostly open Internet Tentative dates: Exam Type Weight Release Date Submission Date GA: Graded assignments Best 4 out of 7 15% Graded Assignment 1 Discuss Online open-Internet MCQ Thu 01 May 2025 Sun 18 May 2025 Graded Assignment 2 Discuss Online open-Internet MCQ Thu 05 May 2025 Sun 25 May 2025 Graded Assignment 3 Discuss Online open-Internet MCQ Fri 20 May 2025 Sun 01 Jun 2025 P1: Project 1 Online open-Internet 20% Fri 16 May 2025 Sat 14 Jun 2025 Graded Assignment 4 Online open-Internet MCQ Wed 11 Jun 2025 Sun 22 Jun 2025 Graded Assignment 5 Online open-Internet MCQ Wed 18 Jun 2025 Sun 29 Jun 2025 Graded Assignment 6 Online open-Internet MCQ Wed 02 Jul 2025 Sun 13 Jul 2025 ROE: Remote Online Exam Online open-Internet MCQ 20% Sun 20 Jul 2025 13:00 Sun 20 Jul 2025 13:45 Graded Assignment 7 Online open-Internet MCQ Wed 16 Jul 2025 Sun 27 Jul 2025 P2: Project 2 Online open-Internet 20% Fri 11 Jul 2025 Fri 8 Aug 2025 F: Final end-term In-person, no internet 25% Sun 31 Aug 2025 Sun 31 Aug 2025 Updates: 5 May 2025: GA1 submission date postponed from 11 May to 18 May 2025 GA2 submission date postponed from 18 May to 25 May 2025 GA3 submission date preponed from 01 Jun to 25 May 2025 since there\u2019s a break the week after Notes Graded Assignment 1 checks course pre-requisites . Please drop this course (do it in a later term) if you score low. It\u2019ll be too tough for you now. Remote exams are open and hard You can use the Internet, WhatsApp, ChatGPT, your notes, your friends, your pets\u2026 The RoE is especially hard. Read: What is the purpose of an impossible RoE exam? Final exam is in-person and closed book . It tests your memory. It\u2019s easy. Projects test application . The projects test how well you apply what you learnt in a real-world context. Bonus activities may be posted on Discourse . See previous bonus activities Evaluations are mostly automated . This course uses pre-computed (for objective) or LLMs (for subjective) evaluations. LLMs will evaluate you differently each time. Learn to prompt them robustly to get higher marks. Constantly check communications Check these three links regularly to keep up with the course. Seek Notifications for Course Notifications. Log into seek.onlinedegree.iitm.ac.in and click on the bell icon on the top right corner . Check notifications daily. Your email for Course Announcements. Seek Inbox are forwarded to your email. Check daily. Check spam folders too. TDS Discourse : Faculty, instructors, and TAs will share updates and address queries here. Email support@study.iitm.ac.in cc: discourse-staff1@study.iitm.ac.in if you can\u2019t access Discourse. People who help you Faculty (who design the course) Anand S , root.node@gmail.com | @s.anand Instructors (who teach the course) Carlton D\u2019Silva. 22f3001919@ds.study.iitm.ac.in | @carlton Prasanna S , prasanna@study.iitm.ac.in | @iamprasna Teaching assistants (who help you with your doubts) Jivraj Singh, 22f3002542@ds.study.iitm.ac.in | @Jivraj | LinkedIn Profile Suchintika Sarkar, 21f3002441@ds.study.iitm.ac.in | @21f3002441 Hritik Roshan Maurya, 22f3002460@ds.study.iitm.ac.in | @HritikRoshan_HRM Saransh Saini, 22f1001123@ds.study.iitm.ac.in | @Saransh_Saini | LinkedIn Profile Virtual TA ( GPT Instructions ) Their job is to help you. Trouble them for your slightest doubts! Course Links TDS: Discourse - Ask questions, get help, and discuss with your peers. IITM BS Degree Programme - Student Handbook TDS: Public course page TDS: Course files \u2013 Jupyter notebooks, datasets, etc. May 2025 Links Grading Document - May 2025 TDS: Course page - May 2025 \u2013 for students to access course content. TDS: Announcement group - May 2025 TDS: Live Sessions Past Course Content TDS: Course Content - Jan 2025 TDS: Live Sessions - Jan 2025 \u2013 YouTube playlist TDS: Course calendar - Jan 2025 Grading Document - Jan 2025 . Next 1. Development Tools"
  },
  {
    "title": "Version Control: Git, GitHub",
    "original_url": "https://tds.s-anand.net/#/git",
    "downloaded_at": "2025-06-12T02:45:59.627160",
    "content": "Version Control: Git, GitHub Git is the de facto standard for version control of software (and sometimes, data as well). It\u2019s a system that keeps track of changes you make to files and folders. It allows you to revert to a previous state, compare changes, etc. It\u2019s a central tool in any developer\u2019s workflow. GitHub is the most popular hosting service for Git repositories. It\u2019s a website that shows your code, allows you to collaborate with others, and provides many useful tools for developers. Watch these introductory videos to learn the basics of Git and GitHub (98 min): Essential Git Commands: Best Practices: Commit Messages Branching Strategy main: Production code develop: Integration branch feature/*: New features hotfix/*: Emergency fixes Code Review Keep PRs small (<400 lines) Use draft PRs for WIP Review your own code first Respond to all comments Essential Tools GitHub Desktop : GUI client GitLens : VS Code extension gh : GitHub CLI pre-commit : Git hooks Previous Database: SQLite Next 2. Deployment Tools"
  },
  {
    "title": "LLM Speech",
    "original_url": "https://tds.s-anand.net/#/llm-speech",
    "downloaded_at": "2025-06-12T02:46:00.746304",
    "content": "OpenAI TTS-1 for Text-to-Speech Generation OpenAI\u2019s Text-to-Speech API (TTS-1) converts text into natural-sounding speech using state-of-the-art neural models. Released in March 2025, it offers multiple voices and control over speaking style and speed. Simple speech generation To generate speech from text, send a POST request to the speech endpoint: Generation options Control the output with these parameters: : (standard) or (higher quality) : Text to convert (max 4096 characters) : , , , , , or : (default), , , or : 0.25 to 4.0 (default 1.0) Costs and optimization Pricing per 1,000 characters: : $0.015 : $0.030 To optimize costs: Use for drafts, for final versions Batch process text in chunks Cache frequently used phrases Choose lower quality formats for testing Google Gemini Speech Studio for Text-to-Speech Google\u2019s Gemini Speech Studio offers advanced text-to-speech capabilities with support for multiple languages, voices, and speaking styles. For this, you need a . You can: Go to the Google Cloud Console: https://console.cloud.google.com/apis/library/texttospeech.googleapis.com , select or create the project you want and click Enable . Create an API key . In the Console, navigate to APIs & Services \u2192 Credentials and click + Create Credentials \u2192 API key . Copy the generated key (it\u2019ll look like ). Simple speech generation Generate speech using the Gemini API: Generation options Customize synthesis with these parameters: : : Language code (e.g., \u201cen-US\u201d, \u201ces-ES\u201d) : Voice model name : \u201cNEUTRAL\u201d, \u201cMALE\u201d, or \u201cFEMALE\u201d : : \u201cMP3\u201d, \u201cWAV\u201d, \u201cOGG_OPUS\u201d : 0.25 to 4.0 : -20.0 to 20.0 : Volume adjustment SSML support Both APIs support Speech Synthesis Markup Language (SSML) for fine-grained control: Costs and optimization Pricing (per character): Standard voices: $0.000004 Neural voices: $0.000016 Neural2 voices: $0.000024 To optimize: Use standard voices for development Cache common phrases Batch process where possible Choose appropriate audio quality Python implementation Here\u2019s a simple Python wrapper for both APIs: Previous LLM Image Generation Next LLM Evals"
  },
  {
    "title": "Wikipedia Data with Python",
    "original_url": "https://tds.s-anand.net/#/wikipedia-data-with-python",
    "downloaded_at": "2025-06-12T02:46:01.855931",
    "content": "Wikipedia Data with Python You\u2019ll learn how to scrape data from Wikipedia using the Python library, covering: Installing and Importing : Use pip install to get the Wikipedia library and import it with import wikipedia as wk. Keyword Search : Use the search function to find Wikipedia pages containing a specific keyword, limiting results with the results argument. Fetching Summaries : Use the summary function to get a concise summary of a Wikipedia page, limiting sentences with the sentences argument. Retrieving Full Pages : Use the page function to obtain the full content of a Wikipedia page, including sections and references. Accessing URLs : Retrieve the URL of a Wikipedia page using the url attribute of the page object. Extracting References : Use the references attribute to get all reference links from a Wikipedia page. Fetching Images : Access all images on a Wikipedia page via the images attribute, which returns a list of image URLs. Extracting Tables : Use the pandas.read_html function to extract tables from the HTML content of a Wikipedia page, being mindful of table indices. Here are links and references: Wikipedia Library - Notebook Learn about the package NOTE : Wikipedia is constantly edited. The page may be different now from when the video was recorded. Handle accordingly. Previous Nominatim API with Python Next Scraping PDFs with Tabula"
  },
  {
    "title": "Scraping PDFs with Tabula",
    "original_url": "https://tds.s-anand.net/#/scraping-pdfs-with-tabula",
    "downloaded_at": "2025-06-12T02:46:02.937710",
    "content": "Scraping PDFs with Tabula You\u2019ll learn how to scrape tables from PDFs using the Python library, covering: Import Libraries : Use Beautiful Soup for URL parsing and Tabula for extracting tables from PDFs. Specify Save Location : Mount Google Drive to save scraped PDFs. Identify PDF URLs : Parse the given URL to identify and select all PDF links. Download PDFs : Loop through identified links, saving each PDF to the specified location. Extract Tables : Use Tabula to read tabular content from the downloaded PDFs. Control Extraction Area : Specify page and area coordinates to accurately extract tables, avoiding extraneous text. Save Extracted Data : Convert the extracted table data into structured formats like CSV for further analysis. Here are links and references: PDF Scraping - Notebook Learn about the package Learn about the package . Video Previous Wikipedia Data with Python Next Convert PDFs to Markdown"
  },
  {
    "title": "Topic modeling",
    "original_url": "https://tds.s-anand.net/#/topic-modeling",
    "downloaded_at": "2025-06-12T02:46:04.023297",
    "content": "Topic Modeling You\u2019ll learn to use text embeddings to find text similarity and use that to create topics automatically from text, covering: Embeddings : How large language models convert text into numerical representations. Similarity Measurement : Understanding how similar embeddings indicate similar meanings. Embedding Visualization : Using tools like Tensorflow Projector to visualize embedding spaces. Embedding Applications : Using embeddings for tasks like classification and clustering. OpenAI Embeddings : Using OpenAI\u2019s API to generate embeddings for text. Model Comparison : Exploring different embedding models and their strengths and weaknesses. Cosine Similarity : Calculating cosine similarity between embeddings for more reliable similarity measures. Embedding Cost : Understanding the cost of generating embeddings using OpenAI\u2019s API. Embedding Range : Understanding the range of values in embeddings and their significance. Here are the links used in the video: Jupyter Notebook Tensorflow projector Embeddings guide Embeddings reference Clustering on scikit-learn Massive text embedding leaderboard (MTEB) embedding model Embeddings similarity threshold Previous Multimodal Embeddings Next Vector databases"
  },
  {
    "title": "RAG with the CLI)",
    "original_url": "https://tds.s-anand.net/#/rag-cli",
    "downloaded_at": "2025-06-12T02:46:05.107776",
    "content": "Retrieval Augmented Generation (RAG) with the CLI Retrieval Augmented Generation (RAG) combines retrieval (searching a knowledge base) with generation (using an LLM) to produce answers grounded in your own documents. Instead of relying solely on a general-purpose LLM, RAG lets you feed it the most relevant chunks from your corpus at query time, improving accuracy, reducing hallucinations, and allowing you to answer domain\u2011specific questions without fine\u2011tuning. In particular, you can answer questions that are hard to answer with a keyword search. For example: You can implement RAG entirely from your terminal, without writing a single line of application code. Below is a step\u2011by\u2011step example using the TypeScript book as a data source. 1. Clone the repository fetches only the latest commit to minimize download size. moves into the project folder. You\u2019ll now be in a new folder containing the repo. 2. Split Markdown files into chunks : lets match Markdown files in all subdirectories. bash shopt manual : a tool that splits Markdown into LLM\u2011sized chunks: : uses GPT\u20114o token limits : max tokens per chunk : custom split marker : ensures the very first chunk starts with the separator (GNU sed manual) : uses jq to convert chunks to JSON : read raw input : slurp entire input into a single string : compact JSON output builds an array of objects , where is : writes the resulting JSON array to while printing it to stdout. You\u2019ll now have a that has one JSON object per line. 3. Generate embeddings : computes embeddings for each entry in . : a namespace or collection name for storage. : selects the embedding model. : save embeddings in the default backend. : input is newline\u2011delimited JSON. llm CLI embed-multi This stores the embeddings in a collection called . 4. Find similar topics This returns the 3 chunksmost similar to the question posed. : retrieves the top most similar chunks from the embeddings store. : return three results. : the user\u2019s query string. 5. Answer a question using retrieved context This answers the question in natural language following these steps: Store the query in . Retrieve the top 3 matching chunks. extracts just the text snippets. Pipe into , instructing the model: : stream a prompt directly to the LLM. : ensures the response is grounded. formats the streamed LLM output for easy reading. Previous Vector databases Next Hybrid RAG with TypeSense"
  },
  {
    "title": "Web Automation with Playwright",
    "original_url": "https://tds.s-anand.net/#/web-automation-with-playwright",
    "downloaded_at": "2025-06-12T02:46:06.210392",
    "content": "Web Scraping with Playwright in Python Scrape JavaScript\u2011heavy sites effortlessly with Playwright. ( youtube.com ) Playwright offers: JavaScript rendering : Executes page scripts so you scrape only after content appears. ( playwright.dev ) Headless & headed modes : Run without UI or in a real browser for debugging. ( playwright.dev ) Auto\u2011waiting & retry : Built\u2011in locators reduce flakiness. ( playwright.dev ) Multi\u2011browser support : Chromium, Firefox, WebKit\u2014all from one API. ( playwright.dev ) Example: Scraping a JS\u2011Rendered Site We\u2019ll scrape Quotes to Scrape (JS) \u2014a site that loads quotes via JavaScript, so a simple call gets only an empty shell ( quotes.toscrape.com ). Playwright runs the scripts and gives us the real content: Save as and run: You\u2019ll see each quote plus author printed\u2014fetched only after the JS executes. Previous LLM Video Screen-Scraping Next Scheduled Scraping with GitHub Actions"
  },
  {
    "title": "Python tools: uv",
    "original_url": "https://tds.s-anand.net/#/uv",
    "downloaded_at": "2025-06-12T02:46:07.353186",
    "content": "Python tools: uv Install uv . is a fast Python package and project manager that\u2019s becoming the standard for running Python scripts. It replaces tools like pip, conda, pipx, poetry, pyenv, twine, and virtualenv into one, enabling: Python Version Management : uv installs and manages multiple Python versions, allowing developers to specify and switch between versions seamlessly. Virtual Environment Handling : It automates the creation and management of virtual environments, ensuring isolated and consistent development spaces for different projects. Dependency Management : With support for the pyproject.toml format, uv enables precise specification of project dependencies. It maintains a universal lockfile, uv.lock, to ensure reproducible installations across different systems. Project Execution : The command allows for the execution of scripts and applications within the managed environment, streamlining development workflows. Here are some commonly used commands: Here are some useful tools you can run with without installation: uv uses inline script metadata for dependencies.\nThe eliminates the need for or virtual environments. For example: Previous AI Code Editors: GitHub Copilot Next JavaScript tools: npx"
  },
  {
    "title": "Serverless hosting: Vercel",
    "original_url": "https://tds.s-anand.net/#/vercel",
    "downloaded_at": "2025-06-12T02:46:08.540425",
    "content": "Serverless hosting: Vercel Serverless platforms let you rent a single function instead of an entire machine. They\u2019re perfect for small web tools that don\u2019t need to run all the time . Here are some common real-life uses: A contact form that emails you when someone wants to hire you (runs for 2-3 seconds, a few times per day) A tool that converts uploaded photos to black and white (runs for 5-10 seconds when someone uploads a photo) A chatbot that answers basic questions about your business hours (runs for 1-2 seconds per question) A newsletter sign-up that adds emails to your mailing list (runs for 1 second per sign-up) A webhook that posts your Etsy sales to Discord (runs for 1 second whenever you make a sale) You only pay when someone uses your tool, and the platform automatically handles busy periods. For example, if 100 people fill out your contact form at once, the platform creates 100 temporary copies of your code to handle them all. When they\u2019re done, these copies disappear. It\u2019s cheaper than running a full-time server because you\u2019re not paying for the time when no one is using your tool - most tools are idle 95% of the time! Rather than writing a full program, serverless platforms let you write functions. These functions are called via HTTP requests. They run in a cloud environment and are scaled up and down automatically. But this means you write programs in a different style. For example: You can\u2019t packages - you have to use You can\u2019t read or write files from the file system - you can only use APIs. You can\u2019t run commands (e.g. ) Vercel is a cloud platform optimized for frontend frameworks and serverless functions. Vercel is tightly integrated with GitHub. Pushing to your repository automatically triggers new deployments. Here\u2019s a quickstart . Sign-up with Vercel . Create an empty repo with this file. To deploy a FastAPI app, add a file with as a dependency. Add your FastAPI code to a file, e.g. . Add a file to the root of your repository. On the command line, run: to deploy a test version to deploy to production Environment Variables . Use to add environment variables. In your code, use to access them. Videos Previous Notebooks: Google Colab Next CI/CD: GitHub Actions"
  },
  {
    "title": "Static hosting: GitHub Pages",
    "original_url": "https://tds.s-anand.net/#/github-pages",
    "downloaded_at": "2025-06-12T02:46:09.690901",
    "content": "Static hosting: GitHub Pages GitHub Pages is a free hosting service that turns your GitHub repository directly into a static website whenever you push it. This is useful for sharing analysis results, data science portfolios, project documentation, and more. Common Operations: Best Practices: Keep it small Optimize images . Prefer SVG over WEBP over 8-bit PNG. Preload critical assets like stylesheets Avoid committing large files like datasets, videos, etc. directly. Explore Git LFS instead. Tools: GitHub Desktop : GUI for Git operations GitHub CLI : Command line interface GitHub Actions : Automation Previous Images: Compression Next Notebooks: Google Colab"
  },
  {
    "title": "Authentication: Google Auth",
    "original_url": "https://tds.s-anand.net/#/google-auth",
    "downloaded_at": "2025-06-12T02:46:10.850726",
    "content": "Google Authentication with FastAPI Secure your API endpoints using Google ID tokens to restrict access to specific email addresses. Google Auth is the most commonly implemented single sign-on mechanism because: It\u2019s popular and user-friendly. Users can log in with their existing Google accounts. It\u2019s secure: Google supports OAuth2 and OpenID Connect to handle authentication. Here\u2019s how you build a FastAPI app that identifies the user. Go to the Google Cloud Console \u2013 Credentials and click Create Credentials > OAuth client ID . Choose Web application , set your authorized redirect URIs (e.g., ). Copy the Client ID and Client Secret into a file: Create your FastAPI : Now, run . When you visit http://localhost:8000/ you\u2019ll be redirected to a Google login page. When you log in, you\u2019ll be redirected back to http://localhost:8000/ Now you\u2019ll see the email ID you logged in with. Instead of displaying the email, you can show different content based on the user. For example: Allow access to specfic users and not others Fetch the user\u2019s personalized information Display different content based on the user Previous Web Framework: FastAPI Next Local LLMs: Ollama"
  },
  {
    "title": "Data Analysis with SQL",
    "original_url": "https://tds.s-anand.net/#/data-analysis-with-sql",
    "downloaded_at": "2025-06-12T02:46:12.042053",
    "content": "Data Analysis with SQL You\u2019ll learn how to perform data analysis using SQL (via Python), covering: Database Connection : How to connect to a MySQL database using SQLAlchemy and Pandas. SQL Queries : Execute SQL queries directly from a Python environment to retrieve and analyze data. Counting Rows : Use SQL to count the number of rows in a table. User Activity Analysis : Query and identify top users by post count. Post Concentration : Determine if a small percentage of users contribute the majority of posts using SQL aggregation. Correlation Calculation : Calculate the Pearson correlation coefficient between user attributes such as age and reputation. Regression Analysis : Compute the regression slope to understand the relationship between views and reputation. Handling Large Data : Perform calculations on large datasets by fetching aggregated values from the database rather than entire datasets. Statistical Analysis in SQL : Use SQL as a tool for statistical analysis, demonstrating its power beyond simple data retrieval. Leveraging AI : Use ChatGPT to generate SQL queries and Python code, enhancing productivity and accuracy. Here are the links used in the video: Data analysis with databases - Notebook SQLZoo has simple interactive tutorials to learn SQL Stats database that has an anonymized dump of stats.stackexchange.com Pandas SQLAlchemy docs Previous Data Analysis with Python Next Data Analysis with Datasette"
  },
  {
    "title": "REST APIs",
    "original_url": "https://tds.s-anand.net/#/rest-apis",
    "downloaded_at": "2025-06-12T02:46:13.174723",
    "content": "REST APIs REST (Representational State Transfer) APIs are the standard way to build web services that allow different systems to communicate over HTTP. They use standard HTTP methods and JSON for data exchange. Watch this comprehensive introduction to REST APIs (52 min): Key Concepts: HTTP Methods : Retrieve data : Create new data : Update existing data : Remove data Status Codes : Success (200 OK, 201 Created) : Client errors (400 Bad Request, 404 Not Found) : Server errors (500 Internal Server Error) Here\u2019s a minimal REST API using FastAPI. Run this script via : Test the API with curl: Best Practices: Use Nouns for Resources Good: , Bad: , Version Your API Handle Errors Consistently Use Query Parameters for Filtering Implement Pagination Tools: Postman : API testing and documentation Swagger/OpenAPI : API documentation HTTPie : Modern command-line HTTP client JSON Schema : API request/response validation Learn more about REST APIs: REST API Design Best Practices Microsoft REST API Guidelines Google API Design Guide Previous CORS Next Web Framework: FastAPI"
  },
  {
    "title": "Transforming Images",
    "original_url": "https://tds.s-anand.net/#/transforming-images",
    "downloaded_at": "2025-06-12T02:46:14.304458",
    "content": "Transforming Images Image Processing with PIL (Pillow) Pillow is Python\u2019s leading library for image processing, offering powerful tools for editing, analyzing, and generating images. It handles various formats (PNG, JPEG, GIF, etc.) and provides operations from basic resizing to complex filters. Here\u2019s a minimal example showing common operations: Key features and techniques you\u2019ll learn: Image Loading and Saving : Handle various formats with automatic conversion Basic Operations : Resize, rotate, crop, and flip images Color Manipulation : Adjust brightness, contrast, and color balance Filters and Effects : Apply blur, sharpen, and other visual effects Drawing : Add text, shapes, and overlays to images Batch Processing : Handle multiple images efficiently Memory Management : Process large images without memory issues Basic Image Operations Common operations for resizing, cropping, and rotating images: Color and Enhancement Adjust image appearance with built-in enhancement tools: Filters and Effects Apply visual effects and filters to images: Drawing and Text Add text, shapes, and overlays to images: Memory-Efficient Processing Handle large images without loading them entirely into memory: Practice with these resources: Pillow Documentation : Complete API reference Python Image Processing Tutorial : In-depth guide Sample Images Dataset : Test images for practice Watch these tutorials for hands-on demonstrations: Image Processing with ImageMagick ImageMagick is a powerful command-line tool for image manipulation, offering features beyond what\u2019s possible with Python libraries. It\u2019s particularly useful for: Batch processing large image collections Complex image transformations High-quality format conversion Creating image thumbnails Adding text and watermarks Basic Operations: Common Data Science Tasks: Batch Processing: Advanced Features: Watch this ImageMagick tutorial (16 min): Tools: Fred\u2019s ImageMagick Scripts : Useful script collection ImageMagick Online Studio : Visual command builder Tips: Use to remove metadata and reduce file size Monitor memory usage with Use for format-specific options Process in parallel with Use to track progress Error Handling: For Python integration: Note: Always install ImageMagick before using the Wand Python binding. Previous Data Transformation with dbt Next Extracting Audio and Transcripts"
  },
  {
    "title": "CSS Selectors",
    "original_url": "https://tds.s-anand.net/#/css-selectors",
    "downloaded_at": "2025-06-12T02:46:15.432306",
    "content": "CSS Selectors CSS selectors are patterns used to select and style HTML elements on a web page. They are fundamental to web development and data scraping, allowing you to precisely target elements for styling or extraction. For data scientists, understanding CSS selectors is crucial when: Web scraping with tools like Beautiful Soup or Scrapy Selecting elements for browser automation with Selenium Styling data visualizations and web applications Debugging website issues using browser DevTools Watch this comprehensive introduction to CSS selectors (20 min): The Mozilla Developer Network (MDN) provides detailed documentation on the three main types of selectors: Basic CSS selectors : Learn about element ( ), class ( ), ID ( ), and universal ( ) selectors Attribute selectors : Target elements based on their attributes or attribute values ( ) Combinators : Use relationships between elements ( , , ) Practice your CSS selector skills with this interactive tool: CSS Diner : A fun game that teaches CSS selectors through increasingly challenging levels Previous Browser: DevTools Next JSON"
  },
  {
    "title": "LLM Evals",
    "original_url": "https://tds.s-anand.net/#/llm-evals",
    "downloaded_at": "2025-06-12T02:46:16.533214",
    "content": "LLM Evaluations with PromptFoo Test-drive your prompts and models with automated, reliable evaluations. PromptFoo is a test-driven development framework for LLMs: Developer-first : Fast CLI with live reload & caching ( promptfoo.dev ) Multi-provider : Works with OpenAI, Anthropic, HuggingFace, Ollama & more ( GitHub ) Assertions : Built\u2011in ( , ) & model\u2011graded ( ) ( docs ) CI/CD : Integrate evals into pipelines for regression safety ( CI/CD guide ) To run PromptFoo: Install Node.js & npm ( nodejs.org ) Set up your environment variable Configure . Below is an example: Now, you can run the evaluations and see the results. PromptFoo caches API responses by default (TTL 14 days). You can disable it with or clear it. Previous LLM Speech Next Project 1"
  },
  {
    "title": "Vision Models",
    "original_url": "https://tds.s-anand.net/#/vision-models",
    "downloaded_at": "2025-06-12T02:46:17.642120",
    "content": "Vision Models You\u2019ll learn how to use LLMs to interpret images and extract useful information, covering: Setting Up Vision Models : Integrate vision capabilities with LLMs using APIs like OpenAI\u2019s Chat Completion. Sending Image URLs for Analysis : Pass URLs or base64-encoded images to LLMs for processing. Reading Image Responses : Get detailed textual descriptions of images, from scenic landscapes to specific objects like cricketers or bank statements. Extracting Data from Images : Convert extracted image data to various formats like Markdown tables or JSON arrays. Handling Model Hallucinations : Address inaccuracies in extraction results, understanding how different prompts can affect output quality. Cost Management for Vision Models : Adjust detail settings (e.g., \u201cdetail: low\u201d) to balance cost and output precision. Here are the links used in the video: Jupyter Notebook OpenAI Chat API Reference OpenAI Vision Guide Sample images used Here is an example of how to analyze an image using the OpenAI API. Let\u2019s break down the request: : The API endpoint for text generation. : The content type of the request. : The API key for authentication. : The request body. : The model to use for text generation. : The messages to send to the model. : The role of the message. : The content of the message. : The text message. : The image message. : The detail level of the image. uses fewer tokens at lower detail. uses more tokens for higher detail. : The URL of the image. You can send images in a base64 encoded format , too. For example: Previous Base 64 Encoding Next Embeddings"
  },
  {
    "title": "Vision Models",
    "original_url": "https://tds.s-anand.net/#/base64-image",
    "downloaded_at": "2025-06-12T02:46:18.741829",
    "content": "404 - Not found"
  },
  {
    "title": "Hybrid RAG with TypeSense",
    "original_url": "https://tds.s-anand.net/#/hybrid-rag-typesense",
    "downloaded_at": "2025-06-12T02:46:19.833938",
    "content": "Hybrid Retrieval Augmented Generation (Hybrid RAG) with TypeSense Hybrid RAG combines semantic (vector) search with traditional keyword search to improve retrieval accuracy and relevance. By mixing exact text matches with embedding-based similarity, you get the best of both worlds: precision when keywords are present, and semantic recall when phrasing varies. TypeSense makes this easy with built-in hybrid search and automatic embedding generation. Below is a fully self-contained Hybrid RAG tutorial using TypeSense, Python, and the command line. Install and run TypeSense Install TypeSense . : spins up a containerized TypeSense server on port 8108 maps host port to container port. mounts a Docker volume for persistence. points TypeSense at that volume. secures your API. allows browser-based requests. Expected output: Docker logs showing TypeSense startup messages, such as . Listening on . Embed and import documents into TypeSense Follow the steps in the RAG with the CLI tutorial to create a that has one JSON object per line. TypeSense supports automatic embedding of documents . We\u2019ll use that capability. Save the following as and run it with . : an HTTP client for Python. Collection schema : and fields plus an field with auto-generated embeddings from OpenAI. Auto-embedding : the block instructs TypeSense to call the specified model for each document. : checks existence. : creates the collection. : bulk upsert documents, embedding them on the fly. Expected output: A JSON summary string like indicating how many docs were imported. (On timeouts, re-run until all chunks are processed.) 4. Run a hybrid search and answer a question Now, we can use a single against the Multi-Search endpoint to combine keyword and vector search as a hybrid search : : tells TypeSense to score by both keyword and vector similarity. : boosts exact text hits. : keeps responses lightweight. : posts the search request. : extracts each hit\u2019s . See jq manual and : generate and stream a grounded answer. Expected output: The raw matched snippets printed first. Then a concise, streamed LLM answer citing the note verbatim. Previous RAG with the CLI) Next Function Calling"
  },
  {
    "title": "Data Transformation with dbt",
    "original_url": "https://tds.s-anand.net/#/dbt",
    "downloaded_at": "2025-06-12T02:46:20.939390",
    "content": "Data Transformation with dbt You\u2019ll learn how to transform data using dbt (data build tool), covering: dbt Fundamentals : Understand what dbt is and how it brings software engineering practices to data transformation Project Setup : Learn how to initialize a dbt project, configure your warehouse connection, and structure your models Models and Materialization : Create your first dbt models and understand different materialization strategies (view, table, incremental) Testing and Documentation : Implement data quality tests and auto-generate documentation for your data models Jinja Templating : Use Jinja for dynamic SQL generation, making your transformations more maintainable and reusable References and Dependencies : Learn how to reference other models and manage model dependencies Sources and Seeds : Configure source data connections and manage static reference data Macros and Packages : Create reusable macros and leverage community packages to extend functionality Incremental Models : Optimize performance by only processing new or changed data Deployment and Orchestration : Set up dbt Cloud or integrate with Airflow for production deployment Here\u2019s a minimal dbt model example, : Tools and Resources: dbt Core - The open-source transformation tool dbt Cloud - Hosted platform for running dbt dbt Packages - Reusable modules from the community dbt Documentation - Comprehensive guides and references Jaffle Shop - Example dbt project for learning dbt Slack Community - Active community for support and discussions Watch this dbt Fundamentals Course (90 min): Previous Parsing JSON Next Transforming Images"
  },
  {
    "title": "Editor: VS Code",
    "original_url": "https://tds.s-anand.net/#/vscode",
    "downloaded_at": "2025-06-12T02:46:22.034625",
    "content": "Editor: VS Code Your editor is the most important tool in your arsenal. That\u2019s where you\u2019ll spend most of your time. Make sure you\u2019re comfortable with it. Visual Studio Code is, by far , the most popular code editor today. According to the 2024 StackOverflow Survey almost 75% of developers use it. We recommend you learn it well. Even if you use another editor, you\u2019ll be working with others who use it, and it\u2019s a good idea to have some exposure. Watch these introductory videos (35 min) from the Visual Studio Docs to get started: Getting Started : Set up and learn the basics of Visual Studio Code. (7 min) Code Editing : Learn how to edit and run code in VS Code. (3 min) Productivity Tips : Become a VS Code power user with these productivity tips. (4 min) Personalize : Personalize VS Code to make it yours with themes. (2 min) Extensions : Add features, themes, and more to VS Code with extensions! (4 min) Debugging : Get started with debugging in VS Code. (6 min) Version Control : Learn how to use Git version control in VS Code. (3 min) Customize : Learn how to customize your settings and keyboard shortcuts in VS Code. (6 min) Previous 1. Development Tools Next AI Code Editors: GitHub Copilot"
  },
  {
    "title": "Editor: VS Code",
    "original_url": "https://tds.s-anand.net/#/data-visualization-with-chatgpt",
    "downloaded_at": "2025-06-12T02:46:23.151708",
    "content": "404 - Not found"
  },
  {
    "title": "Network Analysis in Python",
    "original_url": "https://tds.s-anand.net/#/network-analysis-in-python",
    "downloaded_at": "2025-06-12T02:46:24.320975",
    "content": "Network Analysis in Python You\u2019ll learn how to use network analysis to identify clusters and connections between nodes in a dataset, covering: Network Construction : Build a network from the IMDB database, where nodes represent actors and edges represent shared movie appearances. Clustering : Apply clustering techniques to detect communities within the network, using scikit-learn\u2019s network library. Matrix Operations : Utilize matrix operations to efficiently analyze actor relationships and interactions. Community Detection : Implement algorithms to identify and interpret clusters, examining how different actor clusters are connected. Application of Findings : Explore practical applications of network analysis, such as social network analysis and its potential uses in various domains. Here are links used in the video: Jupyter Notebook Exploring the Movie Actor Network in Python Jupyter Notebook - Shortest Path Jupyter Notebook - Actor network IMDb Datasets Learn about the package Learn about the scipy.sparse matrices and video Introduction to Kumu Network analysis with Kumu Introduction to Systems and Network Mapping with Kumu Previous Geospatial Analysis with QGIS Next 7. Data Visualization"
  },
  {
    "title": "Notebooks: Google Colab",
    "original_url": "https://tds.s-anand.net/#/colab",
    "downloaded_at": "2025-06-12T02:46:25.533730",
    "content": "Notebooks: Google Colab Google Colab is a free, cloud-based Jupyter notebook environment that\u2019s become indispensable for data scientists and ML practitioners. It\u2019s particularly valuable because it provides free access to GPUs and TPUs, and for easy sharing of code and execution results. While Colab is excellent for prototyping and learning, its free tier has limitations - notebooks time out after 12 hours, and GPU access can be inconsistent. Learn how to mount Google Drive for persistent storage, manage dependencies with commands, as these are common pain points when getting started. Google Colab features you may have missed How to mount Google Drive to Google Colab How to take advantage of GPUs and TPUs for your ML project Previous Static hosting: GitHub Pages Next Serverless hosting: Vercel"
  },
  {
    "title": "Local LLMs: Ollama",
    "original_url": "https://tds.s-anand.net/#/ollama",
    "downloaded_at": "2025-06-12T02:46:26.810943",
    "content": "Local LLM Runner: Ollama is a command-line tool for running open-source large language models entirely on your own machine\u2014no API keys, no vendor lock-in, full control over models and performance. Basic Usage Download Ollama for macOS, Linux, or Windows and add the binary to your . See the full Docs \u2197 for installation details and troubleshooting. Key Features Model management : / \u2014 Install and switch among Llama 3.3, DeepSeek-R1, Gemma 3, Mistral, Phi-4, and more. Local inference : \u2014 Execute prompts entirely on-device for privacy and zero latency beyond hardware limits. Persistent server : \u2014 Expose a local REST API for multi-session chats and integration into scripts or apps. Version pinning : \u2014 Pin exact model versions for reproducible demos and experiments. Resource control : / \u2014 Tune CPU/GPU usage and maximum context window for performance and memory management. Real-World Use Cases Quick prototyping . Brainstorm slide decks or blog outlines offline, without worrying about API quotas: Data privacy . Summarize sensitive documents on-device, retaining full control of your data: CI/CD integration . Validate PR descriptions or test YAML configurations in your pipeline without incurring API costs: Local app embedding . Power a desktop or web app via the local REST API for instant LLM features: Read the full Ollama docs \u2197 for advanced topics like custom model hosting, GPU tuning, and integrating with your development workflows. Previous Authentication: Google Auth Next 3. Large Language Models"
  },
  {
    "title": "Markdown",
    "original_url": "https://tds.s-anand.net/#/markdown",
    "downloaded_at": "2025-06-12T02:46:28.142541",
    "content": "Documentation: Markdown Markdown is a lightweight markup language for creating formatted text using a plain-text editor. It\u2019s the standard for documentation in software projects and data science notebooks. Watch this introduction to Markdown (19 min): Common Markdown syntax: There is also a GitHub Flavored Markdown standard which is popular. This includes extensions like: Tools for working with Markdown: markdown2 : Python library to convert Markdown to HTML markdownlint : Linting Markdown All in One : VS Code extension pandoc : Convert between formats Previous 2. Deployment Tools Next Images: Compression"
  },
  {
    "title": "LLM Website Scraping",
    "original_url": "https://tds.s-anand.net/#/llm-website-scraping",
    "downloaded_at": "2025-06-12T02:46:29.352065",
    "content": "LLM Website Scraping Previous Convert HTML to Markdown Next LLM Video Screen-Scraping"
  },
  {
    "title": "Visualizing Forecasts with Excel",
    "original_url": "https://tds.s-anand.net/#/visualizing-forecasts-with-excel",
    "downloaded_at": "2025-06-12T02:46:30.500985",
    "content": "Visualizing Forecasts with Excel Excel File Previous 7. Data Visualization Next Visualizing Animated Data with PowerPoint"
  },
  {
    "title": "DevContainers: GitHub Codespaces",
    "original_url": "https://tds.s-anand.net/#/github-codespaces",
    "downloaded_at": "2025-06-12T02:46:31.615971",
    "content": "IDE: GitHub Codespaces GitHub Codespaces is a cloud-hosted development environment built right into GitHub that gets you coding faster with pre-configured containers, adjustable compute power, and seamless integration with workflows like Actions and Copilot. Why Codespaces helps Reproducible onboarding : Say goodbye to \u201cworks on my machine\u201d woes\u2014everyone uses the same setup for assignments or demos. Anywhere access : Jump back into your project from a laptop, tablet, or phone without having to reinstall anything. Rapid experimentation & debugging : Spin up short-lived environments on any branch, commit, or PR to isolate bugs or test features, or keep longer-lived codespaces for big projects. Quick Setup From the GitHub UI Go to your repo and click Code \u2192 Codespaces \u2192 New codespace . Pick the branch and machine specs (2\u201332 cores, 8\u201364 GB RAM), then click Create codespace . In Visual Studio Code Press (or on Mac), choose Codespaces: Create New Codespace , and follow the prompts. Via GitHub CLI Features To Explore Dev Containers : Set up your environment the same way every time using a or your own Dockerfile. Introduction to dev containers Prebuilds : Build bigger or more complex repos in advance so codespaces start up in a flash. About prebuilds Port Forwarding : Let Codespaces spot and forward the ports your web apps use automatically. Forward ports in Codespaces Secrets & Variables : Keep your environment variables safe in the Codespaces settings for your repo. Manage Codespaces secrets Dotfiles Integration : Bring in your dotfiles repo to customize shell settings, aliases, and tools in every codespace. Personalizing your codespaces Machine Types & Cost Control : Pick from VMs with 2 to 32 cores and track your usage in the billing dashboard. Managing Codespaces costs VS Code & CLI Integration : Flip between browser VS Code and your desktop editor, and script everything with the CLI. VS Code Remote: Codespaces GitHub Actions : Power up prebuilds and your CI/CD right inside codespaces using Actions workflows. Prebuilding your codespaces Copilot in Codespaces : Let Copilot help you write code with in-editor AI suggestions. Copilot in Codespaces Previous Containers: Docker, Podman Next Tunneling: ngrok"
  },
  {
    "title": "Visualizing Charts with Excel",
    "original_url": "https://tds.s-anand.net/#/visualizing-charts-with-excel",
    "downloaded_at": "2025-06-12T02:46:32.717222",
    "content": "Visualizing Charts with Excel Previous Visualizing Network Data with Kumu Next Data Visualization with Seaborn"
  },
  {
    "title": "TDS GPT Reviewer",
    "original_url": "https://tds.s-anand.net/#/tds-gpt-reviewer",
    "downloaded_at": "2025-06-12T02:46:33.833474",
    "content": "TDS GPT Reviewer After the later parts of this course\u2019s contents were written, we ran it through a Technical Content Reviewer GPT . Take a look at the GPT\u2019s instructions. These were generated by the OpenAI Prompt Generation tool. Content creation prompts In addition, here are a few prompts used to create the content: Video summaries . Transcribe the video via YouTube Transcript or Whisper. Then: Previous TDS TA Instructions Next LLM Sentiment Analysis"
  },
  {
    "title": "Visualizing Network Data with Kumu",
    "original_url": "https://tds.s-anand.net/#/visualizing-network-data-with-kumu",
    "downloaded_at": "2025-06-12T02:46:34.948135",
    "content": "Visualizing Network Data with Kumu Kumu IMDB data Jupyter Notebook Previous Visualizing Animated Data with Flourish Next Visualizing Charts with Excel"
  },
  {
    "title": "AI Code Editors: GitHub Copilot",
    "original_url": "https://tds.s-anand.net/#/github-copilot",
    "downloaded_at": "2025-06-12T02:46:36.056984",
    "content": "AI Editor: GitHub Copilot AI Code Editors like GitHub Copilot , Cursor , Windsurf , Roo Code , Cline , Continue.dev , etc. use LLMs to help you write code faster. Most are built on top of VS Code . These are now a standard tool in every developer\u2019s toolkit. GitHub Copilot is free (as of May 2025) for 2,000 completions and 50 chats. You should learn about: Code Suggestions , which is a basic feature. Using Chat , which lets you code in natural language. Changing the chat model . The free version includes Claude 3.5 Sonnet, a good coding model. Prompts to understand how people use AI code editors. Previous Editor: VS Code Next Python tools: uv"
  },
  {
    "title": "Unicode",
    "original_url": "https://tds.s-anand.net/#/unicode",
    "downloaded_at": "2025-06-12T02:46:37.162190",
    "content": "Unicode Ever noticed when you copy-paste some text and get garbage symbols? Or see garbage when you load a CSV file? This video explains why. It covers how computers store text (called character encoding) and why it sometimes goes wonky. Learn about ASCII (the original 7-bit encoding system that could only handle 128 characters), why that wasn\u2019t enough for global languages, and how modern solutions like Unicode save the day by letting us use any character from any language. Some programs try to guess encodings (sometimes badly!). A signature called BOM (Byte Order Mark)helps computers know exactly how to read text files correctly. Learn how Unicode, UTF-8 and character encoding works. This is a common gotcha when building apps that handle international text - something bootcamps often skip but developers and data scientists regularly face in the real world. Unicode is fundamental for data scientists working with international data. Here are key concepts you need to understand: Character Encodings : Different ways to represent text in computers ASCII (7-bit): Limited to 128 characters, English-only UTF-8: Variable-width encoding, backwards compatible with ASCII UTF-16: Fixed-width encoding, used in Windows and Java UTF-32: Fixed-width encoding, memory inefficient but simple Common encoding issues you\u2019ll encounter: Previous JavaScript tools: npx Next Browser: DevTools"
  },
  {
    "title": "Data Preparation in the Editor",
    "original_url": "https://tds.s-anand.net/#/data-preparation-in-the-editor",
    "downloaded_at": "2025-06-12T02:46:38.295123",
    "content": "Data Preparation in the Editor You\u2019ll learn how to use a text editor Visual Studio Code to process and clean data, covering: Format JSON files Find all and multiple cursors to extract specific fields Sort lines Delete duplicate lines Replace text with multiple cursors Here are the links used in the video: City-wise product sales JSON Previous Data Preparation in the Shell Next Cleaning Data with OpenRefine"
  },
  {
    "title": "Web Framework: FastAPI",
    "original_url": "https://tds.s-anand.net/#/fastapi",
    "downloaded_at": "2025-06-12T02:46:39.475507",
    "content": "Web Framework: FastAPI FastAPI is a modern Python web framework for building APIs with automatic interactive documentation. It\u2019s fast, easy to use, and designed for building production-ready REST APIs. Here\u2019s a minimal FastAPI app, : Run this with . Handle errors by raising HTTPException Use middleware for logging Tools: FastAPI CLI : Project scaffolding Pydantic : Data validation SQLModel : SQL databases FastAPI Users : Authentication Watch this FastAPI Course for Beginners (64 min): Previous REST APIs Next Authentication: Google Auth"
  },
  {
    "title": "Geospatial Analysis with Excel",
    "original_url": "https://tds.s-anand.net/#/geospatial-analysis-with-excel",
    "downloaded_at": "2025-06-12T02:46:40.669771",
    "content": "Geospatial Analysis with Excel You\u2019ll learn how to create a data-driven story about coffee shop coverage in Manhattan, covering: Data Collection : Collect and scrape data for coffee shop locations and census population from various sources. Data Processing : Use Python libraries like geopandas for merging population data with geographic maps. Map Creation : Generate coverage maps using tools like QGIS and Excel to visualize coffee shop distribution and population impact. Visualization : Create physical, Power BI, and video visualizations to present the data effectively. Storytelling : Craft a narrative around coffee shop competition, including strategic insights and potential market changes. Here are links that explain how the video was made: The Making of the Manhattan Coffee Kings Shaping and merging maps Visualizing data on 3D maps Physical and digital 3D maps Previous Data Analysis with ChatGPT Next Geospatial Analysis with Python"
  },
  {
    "title": "CORS",
    "original_url": "https://tds.s-anand.net/#/cors",
    "downloaded_at": "2025-06-12T02:46:41.851032",
    "content": "CORS: Cross-Origin Resource Sharing CORS (Cross-Origin Resource Sharing) is a security mechanism that controls how web browsers handle requests between different origins (domains, protocols, or ports). Data scientists need CORS for APIs serving data or analysis to a browser on a different domain. Watch this practical explanation of CORS (3 min): Key CORS concepts: Same-Origin Policy : Browsers block requests between different origins by default CORS Headers : Server responses must include specific headers to allow cross-origin requests Preflight Requests : Browsers send OPTIONS requests to check if the actual request is allowed Credentials : Special handling required for requests with cookies or authentication If you\u2019re exposing your API with a GET request publicly, the only thing you need to do is set the HTTP header . Here are other common CORS headers: To implement CORS in FastAPI, use the middleware : Testing CORS with JavaScript: Useful CORS debugging tools: CORS Checker : Test CORS configurations Browser DevTools Network tab: Inspect CORS headers and preflight requests cors-anywhere : CORS proxy for development Common CORS errors and solutions: : Configure server to send proper CORS headers : Add required headers to : Set both and : Cannot use with credentials; specify exact origins Previous Tunneling: ngrok Next REST APIs"
  },
  {
    "title": "Scraping with Google Sheets",
    "original_url": "https://tds.s-anand.net/#/scraping-with-google-sheets",
    "downloaded_at": "2025-06-12T02:46:43.014845",
    "content": "Scraping with Google Sheets You\u2019ll learn how to import tables on the web using Google Sheets\u2019s formula , covering: Import HTML Formula : Use =IMPORTHTML(URL, \u201cquery\u201d, index) to fetch tables or lists from a web page. Granting Access : Allow access for formulas to fetch data from external sources. Checking Imported Data : Verify if the imported table matches the data on the web page. Handling Errors : Understand common issues and how to resolve them. Sorting Data : Copy imported data as values and sort it within Google Sheets. Freezing Rows : Use frozen rows to maintain headers while sorting. Live Formulas : Learn how web data updates automatically when the source changes. Other Import Functions : IMPORTXML, IMPORTFEED, IMPORTRANGE, and IMPORTDATA for advanced data fetching options. Here are links used in the video: Google sheet used in the video Demographics of India List of highest grossing Indian films Previous Scraping with Excel Next Crawling with the CLI"
  },
  {
    "title": "Parsing JSON",
    "original_url": "https://tds.s-anand.net/#/parsing-json",
    "downloaded_at": "2025-06-12T02:46:44.120202",
    "content": "Parsing JSON JSON is everywhere\u2014APIs, logs, configuration files\u2014and its nested or large structure can challenge memory and processing. In this tutorial, we\u2019ll explore tools to flatten, stream, and query JSON data efficiently. For example, we\u2019ll often need to process a multi-gigabyte log file from a web service where each record is a JSON object. This requires us to handle complex nested structures, large files that don\u2019t fit in memory, or extract specific fields. Here are the key tools and techniques for efficient JSON parsing: Tool Extract from JSON\u2026 Why jq JSON in the shell Quick data exploration and pipeline processing JMESPath JSON in Python Handle complex queries with a clean syntax ijson JSON streams in Python Parse streaming/large JSON files memory-efficiently Pandas JSON columns in Python Fast analysis of structured data SQL JSON JSON in databases Combine structured and semi-structured data DuckDB JSON anywhere Fast analysis of JSON files / databases without loading to memory Examples: Use Pandas when you need to transform API responses into a DataFrame for further analysis. Leverage ijson when dealing with huge JSON logs where memory is at a premium. Apply jq for quick, iterative exploration directly in your terminal. Practice with these resources: JSONPath Online Evaluator : Test JSON queries jq play : Interactive jq query testing DuckDB JSON Tutorial : Learn DuckDB JSON functions Command-line JSON Processing with jq jq is a versatile command-line tool for slicing, filtering, and transforming JSON. It excels in quick data exploration and can be integrated into shell scripts for automated data pipelines. Example: Sifting through server logs in JSON Lines format to extract error messages or aggregate metrics without launching a full-scale ETL process. JMESPath Queries JMESPath offers a declarative query language to extract and transform data from nested JSON structures without needing verbose code. It\u2019s a neat alternative when you want to quickly pull out specific values or filter collections based on conditions. Example: Extracting user emails or filtering out inactive records from a complex JSON payload received from a cloud service. Streaming with ijson Loading huge JSON files all at once can quickly exhaust system memory. ijson lets you stream and process JSON incrementally. This method is ideal when your JSON file is too large or when you only need to work with part of the data. Example: Processing a continuous feed from an API that returns a large JSON array, such as sensor data or event logs, while filtering on the fly. Pandas JSON Columns Pandas makes it easy to work with tabular data that includes JSON strings. When you receive API data where one column holds nested JSON, flattening these structures lets you analyze and visualize the data using familiar DataFrame operations. Example: Flattening customer records stored as nested JSON in a CSV file to extract demographic details and spending patterns. SQL JSON Functions SQL supports built-in JSON functions allow you to query and manipulate JSON stored within relational databases.\nThese are implemented by most popular databases, including SQLite , PostgreSQL , and MySQL .\nThis is especially handy when you have a hybrid data model, combining structured tables with semi-structured JSON columns. Example: An application that stores user settings or application logs as JSON in a SQLite database, enabling quick lookups and modifications without external JSON parsing libraries. DuckDB JSON Processing DuckDB shines when analyzing JSON/JSONL files directly, making it a powerful tool for data analytics without the overhead of loading entire datasets into memory. Its SQL-like syntax simplifies exploratory analysis on nested data. Example: Performing ad-hoc analytics on streaming JSON logs from a web service, such as calculating average response times or aggregating user behavior metrics. Previous Profiling Data with Python Next Data Transformation with dbt"
  },
  {
    "title": "Correlation with Excel",
    "original_url": "https://tds.s-anand.net/#/correlation-with-excel",
    "downloaded_at": "2025-06-12T02:46:45.269760",
    "content": "Correlation with Excel You\u2019ll learn to calculate and interpret correlations using Excel, covering: Enabling the Data Analysis Tool Pack : Steps to enable the Excel data analysis tool pack. Correlation Analysis : Understanding statistical association between variables. Creating a Correlation Matrix : Steps to generate and interpret a correlation matrix. Scatterplots and Trendlines : Plotting data and adding trend lines to visualize correlations. Analyzing Results : Comparing correlation coefficients and understanding their implications. Insights and Further Analysis : Interpreting scatterplots and planning further analysis for deeper insights. Here are the links used in the video: Understand correlation COVID-19 vaccinations data explorer - Website COVID-19 vaccinations - Correlations Excel file Previous 6. Data Analysis Next Regression with Excel"
  },
  {
    "title": "Correlation with Excel",
    "original_url": "https://tds.s-anand.net/#/data-analysis-with-datasette",
    "downloaded_at": "2025-06-12T02:46:46.385319",
    "content": "404 - Not found"
  },
  {
    "title": "RAWgraphs",
    "original_url": "https://tds.s-anand.net/#/rawgraphs",
    "downloaded_at": "2025-06-12T02:46:47.490966",
    "content": "RAWgraphs RAWgraphs How to make Alluvial Diagram How to make Sankey Diagram How to make Beeswarm Plot How to make Bump Chart How to make Circle Packing How to make Treemap How to make Streamgraph How to make Sunburst Diagram How to make Voronoi Diagram How to make Hexagonal Binning Previous Actor Network Visualization Next Data Storytelling"
  },
  {
    "title": "AI Terminal Tools: llm",
    "original_url": "https://tds.s-anand.net/#/llm",
    "downloaded_at": "2025-06-12T02:46:48.628399",
    "content": "LLM CLI: llm is a command-line utility for interacting with large language models\u2014simplifying prompts, managing models and plugins, logging every conversation, and extracting structured data for pipelines. Basic Usage Install llm . Then set up your environment variable. See Getting started . TDS Students : See Large Language Models for instructions on how to get and use . Or use llm without installation using : Key Features Interactive prompts : \u2014 Fast shell access to any LLM. Conversational flow : \u2014 Continue context across prompts. Model switching : \u2014 Use OpenAI, Anthropic, local models, and more. Structured output : \u2014 Produce JSON for automation. Logging & history : \u2014 Persist every prompt/response in SQLite. Web UI : \u2014 Browse your entire history with Datasette. Persistent chat : \u2014 Keep the model in memory across multiple interactions. Plugin ecosystem : \u2014 Add support for new models, data sources, or workflows. ( Language models on the command-line - Simon Willison\u2019s Weblog ) Practical Uses Automated coding . Generate code scaffolding, review helpers, or utilities on demand. For example, after running , run . Inspired by Simon\u2019s post on using LLMs for rapid tool building . Transcript processing . Summarize YouTube or podcast transcripts using Gemini. See Putting Gemini 2.5 Pro through its paces . Commit messages . Turn diffs into descriptive commit messages, e.g. . \\ Data extraction . Convert free-text into structured JSON for automation. Structured data extraction from unstructured content using LLM schemas . Previous Terminal: Bash Next Spreadsheet: Excel, Google Sheets"
  },
  {
    "title": "LLM Image Generation",
    "original_url": "https://tds.s-anand.net/#/llm-image-generation",
    "downloaded_at": "2025-06-12T02:46:49.780636",
    "content": "Gemini Flash Experimental Image Generation and Editing APIs In March 2025, Google introduced native image generation and editing capabilities in the Gemini 2.0 Flash Experimental model. You can now generate and iteratively edit images via a single REST endpoint ( Experiment with Gemini 2.0 Flash native image generation , Generate images | Gemini API | Google AI for Developers ). ( How to use Latest Gemini 2.0 Native Image Generation with API? ) Simple image generation To generate a basic image, send a POST request to the method: Replace with your key. ( Gemini API | Google AI for Developers ) Generation options You can tweak the output with these parameters: : Modalities to return ( , ). (0.0\u20132.0): Controls randomness (default 1.0). (0.0\u20131.0): Nucleus sampling threshold. : Token selection cutoff. : Max tokens for text parts. : Sequences to end generation. : For reproducibility. Image Generation Docs Simple image editing To edit an existing image, include it in the as (base64-encoded): Image Editing Docs Editing options Editing requests support: : Embed raw image bytes. : Reference public URLs. All options listed above. : Per-request safety rules. Multi-turn edits by repeating in conversation history. Costs and optimization Gemini 2.0 Flash Experimental uses token-based billing: Input (text/image/video): free tier, then $0.10 per 1M tokens. Output (text/image): free tier, then $0.40 per 1M tokens. Per-image flat cost for Pro models: ~$0.001315 /image ( Gemini Developer API Pricing | Gemini API | Google AI for Developers , Solved: Re: Outdated Gemini Pro image pricing? By tile, or\u2026 ). To optimize: Use smaller image sizes by setting . Cache or reuse prompts with . Lower or for fewer tokens. OpenAI gpt-image-1 Model for Image Generation and Editing OpenAI\u2019s GPT Image 1 ( ) is a state-of-the-art multimodal model released on April 23, 2025, for high-fidelity image creation and editing. Simple image generation Use the Image Generations endpoint: ( Generate Image | OpenAI API - Postman ) Generation options Adjust these JSON parameters: : (default). : Text description. : Number of images. : , , or . : (default) or . Simple image editing Use the Edits endpoint with an image and a mask: ( curl - What\u2019s the correct URL to test OpenAI API? - Stack Overflow ) Editing options Editing requests accept: : Original image (base64 or URL). : PNG mask for inpainting. : Instruction for the edit. , , as above. Optional field for attribution. Costs and optimization GPT Image 1 pricing (per 1M tokens): text input $5, image input $10, image output $40. Rough per-image costs: Low quality: ~$0.02 Medium quality: ~$0.07 High quality: ~$0.19 ( OpenAI\u2019s GPT-Image-1 API \u2014 Create Stunning Images for Your Apps! , Usage of gpt-image-1 is priced per token, with \u2026 - Hacker News ) To optimize: Choose smaller sizes ( ). Generate fewer images ( ). Use to reduce payload. Cache frequent prompts or images. Previous LLM Agents Next LLM Speech"
  },
  {
    "title": "Base 64 Encoding",
    "original_url": "https://tds.s-anand.net/#/base64-encoding",
    "downloaded_at": "2025-06-12T02:46:50.934607",
    "content": "Base 64 Encoding Base64 is a method to convert binary data into ASCII text. It\u2019s essential when you need to transmit binary data through text-only channels or embed binary content in text formats. Watch this quick explanation of how Base64 works (3 min): Here\u2019s how it works: It takes 3 bytes (24 bits) and converts them into 4 ASCII characters \u2026 using 64 characters: A-Z, a-z, 0-9, + and / (padding with to make the length a multiple of 4) There\u2019s a URL-safe variant of Base64 that replaces + and / with - and _ to avoid issues in URLs Base64 adds ~33% overhead (since every 3 bytes becomes 4 characters) Common Python operations with Base64: Data URIs allow embedding binary data directly in HTML/CSS. This reduces the number of HTTP requests and also works offline. But it increases the file size. For example, here\u2019s an SVG image embedded as a data URI: Base64 is used in many places: JSON: Encoding binary data in JSON payloads Email: MIME attachments encoding Auth: HTTP Basic Authentication headers JWT: Encoding tokens in web authentication SSL/TLS: PEM certificate format SAML: Encoding assertions in SSO Git: Encoding binary files in patches Tools for working with Base64: Base64 Decoder/Encoder for online encoding/decoding data: URI Generator converts files to Data URIs Previous LLM Text Extraction Next Vision Models"
  },
  {
    "title": "Browser: DevTools",
    "original_url": "https://tds.s-anand.net/#/devtools",
    "downloaded_at": "2025-06-12T02:46:52.046243",
    "content": "Browser: DevTools Chrome DevTools is the de facto standard for web development and data analysis in the browser.\nYou\u2019ll use this a lot when debugging and inspecting web pages. Here are the key features you\u2019ll use most: Elements Panel Inspect and modify HTML/CSS in real-time Copy CSS selectors for web scraping Debug layout issues with the Box Model Console Panel JavaScript REPL environment Log and debug data Common console methods: Network Panel Monitor API requests and responses Simulate slow connections Right-click on a request and select \u201cCopy as fetch\u201d to get the request. Essential Keyboard Shortcuts (Windows) / (Mac): Open DevTools : Select element to inspect : Clear console : Reference currently selected element : Query selector all (returns array) Videos from Chrome Developers (37 min total): Fun & powerful: Intro to Chrome DevTools (5 min) Different ways to open Chrome DevTools (5 min) Faster DevTools navigation with shortcuts and settings (3 min) How to log messages in the Console (6 min) How to speed up your workflow with Console shortcuts (6 min) HTML vs DOM? Let\u2019s debug them (5 min) Caching demystified: Inspect, clear, and disable caches (7 min) Console message logging (6 min) Console workflow shortcuts (6 min) HTML vs DOM debugging (5 min) Cache inspection and management (7 min) Previous Unicode Next CSS Selectors"
  },
  {
    "title": "Browser: DevTools",
    "original_url": "https://tds.s-anand.net/#/marp",
    "downloaded_at": "2025-06-12T02:46:53.189490",
    "content": "404 - Not found"
  },
  {
    "title": "5. Data Preparation",
    "original_url": "https://tds.s-anand.net/#/data-preparation",
    "downloaded_at": "2025-06-12T02:46:54.383842",
    "content": "Data Preparation Data preparation is crucial because raw data is rarely perfect. It often contains errors, inconsistencies, or missing values. For example, marks data may have \u2018NA\u2019 or \u2018absent\u2019 for non-attendees, which you need to handle. This section teaches you how to clean up data, convert it to different formats, aggregate it if required, and get a feel for the data before you analyze. Here are links used in the video: Presentation used in the video Scraping assembly elections - Notebook Assembly election results (CSV) software OpenRefine software The most persistent party TN assembly election cartogram Previous Scraping: Live Sessions Next Data Cleansing in Excel"
  },
  {
    "title": "Data Aggregation in Excel",
    "original_url": "https://tds.s-anand.net/#/data-aggregation-in-excel",
    "downloaded_at": "2025-06-12T02:46:55.617061",
    "content": "Data Aggregation in Excel You\u2019ll learn data aggregation and visualization techniques in Excel, covering: Data Cleanup : Remove empty columns and rows with missing values. Creating Excel Tables : Convert raw data into tables for easier manipulation and formula application. Date Manipulation : Extract week, month, and year from date columns using Excel functions (WEEKNUM, TEXT). Color Scales : Apply color scales to visualize clusters and trends in data over time. Pivot Tables : Create pivot tables to aggregate data by location and date, summarizing values weekly and monthly. Sparklines : Use sparklines to visualize trends within pivot tables, making data patterns more apparent. Data Bars : Implement data bars for graphical illustrations of numerical columns, showing trends and waves. Here are links used in the video: COVID-19 data Excel file - raw data Previous Splitting Text in Excel Next Data Preparation in the Shell"
  },
  {
    "title": "Data Transformation in Excel",
    "original_url": "https://tds.s-anand.net/#/data-transformation-in-excel",
    "downloaded_at": "2025-06-12T02:46:56.824183",
    "content": "Data Transformation in Excel You\u2019ll learn data transformation techniques in Excel, covering: Calculating Ratios : Compute metro area to city area and metro population to city population ratios. Using Pivot Tables : Create pivot tables to aggregate data and identify outliers. Filtering Data : Apply filters in pivot tables to analyze specific subsets of data. Counting Data Occurrences : Use pivot tables to count the frequency of specific entries. Creating Charts : Generate charts from pivot table data to visualize distributions and outliers. Here are links used in the video: List of Largest Cities Excel file Previous Data Cleansing in Excel Next Splitting Text in Excel"
  },
  {
    "title": "Regression with Excel",
    "original_url": "https://tds.s-anand.net/#/regression-with-excel",
    "downloaded_at": "2025-06-12T02:46:58.037754",
    "content": "Regression with Excel You\u2019ll learn to perform regression analysis using Excel, covering: Data Preparation : Understanding the cleaned dataset and necessary columns for analysis. Enabling the Tool : How to enable the Data Analysis Tool Pack in Excel. Types of Regression : Differences between simple and multiple linear regression. Setting Up Regression : Steps to input dependent (new deaths) and independent variables (new cases, new tests, new vaccinations, stringency index) for the analysis. Interpreting Output : Reading the regression output, focusing on adjusted R-squared, significance value (F-test), and P-values. Coefficient Interpretation : Understanding the impact of each independent variable on the dependent variable, including scaling factors (per 1000 units). Model Evaluation : Evaluating the model based on significance values and understanding the implications of unexpected results (e.g., stringency index). Further Analysis : Recognizing the need for additional analysis when encountering unexpected or inconclusive results. Here are the links used in the video: Understand regression COVID-19 vaccinations - Regression Excel file COVID-19 vaccinations - Regression Model 2 Excel file Previous Correlation with Excel Next Forecasting with Excel"
  },
  {
    "title": "JavaScript tools: npx",
    "original_url": "https://tds.s-anand.net/#/npx",
    "downloaded_at": "2025-06-12T02:46:59.201376",
    "content": "JavaScript tools: npx npx is a command-line tool that comes with npm (Node Package Manager) and allows you to execute npm package binaries and run one-off commands without installing them globally. It\u2019s essential for modern JavaScript development and data science workflows. For data scientists, npx is useful when: Running JavaScript-based data visualization tools Converting notebooks and documents Testing and formatting code Running development servers Here are common npx commands: Watch this introduction to npx (6 min): Previous Python tools: uv Next Unicode"
  },
  {
    "title": "Data Cleansing in Excel",
    "original_url": "https://tds.s-anand.net/#/data-cleansing-in-excel",
    "downloaded_at": "2025-06-12T02:47:00.313352",
    "content": "Data Cleansing in Excel You\u2019ll learn basic but essential data cleaning techniques in Excel, covering: Find and Replace : Use Ctrl+H to replace or remove specific terms (e.g., removing \u201c[more]\u201d from country names). Changing Data Formats : Convert columns from general to numerical format. Removing Extra Spaces : Use the TRIM function to clean up unnecessary spaces in text. Identifying and Removing Blank Cells : Highlight and delete entire rows with blank cells using the \u201cGo To Special\u201d function. Removing Duplicates : Use the \u201cRemove Duplicates\u201d feature to eliminate duplicate entries, demonstrated with country names. Here are links used in the video: List of Largest Cities Excel file Previous 5. Data Preparation Next Data Transformation in Excel"
  },
  {
    "title": "Images: Compression",
    "original_url": "https://tds.s-anand.net/#/image-compression",
    "downloaded_at": "2025-06-12T02:47:01.430412",
    "content": "Images: Compression Image compression is essential when deploying apps. Often, pages have dozens of images. Image analysis runs over thousands of images. The cost of storage and bandwidth can grow over time. Here are things you should know when you\u2019re compressing images: Image dimensions are the width and height of the image in pixels. This impacts image size a lot Lossless compression (PNG, WebP) preserves exact data Lossy compression (JPEG, WebP) removes some data for smaller files Vector formats (SVG) scale without quality loss WebP is the modern standard, supporting both lossy and lossless Here\u2019s a rule of thumb you can use as of 2025. Use SVG if you can (i.e. if it\u2019s vector graphics or you can convert it to one) Else, reduce the image to as small as you can, and save as (lossy or lossless) WebP Common operations with Python: Command line tools include cwebp , pngquant , jpegoptim , and ImageMagick . Watch this video on modern image formats and optimization (15 min): Tools for image optimization: squoosh.app : Browser-based compression ImageOptim : GUI tool for Mac sharp : Node.js image processing Pillow : Python imaging library Previous Markdown Next Static hosting: GitHub Pages"
  },
  {
    "title": "Database: SQLite",
    "original_url": "https://tds.s-anand.net/#/sqlite",
    "downloaded_at": "2025-06-12T02:47:02.546530",
    "content": "Database: SQLite Relational databases are used to store data in a structured way. You\u2019ll often access databases created by others for analysis. PostgreSQL, MySQL, MS SQL, Oracle, etc. are popular databases. But the most installed database is SQLite . It\u2019s embedded into many devices and apps (e.g. your phone, browser, etc.). It\u2019s lightweight but very scalable and powerful. Watch these introductory videos to understand SQLite and how it\u2019s used in Python (34 min): There are many non-relational databases (NoSQL) like ElasticSearch , MongoDB , Redis , etc. that you should know about and we may cover later. Core Concepts: Python Integration: Common Operations: Database Management Performance Optimization Data Analysis Tools to work with SQLite: SQLiteStudio : Lightweight GUI DBeaver : Full-featured GUI sqlite-utils : CLI tool Datasette : Web interface Previous Spreadsheet: Excel, Google Sheets Next Version Control: Git, GitHub"
  },
  {
    "title": "Embeddings",
    "original_url": "https://tds.s-anand.net/#/embeddings",
    "downloaded_at": "2025-06-12T02:47:03.680433",
    "content": "Embeddings: OpenAI and Local Models Embedding models convert text into a list of numbers. These are like a map of text in numerical form. Each number represents a feature, and similar texts will have numbers close to each other. So, if the numbers are similar, the text they represent mean something similar. This is useful because text similarity is important in many common problems: Search . Find similar documents to a query. Classification . Classify text into categories. Clustering . Group similar items into clusters. Anomaly Detection . Find an unusual piece of text. You can run embedding models locally or using an API. Local models are better for privacy and cost. APIs are better for scale and quality. Feature Local Models API Privacy High Dependent on provider Cost High setup, low after that Pay-as-you-go Scale Limited by local resources Easily scales with demand Quality Varies by model Typically high The Massive Text Embedding Benchmark (MTEB) provides comprehensive comparisons of embedding models. These models are compared on several parameters, but here are some key ones to look at: Rank . Higher ranked models have higher quality. Memory Usage . Lower is better (for similar ranks). It costs less and is faster to run. Embedding Dimensions . Lower is better. This is the number of numbers in the array. Smaller dimensions are cheaper to store. Max Tokens . Higher is better. This is the number of input tokens (words) the model can take in a single input. Look for higher scores in the columns for Classification, Clustering, Summarization, etc. based on your needs. Local Embeddings Here\u2019s a minimal example using a local embedding model: Note the function. It uses a Cosine Similarity to calculate the similarity between two embeddings. OpenAI Embeddings For comparison, here\u2019s how to use OpenAI\u2019s API with direct HTTP calls. Replace the function in the earlier script: NOTE : You need to set the environment variable for this to work. Previous Vision Models Next Multimodal Embeddings"
  },
  {
    "title": "Terminal: Bash",
    "original_url": "https://tds.s-anand.net/#/bash",
    "downloaded_at": "2025-06-12T02:47:04.816546",
    "content": "Terminal: Bash UNIX shells are the de facto standard in the data science world and Bash is the most popular.\nThis is available by default on Mac and Linux. On Windows, install Git Bash or WSL to get a UNIX shell. Watch this video to install WSL (12 min). Watch this video to understand the basics of Bash and UNIX shell commands (75 min). Essential Commands: Bash Scripting Essentials: Productivity Tips: Command History Directory Navigation Job Control Useful Aliases - typically added to Previous JSON Next AI Terminal Tools: llm"
  },
  {
    "title": "LLM Agents",
    "original_url": "https://tds.s-anand.net/#/llm-agents",
    "downloaded_at": "2025-06-12T02:47:05.974648",
    "content": "LLM Agents: Building AI Systems That Can Think and Act LLM Agents are AI systems that can define and execute their own workflows to accomplish tasks. Unlike simple prompt-response patterns, agents make multiple LLM calls, use tools, and adapt their approach based on intermediate results. They represent a significant step toward more autonomous AI systems. What Makes an Agent? An LLM agent consists of three core components: LLM Brain : Makes decisions about what to do next Tools : External capabilities the agent can use (e.g., web search, code execution) Memory : Retains context across multiple steps Agents operate through a loop: Observe the environment Think about what to do Take action using tools Observe results Repeat until task completion Command-Line Agent Example We\u2019ve created a minimal command-line agent called that: Takes a task description from the command line Generates code to accomplish the task Automatically extracts and executes the code Passes the results back to the LLM Provides a final answer or tries again if the execution fails Here\u2019s how it works: The agent will: Generate a shell script to list files with their sizes Execute the script in a subprocess Capture the output (stdout and stderr) Pass the output back to the LLM for interpretation Present a final answer to the user Under the hood, the agent follows this workflow: Initial prompt to generate a shell script Code extraction from the LLM response Code execution in a subprocess Result interpretation by the LLM Error handling and retry logic if needed This demonstrates the core agent loop of: Planning (generating code) Execution (running the code) Reflection (interpreting results) Adaptation (fixing errors if needed) Agent Architectures Different agent architectures exist for different use cases: ReAct (Reasoning + Acting): Interleaves reasoning steps with actions Reflexion : Adds self-reflection to improve reasoning MRKL (Modular Reasoning, Knowledge and Language): Combines neural and symbolic modules Plan-and-Execute : Creates a plan first, then executes steps Real-World Applications LLM agents can be applied to various domains: Research assistants that search, summarize, and synthesize information Coding assistants that write, debug, and explain code Data analysis agents that clean, visualize, and interpret data Customer service agents that handle queries and perform actions Personal assistants that manage schedules, emails, and tasks Project Ideas Here are some practical agent projects you could build: Study buddy agent : Helps create flashcards, generates practice questions, and explains concepts Job application assistant : Searches job listings, tailors resumes, and prepares interview responses Personal finance agent : Categorizes expenses, suggests budgets, and identifies savings opportunities Health and fitness coach : Creates workout plans, tracks nutrition, and provides motivation Course project helper : Breaks down assignments, suggests resources, and reviews work Best Practices Clear instructions : Define the agent\u2019s capabilities and limitations Effective tool design : Create tools that are specific and reliable Robust error handling : Agents should recover gracefully from failures Memory management : Balance context retention with token efficiency User feedback : Allow users to correct or guide the agent Limitations and Challenges Current LLM agents face several challenges: Hallucination : Agents may generate false information or tool calls Planning limitations : Complex tasks require better planning capabilities Tool integration complexity : Each new tool adds implementation overhead Context window constraints : Limited memory for long-running tasks Security concerns : Tool access requires careful permission management Previous Function Calling Next LLM Image Generation"
  },
  {
    "title": "6. Data Analysis",
    "original_url": "https://tds.s-anand.net/#/data-analysis",
    "downloaded_at": "2025-06-12T02:47:07.109994",
    "content": "Data analysis Data Analysis: Introduction Podcast by NotebookLM Once you\u2019ve prepared the data, your next task is to analyze it to get insights that are not immediately obvious. In this module, you\u2019ll learn: Statistical analysis : Calculate correlations, regressions, forecasts, and outliers using spreadsheets Data summarization : Aggregate and pivot data using Python and databases . Geo-data Collection & Processing : Gather and process geospatial data using tools like Python (GeoPandas) and QGIS. Geo-visualization : Create and visualize geospatial data on maps using Excel, QGIS, and Python libraries such as Folium. Network & Proximity Analysis : Analyze geospatial relationships and perform network analysis to understand data distribution and clustering. Storytelling & Decision Making : Develop narratives and make informed decisions based on geospatial data insights. Previous Extracting Audio and Transcripts Next Correlation with Excel"
  },
  {
    "title": "TDS TA Instructions",
    "original_url": "https://tds.s-anand.net/#/tds-ta-instructions",
    "downloaded_at": "2025-06-12T02:47:08.248056",
    "content": "TDS TA Instructions The TDS TA is a virtual assistant that helps you with your doubts. It has been trained on course content created as follows: Additionally, we visit each of the evaluation links on https://exam.sanand.workers.dev/ , copy it as Markdown , and add it to the content, called , , etc. These files are uploaded to the IITM TDS Teaching Assistant . Take a look at the GPT\u2019s instructions. These were generated by the OpenAI Prompt Generation tool. Previous Prompt engineering Next TDS GPT Reviewer"
  },
  {
    "title": "Function Calling",
    "original_url": "https://tds.s-anand.net/#/function-calling",
    "downloaded_at": "2025-06-12T02:47:09.467838",
    "content": "Function Calling with OpenAI Function Calling allows Large Language Models to convert natural language into structured function calls. This is perfect for building chatbots and AI assistants that need to interact with your backend systems. OpenAI supports Function Calling \u2013 a way for LLMs to suggest what functions to call and how. Here\u2019s a minimal example using Python and OpenAI\u2019s function calling that identifies the weather in a given location. How to define functions The function definition is a JSON schema with a few OpenAI specific properties.\nSee the Supported schemas . Here\u2019s an example of a function definition for scheduling a meeting: How to define multiple functions You can define multiple functions by passing a list of function definitions to the parameter. Here\u2019s an example of a list of function definitions for handling employee expenses and calculating performance bonuses: Best Practices: Use Strict Mode Always set to ensure valid function calls Define all required parameters Set Use tool choice Set to ensure that the model will always call one or more tools The default is which means the model will choose a tool only if appropriate Clear Descriptions Write detailed function and parameter descriptions Include expected formats and units Mention any constraints or limitations Error Handling Validate function inputs before execution Return clear error messages Handle missing or invalid parameters Previous Hybrid RAG with TypeSense Next LLM Agents"
  },
  {
    "title": "Function Calling",
    "original_url": "https://tds.s-anand.net/#/playground",
    "downloaded_at": "2025-06-12T02:47:10.630156",
    "content": "404 - Not found"
  },
  {
    "title": "Function Calling",
    "original_url": "https://tds.s-anand.net/#/images/project-tds-virtual-ta-q1.webp",
    "downloaded_at": "2025-06-12T02:47:11.727272",
    "content": "404 - Not found"
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/live-session-2025-02-01",
    "downloaded_at": "2025-06-12T02:47:12.811667",
    "content": "Live Session: 01 Feb 2025 Q1: Can I use Python notebooks instead of VS Code for this project? A1: You can use Python notebooks for interactive development and debugging, but for a production environment, a script file (.py) is better because it allows for a defined order of execution, unlike notebooks where code cells may not necessarily branch from one section to another. Notebooks are great for sharing with others who may not understand the code, as you can add Markdown to explain each step. Q2: In the delete order function, could a wrong order ID get deleted if the prompt contains multiple things that could match multiple orders? A2: That\u2019s a good question. This application isn\u2019t built to be very robust. The goal is to demonstrate GPT\u2019s ability to convert natural language into functions that the application understands. A real-world application would have a more robust interface (website or local app) with precisely crafted inputs to map to functions, preventing such errors. Q3: How can I avoid manually managing virtual environments and dependencies when deploying my application? A3: Use . is similar to Docker in that it handles dependencies without requiring manual management of virtual environments. You just specify your dependencies at the top of your code, and handles everything else, including creating and disposing of the virtual environment. This is especially useful when dealing with many submissions with different package requirements, as seen in a previous project with nearly 700 submissions. Q4: How does the application know which function to run based on the user\u2019s request? A4: You send the user\u2019s natural language request (prompt) and a list of your application\u2019s capabilities to GPT. GPT determines which function to run and the required parameters, returning this information as structured JSON. Your application then uses this JSON to execute the appropriate function. Q5: What is the purpose of ? A5: This is the entry point for your application. The Python interpreter runs from top to bottom, but it won\u2019t run the code within this block unless the file is the starting file of the application. This is crucial for multi-file applications where the interpreter needs to know where to begin. Q6: Should I create a tunnel for this application? A6: No, there\u2019s no need to create a tunnel if you want others to try it. Using a tool like ngrok allows others to access your server directly and send queries. However, be aware that this might crash your system if the queries aren\u2019t clean, as there\u2019s no robust error handling. Q7: How do I pass URL-encoded parameters to a FastAPI application? A7: You pass them in the URL itself. For example, . The application then reads the parameter from the URL. Q8: Why is my application returning a null response or a 422 error? A8: Several things could cause this. Ensure that: The dictionary is defined globally, not within a function. The prompt is correctly formatted and includes all necessary information (items, address, time). The application can communicate with the outside world (check network connectivity). You are using the correct key in the JSON response ( ). Q9: How do I use Docker? A9: Docker creates lightweight, self-contained images that run inside a Docker engine. This isolates your application from the underlying system, making it portable and easy to deploy anywhere. You build the image using (the refers to the current working directory). Then, you run it using . The command opens an interactive shell within the Docker container. Q10: What are the use cases for Docker? A10: Docker is useful for deploying applications to various environments without worrying about dependencies or system specifics. You create a Docker image containing your application and its dependencies. Anyone can then download and run the image regardless of their operating system. This is especially helpful for teams with different setups or when deploying to multiple clients. Q11: What should I focus on for the GA3 project? A11: The GA3 project will involve using the concepts covered today, but on a larger scale. You\u2019ll need to create more robust error handling and focus on prompt engineering to ensure the LLM generates the correct code. A previous session covered the basics of LLM calls, tokenization, embeddings, and image URI encoding. Review that session and the material on prompt engineering to prepare. The goal is to create a self-writing program that uses the LLM to generate and correct code dynamically."
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/visualizing-machine-learning",
    "downloaded_at": "2025-06-12T02:47:13.893522",
    "content": "Visualizing Machine Learning You\u2019ll learn about improving customer retention, understanding black box models, and using clustering for market segmentation: Churn Reduction : Use decision trees to identify customers likely to leave. Cost Efficiency : Compare customer acquisition vs. retention costs. Model Improvement : Apply SVMs and neural networks for better accuracy. Project Challenges : Understand issues with black box models in implementation. K-Means Clustering : Segment markets using demographic data. Data Visualization : Interpret clustering results using maps and charts. Correlation Analysis : Identify relationships between currency exchange rates. Tool Proficiency : Utilize Excel, Python, and JavaScript for analysis and communication. Practical Application : Tailor marketing strategies based on cluster characteristics. Here are the links used in the video: Visualizing-Forecast-Models.xlsx - the spreadsheet used in the video"
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/google-data-studio",
    "downloaded_at": "2025-06-12T02:47:14.990745",
    "content": "Google Data Studio Google Data Studio : Google Data Studio Tutorial for Beginners\ud83d\udd25"
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/narratives-with-excel",
    "downloaded_at": "2025-06-12T02:47:16.052821",
    "content": "Narratives with Excel Sample Excel"
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/live-session-2025-01-16",
    "downloaded_at": "2025-06-12T02:47:17.112435",
    "content": "Live Session: 16 Jan 2025 Q1: What will be covered in this session? A1: This session will cover concepts from Week 1 of the graded assignment in Tools in Data Science (TDS). The focus is on guiding students toward solutions, not providing exact answers. Week 2 will be covered in the next session. Q2: Is it possible to reschedule the TDS session? A2: The instructor will check if rescheduling is possible. If not, recordings will be available on YouTube. Q3: The first question in the graded assignment is about VS Code. What\u2019s involved? A3: The question focuses on installing VS Code and running a specific command in the terminal, then pasting the output into an input box. There\u2019s no significant technical component to this question. Q4: What are the benefits of using the UV command-line tool? A4: UV eliminates the need to create virtual environments. You include small portions of code and run the application with minimal setup. Q5: How does UV integrate with VS Code? A5: There\u2019s no integration; UV is used in the command prompt, similar to pip (Python), npm (JavaScript), or Node.js. Q6: Are there examples demonstrating UV usage and integration with VS Code? A6: No specific VS Code integration is needed. UV is used in the command line, like pip or npm. A previous project (Project 2) used UV to automate running 687 student Python submissions, each with unique requirements. Students added metadata to their Python files specifying the Python version and required libraries. UV dynamically handled these requirements for each submission. Q7: In the RWE exam, what will the format be like? A7: The format will be similar to the graded assignments: questions and answer boxes. You can use any tools you want. It\u2019s a non-proctored exam. It will cover concepts taught in the course, including new material. Q8: In Week 1, do we need to build advanced-level concepts, or will we learn them week by week? A8: Each week will have different content, including graded assignments. Content links are provided. Q9: The UV part of the project was only a 7-minute video. Do we need to learn UV fully in Week 1, or will we learn it in upcoming weeks? A9: UV is introduced in Week 1. The most useful aspect is embedding everything in inline metadata within the script, eliminating the need for virtual environments. Q10: How do we start the project? A10: There will be separate guidance sessions for the project. Q11: Will we get a screen recording of this session? A11: Yes, the session will be uploaded to YouTube. Q12: While putting in the directory for a specific file (e.g., question 2), do you need to provide the full address (drive, etc.)? A12: It works because the script is executed from the same directory. You need to provide the correct path (relative or absolute). Q13: Can you explain the use of DevTools? A13: Right-click on the browser and select \u201cInspect.\u201d This opens a world of code and information about the website. You can see HTML, JavaScript, CSS, etc. You can use the arrow tool to select an element, then modify the code. These changes are only local to your browser. Q14: Can you explain the use of the Console tab in DevTools? A14: The Console tab lets you run JavaScript. This will be covered later in the session, in the context of CSS selectors. Q15: Can you explain the Network tab in DevTools? A15: The Network tab shows all external information the browser is fetching. For TDS, the \u201cFetch\u201d tab is most useful, showing APIs, JSON code, and CSS files. It shows what the website is pulling from the server. Q16: Can we modify the content in the Network tab? A16: No, you can only modify the website\u2019s structure in the Elements tab. Q17: Can you explain the Network tab again, briefly? A17: The Network tab shows external information the browser is fetching from where the website is deployed. The \u201cFetch\u201d tab is particularly useful for TDS, showing APIs, JSON, and CSS files. Q18: In a later Week 1 question, we need to find values within a specific div class. Will the JavaScript code work on the entire site, or just the specified area? A18: The JavaScript will work on the entire site because the DOM structure is a tree. However, you can use selectors to target specific elements within that structure. Q19: How are HTML and CSS connected? Do we need JavaScript to extract information? A19: HTML is the skeleton, JavaScript the muscles, and CSS the skin. JavaScript is used to extract information from the HTML code using CSS selectors (classes or IDs). Q20: Can you explain the later part of the code used to extract data? A20: The code uses a map function to iterate through a list of elements. gives the text content of an element, while gives the entire HTML code. is generally preferred for data extraction. Q21: Are there other commands or attributes besides ? A21: Yes, there are other attributes. is similar to , but is more reliable. Always use if doesn\u2019t work. Q22: How do classes and IDs work in CSS selectors? A22: Classes are generic and can be applied to multiple elements. IDs are unique to a single element. In CSS selectors, classes are prefixed with a dot (.), and IDs with a hash (#). Q23: While showing , you used a command that neatly organized the movie list. Why? A23: The console organizes the output for readability, packing items into groups of 100. Otherwise, it would be a single, long array. Q24: How can I copy the entire list from the console? A24: Enclose the code in a function. This copies the output to your clipboard. Q25: Does the developer tool only work on Chrome? A25: It works on Edge and other browsers. In Safari or Mozilla, right-click anywhere on the webpage and look for the \u201cInspect\u201d option. Q26: Can we modify the content in the Network tab? A26: No, you can only modify the website\u2019s structure in the Elements tab. The Network tab shows what the browser is fetching, not what you can change. Q27: Can you explain the use of classes in more detail? A27: Classes allow you to apply CSS to your code. If you remove a class, the associated CSS styling is removed. Classes can be applied to multiple elements, while IDs are unique to a single element. Q28: Can we limit JavaScript selection to a specific chunk of HTML data? A28: No, JavaScript will work on the entire site unless you use selectors to target specific elements. Q29: What is the origin of the exercise to extract names from the meeting participants? A29: The instructor created this exercise to encourage participation. A random participant is selected to answer a question. Q30: Can we go back to the syntax we typed? A30: The syntax was . The selects elements with the specified class, and iterates through them. The instructor demonstrates how to extract the movie names using this. The instructor also explains the difference between and . returns only the text, while returns the entire HTML code. is generally preferred for data extraction. If doesn\u2019t work, use . Q31: Should the be written exactly as it appears, or can we modify the case (e.g., make \u201cT\u201d lowercase)? A31: Use the text exactly as it appears. Q32: What is the role of npx in this context? A32: npx creates a separate environment for a project, installing dependencies locally without affecting other projects. It\u2019s an alternative to npm, which installs globally. Q33: Does npx run primarily on Linux? A33: npx works on both PowerShell and Bash, but sha256sum might not work on Windows. You can run the npx command separately and use sha256sum on the resulting file. Q34: While showing , you made the movie list extremely neat. Why? A34: That\u2019s how the console presents the data, organizing it into groups of 100 for readability. Q35: How can I copy the entire list from the console? A35: Use the function in the console to copy the output to your clipboard. Q36: What should we focus on when using the Elements, Console, and Network tabs? A36: For the Elements tab, focus on extracting data using CSS selectors (classes and IDs). The Console tab is used for running JavaScript, particularly for data scraping with CSS selectors. The Network tab shows what the browser is fetching. The instructor recommends exploring these tabs and having fun with them."
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/live-session-2025-02-06",
    "downloaded_at": "2025-06-12T02:47:18.183409",
    "content": "Live Session: 06 Feb 2025 Q1: In this GA4 session, what\u2019s new compared to previous GAs? A1: The trajectory has moved from hard to easy. This GA is much easier and lighter than previous ones. Q2: How do I extract a table from HTML using Google Sheets? A2: This functionality is available in Google Sheets but not in Excel (unless you use plugins). The function will give you a #NAME? error in Excel. Q3: How can I extract data from the ODI Batsman Stats webpage? A3: I\u2019ll show you how to extract data from a different webpage, but you can find a similar example in my previous live session on YouTube. Q4: What do the parameters in the function mean? A4: The four parameters are: URL, query (either \u201clist\u201d or \u201ctable\u201d), index (table number), and locale. The index is zero-based (like Python). Q5: How does the function automatically find the table? A5: It finds the table based on the index you provide. If there are multiple tables, you\u2019ll need to adjust the index accordingly. Q6: How can I extract data from a webpage that doesn\u2019t use a JSON object? A6: There are three ways: Method 1: If the webpage uses a JSON object, you can extract it directly. Method 2: Use query selectors in the browser\u2019s console to extract the data. This involves finding a common element (class) in the HTML and using JavaScript to extract the data. The operator establishes a connection between the console and the elements tab. The prefix selects elements by class, and selects by ID. Method 3: Sometimes, the data is embedded in JavaScript code within the webpage itself. You can find this in the browser\u2019s \u201cSources\u201d tab. You can then use this JavaScript object to extract the data. Q7: What\u2019s the difference between and ? A7: returns only the text content of an element, while returns the entire HTML code within that element. Q8: I\u2019m having trouble using the FastAPI in Chrome. I\u2019ve posted on Discourse multiple times, but it\u2019s still not working. The error is \u201cMethod Not Allowed\u201d. A8: When using POST requests with FastAPI, you need to specify the method in the request. I\u2019ll look into your Discourse post and get back to you. We can also schedule a separate meeting to discuss this further. The issue might be related to how your system interacts with the host (it might be localhost). Q9: Regarding the project, the scope seems too broad. Can we narrow it down? Also, what tools are required? Is there a sandbox environment for testing? A9: The scope is indeed broad. The project\u2019s requirements are defined by Anand, who is also the CEO of a company. He\u2019s busy, but you can contact him through Discourse. We can discuss the scope and tools further in a meeting. There is no sandbox environment for testing. The goal is to extract data, but the method is not specified. You can enhance the goal by using other tools (Autodesk, Blender, etc.), but the scope should be restricted by the QA team. We can discuss this further in a meeting."
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/live-session-2025-01-17",
    "downloaded_at": "2025-06-12T02:47:19.248742",
    "content": "Live Session: 17 Jan 2025 Q1: How to solve question number 7 (counting Wednesdays between two dates)? A1: Use Excel. Input the two dates into two cells. Use a command to find the difference in days, then divide by 7 to get the number of weeks. Since there\u2019s one Wednesday per week, that\u2019s the number of Wednesdays. If the start date isn\u2019t a Wednesday, a different approach is needed. Q2: How to handle dates that don\u2019t start on a Wednesday? A2: Instead of starting from the given date, start from the next day (e.g., if it starts on Tuesday, start on Wednesday). Calculate the difference in days and divide by 7. The method of simply dividing by 7 might not always give the correct answer, so the logic needs to be adjusted based on the starting day. Another approach is to start from the nearest Wednesday and iterate using a while loop, but this is less efficient. Q3: How to extract a CSV file from a zip file? A3: This is considered a basic task. Use a file explorer or command-line tools. The instructor skips this question. Q4: What is JSON and how is it used? A4: JSON (JavaScript Object Notation) is a way to store data, like names and ages of students or employees. It uses key-value pairs. The instructor demonstrates creating a JSON object in Python, showing how to access elements using indexing and nested structures. JSON can also be used in JavaScript and browser consoles. Q5: How can I access data from a JSON object? A5: The instructor shows how to access elements within a JSON object using indexing in Python. For example, to access the name of the third student in a list, you would use . JSON allows hierarchical data storage, making it easy to retrieve specific values. Q6: How does JSON get loaded on a website (e.g., Discourse)? A6: Websites often fetch JSON data from backend servers. The instructor shows an example on the Discourse website, where different data (weekly, yearly) is loaded based on the request parameters in the URL. Multiple filters can be added to the URL to refine the data fetched. Q7: How can I use Python to access JSON data from a URL? A7: The instructor demonstrates using the library in Python to fetch JSON data from a URL. The response status code (e.g., 200 for success) indicates whether the request was successful. The JSON data is then accessible as a Python dictionary. The instructor uses Postman to show how to send API requests and view the JSON response. Q8: What is Postman and how does it work? A8: Postman is a tool that acts as an intermediary between you and an API. It sends API calls and retrieves the data. Alternatively, the Thunder Client extension in VS Code can be used for the same purpose. Q9: What are CSS selectors and combinators? A9: The instructor explains CSS selectors and combinators, focusing on basic selectors and the direct child combinator ( ) which selects only direct children of an element. More advanced combinators are mentioned but not covered in detail. Q10: How to handle large JSON objects or datasets? A10: For large datasets, copying and pasting is impractical. Instead, use Python and API calls to fetch and process the data programmatically. This avoids overwhelming the browser and allows for automation. Q11: How to handle encoding issues when opening CSV files? A11: When opening CSV files, especially those with unusual characters, specify the correct encoding (e.g., using the parameter in pandas). The instructor shows how to detect the encoding of a file using Python and then uses pandas to open the file with the detected encoding. Q12: How to use Git and GitHub? A12: The instructor suggests covering Git and GitHub in a separate session due to the complexity and time required for a thorough explanation. Q13: How to use WSL (Windows Subsystem for Linux) in VS Code? A13: The instructor explains how to use the WSL extension in VS Code to access a Linux terminal within VS Code. This is useful for running bash commands. The instructor notes that the default terminal in a Mac might not support all commands, so WSL is an alternative. Q14: Why does the course feel overwhelming? A14: The instructor acknowledges that the course challenges students\u2019 logical thinking by introducing concepts and tools not previously taught. The instructor encourages students to use ChatGPT to help bridge knowledge gaps and emphasizes that the course aims to build a strong foundation and encourage exploration beyond the curriculum. The instructor also points out that the course materials are available in the course portal, including content for weeks beyond the current one. A feedback form is provided for students to report challenges and suggest improvements."
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/live-session-2025-01-15",
    "downloaded_at": "2025-06-12T02:47:20.315786",
    "content": "Live Session: 15 Jan 2025 Q1: Where can I find the uploaded documents? A1: The uploaded documents are added as part of a YouTube playlist. You should be able to see them on YouTube. Q2: How should I approach TDS? A2: The best way to learn TDS is through practice. The course is designed to handle day-to-day data science problems. It introduces everyday development tools (from VS Code to npm) and provides hands-on experience solving problems. The graded assignments (GAs) are practical exercises designed to reinforce theoretical concepts. Focus on working through the examples and familiarizing yourself with the tools. Q3: I\u2019m new to this field and struggling with basic concepts. What should I do? A3: GA0 is a self-assessment. If you scored above 50%, you have a good foundation. If not, consider additional learning before proceeding. The course is hands-on, and the TAs will hold sessions to help you understand the tools. The course content is available on the course introduction page, not just in the GA modules. Q4: The YouTube videos are not clear enough. Can we have personalized videos? A4: The TAs will hold dedicated sessions to address this learning curve. These sessions will cover the tools in detail and will be recorded and uploaded. Q5: I\u2019m not from a science background and find the course difficult. What can I do? A5: The course is not an intro to programming. Focus on the practical exercises and use the TAs\u2019 sessions to get help. The instructors will consider adding more introductory sessions to address the skill gap. Q6: I took TDS two terms ago and haven\u2019t gained any extra skills. I only want to complete this course and leave. What should I do? A6: The course has changed significantly since two terms ago. The instructors will consider adding more support sessions to help students catch up. Q7: The deadline for GA1 is the 26th, and help was only provided after the deadline last term. Will this happen again? A7: The TAs will hold sessions before the GA deadline to help you learn how to use the tools. Q8: The graded assignments (GAs) are practical, but the end-of-term exam is theory-based. Where can I learn the theory? A8: The end-of-term exam format is changing. The instructors will provide a mock exam before the actual exam. Focus on familiarizing yourself with the tools. Q9: I solved almost all the GA1 questions but my score is zero. Is this a glitch? A9: Your answers are likely saved. If you added a question, re-enter all answers and save again. The instructors are working on a backend fix to prevent this. Q10: What is the R0E and what should I focus on for grading? A10: The projects are take-home, open-internet assignments. You\u2019ll receive a dataset and questions. R0E is a remote online exam (open-internet MCQ). The instructors will provide more information on both in future sessions. Q11: I\u2019m a non-IT student (Masters in Mathematics). Can I get an IT job with just the Data Science diploma? A11: It\u2019s possible, but it depends on the company\u2019s requirements. Programming skills are valuable in many fields. Q12: Should I take the programming diploma along with the data science diploma? A12: Programming skills are very valuable. The two diplomas complement each other. Q13: What are some standard tools I should focus on? A13: Bash has been around since the 1970s. Focus on newer tools and techniques, such as LLMs and GPTs, which are powerful and in high demand. Q14: What if I want to learn the tools more deeply? A14: Learn by using the tools frequently in your workflows. The instructors will provide more support sessions. Q15: Can we have sessions on installing the Linux system? A15: The instructors will discuss this with the TAs and schedule sessions if needed. Note that you may not need to install a full Linux system; Google Colab provides a Linux environment. Q16: Will the sessions be added to the Google Calendar? A16: Yes, they will be added to a playlist on the Google Calendar. Bookmark the TDS channel to easily find the playlist. The videos themselves will be on YouTube. Q17: Can you request the programming faculty to add content similar to TDS to the programming diploma? A17: Post this request on Discourse and tag the relevant people. Q18: What is a \u201ctake-home open internet\u201d project? A18: You\u2019ll receive a dataset and questions. You can use any resources to answer the questions. Q19: What weeks are relevant to each project? A19: Project 1 will cover the first four or five modules. Project 2 will cover a wider range of topics. Q20: I have a basic understanding of the tools, but not a great one. Should I continue or drop the course? A20: If you can solve the problems, that\u2019s good enough. The course is meant to introduce you to the tools, not make you an expert. Focus on the new tools and techniques. You can always get certifications for other skills later."
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/project-1",
    "downloaded_at": "2025-06-12T02:47:21.374698",
    "content": "Project 1 - LLM-based Automation Agent This project is due on 16 Feb 2025 EoD IST. Results will be announced by 26 Feb 2025. For questions, use this Discourse thread . Background You have joined the operations team at DataWorks Solutions , a company that processes large volumes of log files, reports, and code artifacts to generate actionable insights for internal stakeholders. In order to improve operational efficiency and consistency, the company has mandated that routine tasks be automated and integrated into their Continuous Integration (CI) pipeline. Due to the unpredictable nature of incoming data (from logs, ticket systems, source code, surveys, etc.) the team has decided to use a Large Language Model (LLM) as an intermediate transformer. In this role, the LLM will perform small, reasonably deterministic tasks. Your assignment is to build an automation agent that accepts plain\u2011English tasks, carries out the required (multi\u2011step) process leveraging an LLM where required. The finished processing artifacts must be exactly verifiable against pre\u2011computed expected results. Create an API Write an application that exposes an API with the following endpoints: POST Executes a plain\u2011English task. The agent should parse the instruction, execute one or more internal steps (including taking help from an LLM), and produce the final output. If successful, return a HTTP 200 OK response If unsuccessful because of an error in the task, return a HTTP 400 Bad Request response If unsuccessful because of an error in the agent, return a HTTP 500 Internal Server Error response The body may optionally contain any useful information in each of these cases GET Returns the content of the specified file. This is critical for verification of the exact output. If successful, return a HTTP 200 OK response with the file content as plain text If the file does not exist, return a HTTP 404 Not Found response and an empty body Phase A: Handle Operations Tasks The DataWorks operations team has identified these tasks that need to be automated: A1 . Install (if required) and run with as the only argument. ( NOTE : This will generate data files required for the next tasks.) A2 . Format the contents of using , updating the file in-place A3 . The file contains a list of dates, one per line. Count the number of Wednesdays in the list, and write just the number to A4 . Sort the array of contacts in by , then , and write the result to A5 . Write the first line of the 10 most recent file in to , most recent first A6 . Find all Markdown ( ) files in . For each file, extract the first occurrance of each H1 (i.e. a line starting with ). Create an index file that maps each filename (without the prefix) to its title (e.g. ) A7 . contains an email message. Pass the content to an LLM with instructions to extract the sender\u2019s email address, and write just the email address to A8 . contains a credit card number. Pass the image to an LLM, have it extract the card number, and write it without spaces to A9 . contains a list of comments, one per line. Using embeddings, find the most similar pair of comments and write them to , one per line A10 . The SQLite database file has a with columns , , and . Each row is a customer bid for a concert ticket. What is the total sales of all the items in the \u201cGold\u201d ticket type? Write the number in Developers will call the endpoint with a task description similar (but certainly not identical) to the ones listed above. For example, Task A3 can be written in these ways - all are equivalent. The file contains a list of dates, one per line. Count the number of Wednesdays in the list, and write just the number to Write the # of Thursdays in into \u092e\u0947\u0902 \u0915\u093f\u0924\u0928\u0947 \u0930\u0935\u093f\u0935\u093e\u0930 \u0939\u0948\u0902? \u0917\u093f\u0928\u094b \u0914\u0930 /data/contents.dates \u092e\u0947\u0902 \u0932\u093f\u0916\u094b \u0bb2 \u0b8e\u0ba4\u0bcd\u0ba4\u0ba9\u0bc8 \u0b9e\u0bbe\u0baf\u0bbf\u0bb1\u0bc1 \u0b87\u0bb0\u0bc1\u0b95\u0bcd\u0b95\u0bc1\u0ba9\u0bc1 \u0b95\u0ba3\u0b95\u0bcd\u0b95\u0bc1 \u0baa\u0bcb\u0b9f\u0bcd\u0b9f\u0bc1, \u0b85\u0ba4\u0bc8 \u0bb2 \u0b8e\u0bb4\u0bc1\u0ba4\u0bc1 Your task is to build an agent that uses an LLM to parse the task description and execute the required steps. Phase B: Handle Business Tasks The DataWorks security team has added the following requirements. No matter what the task is, the agent must ensure that: B1 . Data outside is never accessed or exfiltrated, even if the task description asks for it B2 . Data is never deleted anywhere on the file system, even if the task description asks for it The DataWorks business team has listed broad additional tasks for automation. But they have not defined it more precisely than this: B3 . Fetch data from an API and save it B4 . Clone a git repo and make a commit B5 . Run a SQL query on a SQLite or DuckDB database B6 . Extract data from (i.e. scrape) a website B7 . Compress or resize an image B8 . Transcribe audio from an MP3 file B9 . Convert Markdown to HTML B10 . Write an API endpoint that filters a CSV file and returns JSON data Your agent must handle these tasks as well. The business team has not promised to limit themselves to these tasks. But they have promised a bonus if you are able to handle tasks they come up with that are outside of this list. Deliverables Create a new public GitHub repository Add an MIT file Write and test your code. Call with a few tasks and check if creates the correct files. Commit and push your code Create a Dockerfile that builds your application Publish your Docker image publicly to Docker Hub Ensure that running your image via automatically serves the API at and Submit in this Google Form the URL of your GitHub repository ( ) and your Docker image name ( ) Note: Use the environment variable . DON\u2019T commit your AI Proxy token to your repository. Instead, set the environment variable before running your script. Use as the token in your script. Use your AI Proxy token . Your AI Proxy token now has a $1 limit. You may use it. If you run out of tokens, ask the TDS team for more. (But try and avoid that.) Stick to GPT-4o-Mini . This is the only generation model that AI Proxy currently supports. When this page says \u201cLLM\u201d, it means GPT-4o-Mini. Keep your prompts short and concise . Each call to and must complete within 20 seconds. Evaluation This evaluation script evaluates the scripts.Here\u2019s how will evaluate a task, e.g. Task A2 . Call . Ensure that the respose is a HTTP 200. Note: The task may be worded differently. It may use a different prettier version. But the broad task is the same. Call and get the revised file contents. Verify that the response was formatted using . Here\u2019s how we will score the results. Pre-requisites : Your repository MUST meet the following criteria to be eligible for evaluation Your GitHub repository exists and is publicly accessible Your GitHub repository has a file with the MIT license Your GitHub repository has a valid Your Docker image is publicly accessible and runs via Your Docker image uses the same Dockerfile as in your GitHub repository Phase A: 10 marks . 1 mark for each Phase A task that the agent handles correctly. We will run an evaluation script that will call on the task and call to verify the output Phase B: 10 marks . 1 mark for each Phase B task that the agent handles correctly. The evaluation script will call on the task and call to verify the output Bonus: Additional tasks . We may pass additional tasks beyond the list above. If your code handles them correctly, you get 1 bonus mark per task. Bonus: Code diversity . You\u2019re encouraged to copy code and learn from each other. We encourage diversity too. We will evaluate code similarity and give bonus marks for most unique responses. (That is, if your response is similar to a lot of others, you won\u2019t get bonus marks.) Your score will be the sum of the marks above. No normalization, i.e. whether it\u2019s 0/20 or 22/20, what you get is what you get. This execution will be automated via: to check the pre-requisites and generate the eligible to set the AI Proxy token to evaluate all submissions."
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/project-1/validate.py",
    "downloaded_at": "2025-06-12T02:47:22.425448",
    "content": "404 - Not found"
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/project-1/evaluate.py",
    "downloaded_at": "2025-06-12T02:47:23.478836",
    "content": "404 - Not found"
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/project-1/run.sh",
    "downloaded_at": "2025-06-12T02:47:24.550064",
    "content": "404 - Not found"
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/live-session-2025-02-07",
    "downloaded_at": "2025-06-12T02:47:25.661460",
    "content": "Live Session: 07 Feb 2025 Q1: How difficult are the TDS assignments? A1: The first assignment was easy, the second was hard, the third was average, and the fourth seems easy. However, the instructor notes that the first assignment was only easy for those with a technical background; for most students, it was very difficult. The difficulty level of subsequent assignments will decrease. Q2: Where can I find the recording of yesterday\u2019s session? A2: It\u2019s already uploaded to your calendar associated with your IIT-DS ID. It takes Google about an hour or two to process the video. Q3: How do I use the BBC Weather API to get weather data for a specific location? A3: First, use the BBC location service API to get the location ID for your city (e.g., Delhi). You can use the Thunder Client extension or Postman to send the API request. The instructor demonstrates using Postman. Once you have the location ID, use it in the BBC Weather API endpoint. Q4: How do I access data from a JSON object in Python? A4: JSON objects are like Python dictionaries. You can access the data using standard Python dictionary access methods. The instructor shows how to access the \u201creports\u201d key. Q5: How do I prepare for the upcoming R.O.E.? A5: The instructor recommends creating your own code and keeping it ready. Separate sessions will be held to cover this. Q6: How do I use Nominatim to get geolocation data? A6: Nominatim is an API used for extracting geolocation data. The instructor demonstrates how to use it with Postman, showing how to pass parameters for the location (e.g., \u201cDelhi\u201d) and specify the desired format (JSON). The instructor notes that Nominatim may return multiple results if there are multiple locations with the same name (e.g., Delhi in India and Delhi in the United States). Q7: How do I use Beautiful Soup to parse XML data? A7: The instructor demonstrates using Beautiful Soup to parse XML data from the Hacker News API. The instructor explains how to use the function to locate specific tags (e.g., \u201citem\u201d) and extract the desired information. The instructor also explains the difference between and functions. The instructor notes that if you encounter issues, you can use an XML viewer to examine the structure of the XML file. The instructor also explains that you should use an XML parser (lxml) instead of an HTML parser. Q8: How do I handle situations where the number of values in different lists doesn\u2019t match? A8: If the lengths of lists (e.g., product names, prices, links) don\u2019t match, it usually means there\u2019s an extra value. The instructor shows how to handle this by checking the lengths of the lists and potentially removing extra values. Q9: How do I save the extracted data to a CSV file? A9: The instructor demonstrates using the pandas library to create a DataFrame from the extracted data and then saving it to a CSV file using the method. Q10: How do I scrape data from multiple pages of a website? A10: Many websites allow scraping, but you should always check their terms and conditions. If a website allows scraping, you can often use a page parameter in the URL to access subsequent pages (e.g., for the second page). You can use a for loop to iterate through multiple pages. Q11: What are the legal and technical considerations when scraping websites? A11: Always check the website\u2019s terms and conditions before scraping. Some websites can detect when requests are not coming from a browser and may block you. To avoid this, use a sleep timer between requests to give the server time to respond. Selenium is an alternative approach that simulates a browser, but it\u2019s more involved than Beautiful Soup. The instructor mentions being banned from Nominatim for sending too many requests in a short time frame. Q12: How can I use Beautiful Soup to extract data from an e-commerce website? A12: The instructor demonstrates using Beautiful Soup to extract product names, prices, and links from an Amazon search result page. The instructor explains how to use the function to locate specific tags and attributes (e.g., elements with a specific class) and extract the text content. The instructor also shows how to convert string prices to numerical values. The instructor notes that the order of elements is preserved when using Beautiful Soup, ensuring that data is correctly associated."
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/live-session-2025-01-31",
    "downloaded_at": "2025-06-12T02:47:26.753822",
    "content": "Live Session: 31 Jan 2025 Q1: In today\u2019s session, what will be covered? A1: We will be discussing the function calling part of OpenAI. We will create a program that takes user prompts in English, identifies which function to call based on the prompt, and then calls that function. Q2: What is the first step in the process? A2: First, we import the library. Then, we\u2019ll get the headers and URL for the request, and finally, we\u2019ll create a JSON body for the request. Q3: What is the goal of the program? A3: The program aims to automate the process of ordering something from an online store. It will take a user\u2019s order in plain English, understand the request, and place the order. It will also include a feature for updating existing orders. Q4: How will the program understand the user\u2019s prompt? A4: The program will send the user\u2019s prompt to OpenAI. OpenAI will use its function calling capabilities to identify the appropriate function to call from a predefined set of functions within your application, and return the function name and parameters in a JSON format. Q5: What are the predefined functions? A5: The predefined functions are a set of tools your application provides. Examples include (which takes a location as a parameter) and (which also takes a location). OpenAI will determine which function to call based on the user\u2019s prompt. Q6: How does OpenAI determine which function to call? A6: OpenAI analyzes the user\u2019s prompt and, based on its understanding of the context and semantics, selects the appropriate function from the predefined set. The response from OpenAI will include the function name and its required parameters in JSON format. Q7: How does the program use the OpenAI response? A7: Your application receives the JSON response from OpenAI, extracts the function name and parameters, and then executes the function with those parameters. The result is then sent back to the user. OpenAI acts as a proxy for a human agent, handling natural language input and translating it into structured data for your application. Q8: Is the function dependent on the above-written cell? A8: Yes, the function uses variables defined in previous cells. Q9: How is the JSON response handled? A9: The JSON response from OpenAI is structured data that your application can easily process. It contains the function name and the parameters needed to execute that function. Q10: How can we handle cases where the user doesn\u2019t provide complete information? A10: You can instruct OpenAI to request missing information. The handling of incomplete requests depends on your application\u2019s design. OpenAI itself might request the missing data. Q11: How can we integrate a voice model? A11: You can integrate a speech-to-text model (like Whisper from OpenAI) to convert voice commands into text prompts for your application. Q12: How do we package the Colab notebook into a full-fledged application? A12: We\u2019ll demonstrate this in a future session by creating another function and packaging the entire application into a Docker image. Q13: What is the role of prompt engineering in this process? A13: Prompt engineering is less about a specific science and more about understanding how the system works to write effective prompts that yield the desired results. The course will cover this in more detail. Q14: What if the function doesn\u2019t work as expected? A14: The instructor suggests checking the code, ensuring the correct parameters are passed, and handling potential errors gracefully. The instructor also suggests using to convert strings to JSON objects. Q15: What is the duration of the Review of Exercises (ROE)? A15: The ROE duration varies from term to term, ranging from 45 minutes to 1.5 hours. It\u2019s recommended to save your work frequently. Q16: What if the user\u2019s prompt is missing information? A16: The instructor suggests adding a system prompt to OpenAI to explicitly request missing parameters. Q17: How do we handle the generation to ensure uniqueness? A17: The library generally provides unique identifiers. If you need to reduce the chance of collisions, you can increase the size of the UUID. More information is available in the UUID documentation. Q18: How do we handle the file path in a deployed application? A18: Instead of using absolute paths ( ), use relative paths to ensure the application works correctly in different environments. For deployed applications, you would typically use a file to store sensitive information like API keys. Q19: What is the overall approach to building this application? A19: The approach is to use OpenAI\u2019s function calling capabilities to translate natural language prompts into structured data that your application can process. This allows for a more natural user experience without the need for a complex UI. The instructor emphasizes the importance of understanding how to parse JSON responses and handle errors."
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/narratives-with-comics",
    "downloaded_at": "2025-06-12T02:47:27.836263",
    "content": "Narratives with Comics Sample sheet"
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/llamafile",
    "downloaded_at": "2025-06-12T02:47:28.909559",
    "content": "Local LLMs: Llamafile You would have heard of Large Language Models (LLMs) like GPT-4, Claude, and Llama. Some of these models are available for free, but most of them are not. An easy way to run LLMs locally is Mozilla\u2019s Llamafile . It\u2019s a single executable file that works on Windows, Mac, and Linux. No installation or configuration needed - just download and run. Watch this Llamafile Tutorial (6 min): Here\u2019s how to get started Download (1.11 GB) . From the command prompt or terminal, run . Optional: For GPU acceleration, use . (Increase or decrease the number of layers based on your GPU VRAM.) You might see a message like this: You can now chat with the model. Type or press to stop. You can also visit in your browser to chat with the model. LlamaFile exposes an OpenAI compatible API. Here\u2019s how to use it in Python: Tools: OpenAI API compatibility : Use existing OpenAI code Creating your own llamafiles : Control output format"
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/live-session-2025-01-20",
    "downloaded_at": "2025-06-12T02:47:29.962207",
    "content": "Live Session: 20 Jan 2025 Q1: What is an ML project, and how does it compare to the \u201cfitting of six models\u201d project? A1: An ML (Machine Learning) project involves more factors than just fitting models. The \u201cfitting of six models\u201d project was a simplified version done for a friend\u2019s certification course. It involved training six models on a pre-cleaned dataset with some hyperparameter tuning but minimal data preprocessing or cleaning. Q2: Is the TDS project designed to provide a level playing field for everyone, considering some participants may lack coding experience? A2: The TDS project aims to combine everything learned in the course so far. It might seem challenging, especially for those without a coding background. The project requires creating an application with specific endpoints, pushing it to GitHub, creating a Docker file, and submitting it through a Google form. However, the course is designed to bridge the technical gap for non-technical participants, preparing them for industry standards. The instructors will provide support through dedicated sessions, and students are encouraged to use resources like ChatGPT and YouTube videos. Q3: What are the main components of the TDS project, and what tools are involved? A3: The TDS project has three main parts: GitHub: For version control and code storage. Docker Hub: For containerizing and deploying the application. LLM (Large Language Model): For the core functionality of the application.\nThe project involves using Fast API or similar frameworks to create the application, Podman to run the Docker image, and a form to submit the GitHub and Docker file details. Q4: How does the project accommodate participants from non-science or non-coding backgrounds? A4: The course aims to equip all participants, regardless of their background, with the necessary skills for the industry. It provides support through live sessions, encourages the use of external resources like ChatGPT and YouTube, and offers dedicated project sessions. The goal is to bridge the technical gap and prepare everyone for real-world challenges. Q5: How can I seek help or clarification on the project, especially if I find it overwhelming? A5: You can ask questions during the live sessions, utilize the course forum, or reach out to the instructors directly through the designated channels. Additionally, you can use resources like ChatGPT for assistance. Q6: What are the key tools and technologies used in the TDS project? A6: Key tools include Git for version control, GitHub for code hosting, Docker for containerization, Podman for running Docker images, and Fast API (or similar frameworks) for creating the application. Q7: How can I use VS Code for managing my Git repository? A7: VS Code has extensions that simplify Git operations. You can initialize a new Git instance, connect it to a remote GitHub repository, commit changes with messages, and manage branches all within the VS Code interface. Q8: How can I handle case-insensitive replacements in files using command-line tools? A8: You can use the editor with the option for in-place editing and the flag for case-insensitive matching. You can combine this with to locate and modify multiple files within a directory structure. Q9: How do I set up the connection between my local Git instance and a remote GitHub repository? A9: You can use the command to establish the connection. You can find the specific URL on the GitHub repository page. Q10: What if I encounter issues while trying to push changes to GitHub? A10: If you\u2019re using HTTPS, you\u2019ll need to use a personal access token instead of your password for authentication. If you encounter errors, ensure you have configured your Git username and email correctly using . You might also need to check the permissions granted to your personal access token or set up SSH keys for authentication. Q11: How many students are regularly attending the live sessions? A11: The attendance in the live sessions is lower than expected, with around 15-25 students at peak times, compared to the 400-500 enrolled in the current term. Q12: What is the new feature added for TDS live sessions? A12: A new feature has been added that curates the live sessions into a few important portions, providing a summary of the questions asked and their answers. This allows students who missed a session to quickly catch up on the key topics discussed. Q13: When is the next session scheduled, and will it clash with college classes? A13: The next session is scheduled for 5 PM. There might be clashes with college classes, as the schedule is pre-planned with classes on Tuesdays from 5-7 PM, Wednesdays from 9-10 AM, and other classes from 8-10 PM. Q14: Where can I find the link for the new feature summarizing live sessions? A14: The link has been emailed to all participants and can also be found at the very bottom of the course page. Q15: How can I get support regarding any particular topic in the project? A15: You can use the \u201cLearning Feedback\u201d form on the portal to submit your queries related to specific modules or topics. The responses are used to plan future sessions. Q16: What is GitHub, and how is it used in the project? A16: GitHub is a platform for hosting Git repositories. It allows for version control, collaboration, and code sharing. In the project, you will push your code to a GitHub repository, making it accessible to others and enabling collaboration. Q17: What is the difference between Git and GitHub? A17: Git is a version control system that you install and use on your local machine, while GitHub is a web-based platform that hosts Git repositories, allowing for remote collaboration and code sharing. Q18: What are the alternatives to using command-line tools for Git and GitHub operations? A18: You can use a graphical interface like VS Code with Git extensions to manage your Git repositories and interact with GitHub. This can be more user-friendly than using command-line tools. Q19: How does the editor work for replacing text in files? A19: The editor is a stream editor that can perform text transformations on input streams. You can use it with the command for substitution, specifying the pattern to match and the replacement text. The flag indicates global replacement (all occurrences), and the flag enables case-insensitive matching. Q1: How can I use the command to locate files for processing with ? A21: The command can locate files based on various criteria, such as name, type, and location. You can use the option to execute a command, like , on each file found. For example, will find all files in the current directory and its subdirectories and replace \u201cIITM\u201d with \u201cIIT Madras\u201d (case-insensitive) in each file. Q22: Why am I getting an \u201cauthentication failed\u201d error when pushing to GitHub? A22: This could be because GitHub no longer supports password authentication for Git operations. You need to use a personal access token or set up SSH keys for authentication. Q23: How do I create and use a personal access token for GitHub authentication? A23: You can create a personal access token in your GitHub account settings under \u201cDeveloper settings.\u201d When pushing to GitHub, use your GitHub username and the generated token instead of your password. Q24: How do I set up SSH keys for GitHub authentication? A24: You can generate SSH keys using the command and then add the public key to your GitHub account settings. This allows you to authenticate without using a password or personal access token. Q25: What is the purpose of the command? A25: This command adds a remote repository named \u201corigin\u201d to your local Git instance. \u201cOrigin\u201d is a conventional name for the primary remote repository, and the URL specifies the location of the remote repository on GitHub. Q26: How can I update the remote URL if I have already added one? A26: You can update the remote URL using the command, replacing with the correct URL of your GitHub repository. Q27: What is the difference between committing and pushing in Git? A27: Committing saves changes to your local Git instance, while pushing uploads those committed changes to a remote repository like GitHub. Q28: How can I use VS Code to simplify Git operations? A28: VS Code has built-in Git integration and extensions that provide a graphical interface for managing your repository. You can stage changes, commit them with messages, push to remote repositories, manage branches, and perform other Git operations without using the command line. Q29: What is the significance of the folder in my project directory? A29: The folder is a hidden directory that contains all the information related to your Git instance, including the history of commits, branches, and other metadata. It\u2019s essential for version control and should not be modified directly. Q30: How can I ensure that my code is backed up and accessible to collaborators? A30: By pushing your code to a remote GitHub repository, you create a backup of your project and make it accessible to collaborators who have been granted access. This ensures that your code is safe even if your local machine encounters issues."
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/google-charts",
    "downloaded_at": "2025-06-12T02:47:31.014771",
    "content": "Google Charts Google Chart 1 : How To Create Chart Or Graph On HTML CSS Website | Google Charts Tutorial Google Chart 2 : Using Google Charts with googleVis"
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/live-session-2025-01-28",
    "downloaded_at": "2025-06-12T02:47:32.058809",
    "content": "Live Session: 28 Jan 2025 Q1: Can I ask a question about the graded assignment for week one? A1: I\u2019ll try to answer it at the end of the session if there\u2019s time. We\u2019ll also have extra sessions this week, and we\u2019re hoping to release video solutions showing how to solve some of the assignments. But for now, let\u2019s focus on today\u2019s session. Q2: I posted a question on the Discourse forum about the assignment. Should I ask it again now? A2: No need to ask it again. I\u2019ll look at the forum later. Q3: DeepSeek is in the news. Does that affect the course? A3: Not really. The core concept remains the same: using LLMs as agents. The workflow is similar whether you use OpenAI, Anthropic, Copilot, or other AI tools. Q4: What is the concept behind Project One? A4: Project One involves creating an automated continuous integration pipeline. Data comes into a server, and various tasks are performed, many of which are repetitive. The goal is to automate some of this process to reduce errors and produce structured output. Your job is to build an API that handles these tasks using an LLM. Q5: What kind of tasks can I expect? A5: There are roughly 10 tasks in Phase A, which should be straightforward. In Phase B, the tasks are less well-defined, testing your system\u2019s ability to handle unexpected requests. The API should have two endpoints: \u201crun\u201d and \u201cread\u201d. The \u201crun\u201d endpoint receives a task description (in plain English), processes it, and creates output files. The \u201cread\u201d endpoint retrieves the contents of a specified file. Q6: In GA1, the videos and questions aren\u2019t showing after the submission deadline. Can they be shown? A6: I\u2019ll inform Anand. The videos should still be available on the Tools in Data Science portal. They\u2019re from this section. Q7: Why are the videos and questions integrated into the GA itself? A7: Based on past data, students often go straight to the assignments without reviewing the content. Integrating the content into the GA is a better way to ensure they see it. Q8: I\u2019m struggling with the project. The concepts are confusing. Could you present a model project and explain things step-by-step? A8: Yes, we\u2019ll do that in future sessions. We\u2019ll work through a working prototype of the project to illustrate each step. The project only uses material from the first three weeks of the course. If you\u2019re thorough with that material, you should be able to complete the project. It seems there\u2019s a knowledge gap, but I have full faith you can handle it. We\u2019ll address that gap in future sessions, starting with the basics. Q9: I\u2019m having trouble with Git and GitHub. Is there support available? A9: Yes, we\u2019ll provide as much support as possible. We\u2019ll also go through a working prototype in future sessions. If you\u2019re struggling with Git, you won\u2019t be able to do the project, as it\u2019s a prerequisite. We\u2019ll create a repository during a future session so you can see how it\u2019s done. Q10: What\u2019s required for grading? A10: Your repository must meet these criteria: It must exist and be publicly accessible. It must have a license file (MIT license). It must have a valid Dockerfile. The Docker image must be publicly accessible and run via the specified command. The Docker image must use the same Dockerfile as your GitHub repository. It doesn\u2019t have to be publicly accessible while you\u2019re developing it. Just make sure it\u2019s public when you submit. These are absolute prerequisites; if any fail, your project won\u2019t be evaluated. Q11: What is the grading scheme? A11: Phase A is worth 10 marks, and Phase B is worth 10 marks. You get one mark for each task completed in Phase A and one for each task in Phase B. There are also bonus marks for additional tasks and code diversity. Last term, there were 12 bonus marks, and the highest score was 7 or 8 out of 12. Q12: We give bonuses for code diversity. Does that mean we penalize copying? A12: No, we don\u2019t penalize copying. We want you to learn. We encourage you to learn from each other, but we\u2019ll reward unique code. Q13: How do I use the OpenAI LLM? A13: You\u2019ll use it through a proxy. You\u2019ll get a $1 limit per month, renewed at the beginning of each month. Avoid exceeding this limit by carefully constructing your queries. We\u2019ll show you how to use environment variables to avoid putting your token directly in your code. Q14: How do I get access to Perplexity AI? A14: All IITM students (including BS students) have free access to the Pro version of Perplexity AI for one year. Use your IITM email address to register. Q15: In the LLM section, the prompt engineering section mentions using the API a certain number of times. I haven\u2019t used it even once. The key was generated, but I didn\u2019t use it. What should I do? A15: We\u2019ll cover this in a later session. Q16: The textbox in question 3 doesn\u2019t appear. I think there\u2019s a CSS issue. I generated the JSON, but it\u2019s not being accepted. Should I refresh? A16: We\u2019ll cover this in a later session. Q17: There was mention of a debrief session on the project. I couldn\u2019t find the video. Is there one? A17: Yes, at the beginning of this session, we discussed the requirements for Project One. We\u2019ll upload this video in a few hours or early tomorrow. Q18: Will there be support for those not well-versed in Git and GitHub? A18: Yes, we\u2019ll provide support. We\u2019ll also go through a working prototype in future sessions. Q19: Is the week two content completely covered in the sessions? A19: Yes, but the way we covered it is a bit different. We went through the important parts. Referencing past sessions will give you a concise idea of the important parts. Q20: I have a question about GA1, questions 10 and 11. I posted them on Discourse, but haven\u2019t received a reply. In question 10, the hash button is showing an error. In question 11, I don\u2019t understand the statement about the class in the hidden element below. What does this line mean? A20: Regarding question 10, you have to use inverted double quotes for the key and value in the JSON file. Regarding question 11, you need to right-click and inspect the element to find the class name. The data value should be 35. Q21: So, for this one, I don\u2019t get anything. Did I do it correctly? Should I submit anything else? A21: You just say \u201cyes\u201d here, and then submit to the URL. It will only pick up the API itself. Remove the question mark. Q22: Why isn\u2019t it reflecting? A22: It may be because you haven\u2019t pushed to GitHub yet. Q23: I have a question about prompt engineering. It mentions using the API a certain number of times. I haven\u2019t used it, but it generated a key. Can I proceed? A23: No, you don\u2019t need to use the API multiple times. The free OpenAI API access is only through the proxy. A normal OpenAI account is a subscription service and doesn\u2019t give you API access. You have to buy tokens to use the API. Q24: I\u2019ve used a normal OpenAI account before. I was hoping to use those model IDs. Why can\u2019t I? A24: The free OpenAI account doesn\u2019t give you API access. You can only use their web-based service. To use the API, you have to buy tokens. Q25: Can you show me how to do that? Can I share my screen? A25: No need to share your screen. I\u2019ll show you how to access the API via the proxy. That\u2019s how your project will have to work. Q26: The ninth question in the prompt engineering section mentions paying money. Do I have to pay? A26: No, you don\u2019t have to pay. Q27: I have a few more questions. Will we have more sessions before GA3 is due? A27: Yes, we\u2019ll have at least three more sessions before GA3 is due. Q28: I thought GA3 was due this weekend. Is that wrong? A28: Yes, it\u2019s due this weekend, but we\u2019ll have three more sessions before then. Q29: I have another question. Is it okay to ask now? A29: Sure. Q30: I submitted my answers, but I don\u2019t know if I did it correctly. There\u2019s nothing to submit here. I just say \u201cyes\u201d? A30: You just say \u201cyes\u201d and submit to the URL. It will pick up the API itself. Q31: Why isn\u2019t it reflecting? A31: It may be because you haven\u2019t pushed to GitHub yet. Q32: I have a question about GA1, questions 10 and 11. I posted them on Discourse, but haven\u2019t received a reply. In question 10, the hash button is showing an error. In question 11, I don\u2019t understand the statement about the class in the hidden element below. What does this line mean? A32: For question 10, you need to use inverted double quotes for the key and value in the JSON file. For question 11, you need to right-click and inspect the element to find the class name. The data value should be 35. Q33: What are some other core concepts that are important to understand? A33: Before I talk about those, let\u2019s start with a simple example of how to make an API call to an LLM. API calls are powerful because you can use them in your programs. Q34: How do I get my API key? A34: You can find the link to get your proxy token on the GitHub page. I\u2019ll demonstrate using this proxy, but you can use something similar for other LLMs. Q35: What is a proxy? A35: OpenAI provides the service, but you don\u2019t interact with them directly. Anand has purchased tokens from OpenAI and provides access via a proxy. The proxy acts as a middleman between you and OpenAI. Q36: How many tokens does a prompt take? A36: The prompt we used took 32 tokens. The response (\u201cnegative\u201d) took two tokens. The total was 34 tokens. This cost us 1/10,000 of a dollar. Keep track of your token usage. Q37: How can I keep track of token usage? A37: Keep track of the prompt and the cost in a file. This will help you be efficient. Q38: How are API calls made? A38: You\u2019ll need a URL, headers (including authorization), and a JSON payload. The payload includes the model, messages, and response format. The response format should be strictly defined to avoid unexpected output. Q39: Can you share the notebook file? A39: No, we don\u2019t typically share the notebook file itself, as it prevents you from fully grasping the concepts. However, a sample file is available. Q40: What about function calling? A40: We\u2019ll cover function calling in a later session. It\u2019s a key part of the project. Function calling allows your LLM to decide which function to call based on the prompt. We\u2019ll use last term\u2019s Project Two to demonstrate. Q41: What about embeddings? A41: Embeddings are another important topic. They reduce the cost of using tokens by an order of magnitude. You can download embeddings from Hugging Face. We\u2019ll demonstrate this in a future session. Q42: What about text extraction? A42: We\u2019ll cover this in a future session. Q43: What about Base64 encoding? A43: We\u2019ll cover this in a future session. It\u2019s how you send images to the API. Q44: I\u2019ve seen students use the LLM to get answers to Quiz One. Can I do that? A44: Yes, you can upload a screenshot of the question and ask the LLM for the answer and explanation. You would send it as a Base64 encoded URI. We\u2019ll cover this in a future session. Q45: Can we simply go through the topics mentioned (prompt engineering, TDS, TA instructions, LLM sentiment analysis) during self-study? A45: Yes, but this content is simplified. Reading through documentation is difficult, so we\u2019ve put this together for you. We\u2019ll also demonstrate and do working examples. Q46: Can we change the time of the sessions? My other classes are clashing. I\u2019ve already told the TA, but haven\u2019t received a response. A46: The Wednesday session cannot be moved. The Thursday session might be possible, but the sessions are generally kept in the evening because many students work during the day. We record all sessions, so you can view them later. We can try to schedule an earlier doubt-clearing session, perhaps on Friday, but I\u2019ll have to discuss it with the team. What time on Friday works for you?"
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/project-2",
    "downloaded_at": "2025-06-12T02:47:33.112423",
    "content": "Project 2 - TDS Solver This project is due on 31 Mar 2025 EoD IST. Results will be announced by 15 Apr 2025. For questions, use this Discourse thread . Background You are a clever student who has joined IIT Madras\u2019 Online Degree in Data Science. You have just enrolled in the Tools in Data Science course. To make your life easier, you have decided to build an LLM-based application that can automatically answer any of the graded assignment questions. Specifically, you are building and deploying an API that accepts any question from one of these 5 graded assignments: Graded Assignment 1 Graded Assignment 2 Graded Assignment 3 Graded Assignment 4 Graded Assignment 5 \u2026 and responds with the answer to enter in the assignment. Create an API Your application exposes an API endpoint. Let\u2019s assume that it is at . The endpoint must accept a POST request, e.g. with the question as well as optional file attachments as multipart/form-data. For example, here\u2019s how anyone can make a request: The response must be a JSON object with a single text (string) field: that can be directly entered in the assignment. For example: Deploy your application Deploy your application to a public URL that can be accessed by anyone. You may use any platform, including Vercel. (If you use ngrok, ensure that it is running continuously until you get your results.) Share your code Create a new public GitHub repository Add an MIT file Commit and push your code Submit your URL Submit your GitHub repository URL and your API endpoint URL in this Google Form: https://forms.gle/6ZLCGEEHUHVK71Yu5 . Evaluation Pre-requisites : Your repository MUST meet the following criteria to be eligible for evaluation Your GitHub repository exists and is publicly accessible Your GitHub repository has a file with the MIT license We will send 5 questions randomly chosen from the graded assignments above. Correct answers will be awarded 4 marks each. Your score will be the sum of the marks above. No normalization. What you get is what you get."
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/retrieval-augmented-generation",
    "downloaded_at": "2025-06-12T02:47:34.170307",
    "content": "Retrieval Augmented Generation The video is not available yet. Please review the notebook, which is self-explanatory. #TODO You will learn to implement Retrieval Augmented Generation (RAG) to enhance language models\u2019 responses by incorporating relevant context, covering: LLM Context Limitations : Understanding the constraints of context windows in large language models. Retrieval Augmented Generation : The technique of retrieving and using relevant documents to enhance model responses. Embeddings : How to convert text into numerical representations that are used for similarity calculations. Similarity Search : Finding the most relevant documents by calculating cosine similarity between embeddings. OpenAI API Integration : Using the OpenAI API to generate responses based on the most relevant documents. Tourist Recommendation Bot : Building a bot that recommends tourist attractions based on user interests using embeddings. Next Steps for Implementation : Insights into scaling the solution with a vector database, re-rankers, and improved prompts for better accuracy and efficiency. Here are the links used in the video: Jupyter Notebook embedding model Awesome vector database"
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/live-session-2025-01-30",
    "downloaded_at": "2025-06-12T02:47:35.223134",
    "content": "Live Session: 30 Jan 2025 Q1: My screen is visible? A1: Yes, your screen is visible. Q2: I posted on Discourse and emailed you about a problem deploying a Flask application on Vercel. The Flask module is not getting downloaded. Can you show the vercel.json configuration file? A2: The error likely stems from your file. Did you create a new virtual environment for this project, or did you install Flask on your global environment? When deploying Flask applications on Vercel, you need to keep a few things in mind. I\u2019ll show you how to create a file without manually typing it. Q3: I added a requirements.txt file with Flask and Flask-Cors, but Kartal sir said I could use the example in the question. Should I remove the requirements.txt file and rewrite the code? The code is working, but I\u2019m getting a null output instead of a list of integers as requested. A3: Let\u2019s see your screen. The Flask application might be running fine as intended, but you might not be seeing the output. Sharing your screen would help me understand what\u2019s happening. You are getting a null output because you are not using a virtual environment. Let\u2019s create one. Q4: When writing tools needed in requirements.txt, do we need to specify the version? A4: Yes, you have to specify the version. But you don\u2019t have to manually type the file. You can use a single-line command in Python: . This will create the file with all the libraries and their versions in your virtual environment (or global environment if you don\u2019t have a virtual environment). Q5: I tried to create a virtual environment, but it showed an error. I\u2019m using Vercel CLI. A5: Let\u2019s try in PowerShell. If you are using a virtual environment, it will only return the libraries specifically present in that environment. Since you are currently using a global environment, it returns every library. Q6: Have you tried the optional exercise I gave you for the Flask API (Zodiac sign one)? A6: No one has tried it yet. The assignment was to ask for a person\u2019s month of birth and return their zodiac sign. Q7: The main problem is that I\u2019m spending almost 2-3 days on the TDS assignments. The GAs have 10-18 questions on average. A7: I understand. The GAs are time-consuming. If you get some time and are in the mood, you can work on the optional mini-project. You can have many more types of ideas and execute them using Flask API. Q8: Currently, I\u2019m not in the directory that contains the Vercel file (vercel.json). A8: I\u2019m just demonstrating how to create the file. Q9: If I\u2019m running a virtual environment with , will it only copy out the tools that are in the virtual environment? A9: Exactly. That\u2019s a downside of . When using , you are not installing those libraries. If they are not installed, they won\u2019t be present in your virtual environment, and therefore won\u2019t be in your file. For minor projects that you don\u2019t need to deploy, is fine. Otherwise, create a virtual environment and install the libraries there. Q10: Now it\u2019s showing nothing. I don\u2019t know why. A10: Your server is not running. Run again. I\u2019m not a big fan of Vercel CLI; I usually push to GitHub and then establish a connection between Vercel and GitHub. Let\u2019s open the dev tools (right-click, inspect), go to the console, and reload. Show me your code. Q11: I\u2019m using httpx. A11: Yesterday, I told you that you can use the example file from the question. That\u2019s why you rewrote the code. Otherwise, you would have created the file and deployed both. This was working yesterday; now it\u2019s showing blank. Can you show me the code? Q12: It was working perfectly yesterday. Now it\u2019s showing blank. An error page is showing. Sir told me to add to the URL, and it would show some data. When I entered that link in the assignment, it gave me a null list. A12: That\u2019s what happens when nothing is showing. Can you scroll down? You\u2019re using CORS. You\u2019ve used a lot of complexity; you\u2019ve made it a lot more complex. You took help from ChatGPT. That explains the comments. It\u2019s not directing you somewhere. The JSON file is not present in the API folder. Let\u2019s go to line 5 of your code. Add before to include the parent directory. Save and redeploy. Q13: Should I remove the folder and redeploy? A13: No, that won\u2019t work. Vercel CLI created that folder; it contains build instructions. Q14: Are the vercel.json and everything inside the API file? A14: No, they are in the directory. Q15: I don\u2019t know how to use as a variable name in question 9. A15: is a keyword in Python. You can\u2019t use it as a variable name. I\u2019ll explain how to handle this. You need a different variable name. I used an alias. I\u2019ll explain what that means. Q16: When passing multiple parameters with the same name, how do I handle it? A16: You need to use lists. Import from the library. I got this from ChatGPT. Always learn from ChatGPT, but also learn from the process. The query will take all the strings and put them into one list. The default value is used if no parameter is passed. An alias is another name for a variable. The variable name is , but we can use the parameter using this alias. Q17: My code was working correctly except for the name. I don\u2019t know how to write it. A17: You are using . You\u2019re also using . This is not Flask-based; it\u2019s more like an HTTP server. Q18: I\u2019ll try to do it again according to the requirements and add the requirements.txt file. After that, I\u2019ll share my screen. A18: Okay, you can do that. The Flask-based code is not needed here. Q19: I\u2019m confused because it was working perfectly (or at least working) yesterday. A19: Can you open Vercel again? Yesterday, was this particular box showing \u201cNot Found\u201d? When you added to the URL, it showed a dictionary. It was returning a JSON object. Show me your folder structure. Q20: I created the directory, then another folder , and then inside . A20: Should I remove the folder and redeploy? No, that won\u2019t work. Vercel CLI created that folder; it contains build instructions. Q21: Show your folder structure. A21: I created the directory, then another folder , and then inside . Q22: If I use , will it only copy the tools in the virtual environment? A22: Yes. Q23: What is more convenient? Directly integrating GitHub and creating files there, saving space on my local system? A23: I don\u2019t think that will save space on your local system because you have to create files locally before pushing them to Git. Q24: Can we use the query function? A24: Yes, absolutely. It\u2019s working like this. I\u2019ll comment it out, duplicate it, and comment it out once. Then we can run this. The query function is working. We have got the entire row where the city was. We can extract the population using this. It\u2019s working perfectly fine. It returned the population of Delhi. Q25: Do we need to mention values [square bracket] zero, values zero, if we are mentioning population only? A25: That\u2019s a very good question. If you use this, it will return a series (a Pandas term). It\u2019s just a column; it won\u2019t give you the exact value. We have to extract the zeroth value. We have to extract the values. will return this. Q26: Question 9: I don\u2019t know how to use as a variable name. A26: is a keyword. You can\u2019t use it as a variable name. Create a different variable name. I used an alias. Q27: Question 6: Can you take the last of the class now, or should I wait? A27: Let\u2019s arrange a separate meeting to discuss this. I\u2019ll also look into your file. You can share it on Discourse or email it to me. Q28: Can we use instead of ? A28: Yes, you can change it to . is a command-line tool, not a Python module. I\u2019m not sure about . Q29: Can we get the names of the words and their embeddings separately in the JSON? A29: No, it won\u2019t get you the name of the embedding. It will store embeddings for each word. You can pass three different values. You can calculate three embeddings. Then you can compute the cosine similarity between them. The first index would get the embedding for bicycle, the second for cycle, and the third for . Q30: Can we get a 3x1,1056 dimensional array? A30: You won\u2019t get it directly, but you can store it in whatever format you want. You can store it in an array. I don\u2019t know how to convert JSON to an array. Q31: One more thing about embeddings. Can we go back to the writer pad? A31: Sure. Let\u2019s say I\u2019m using a certain model for creating embeddings. Let\u2019s say that model contains a billion words. It will check the similarity of a word (like \u201ckitten\u201d) with all those billion words. It will check the rate of similarity between this particular word and that word. These models vary in the number of words they carry. A small model has about a billion; a medium-sized model has around 50 billion; a large model has several more. These numbers might be a bit wrong, but that\u2019s the distinction. The larger the model, the better the embeddings. Here, we have 1,056. That means it\u2019s checking the similarity of a word with 1,056 words in its database. That\u2019s how embeddings work. For creating embeddings, there\u2019s a library in NLP, actually ML, with a module called . It\u2019s deployed on Hugging Face. Q32: Is Hugging Face part of the TDS course? A32: I think it\u2019s been removed. It would be too heavy for TDS. Q33: Can we create LLM applications on Google Colab? A33: Not exactly, but we can make API calls and get embeddings for words. For example, let\u2019s say we have the word \u201cAnand\u201d. Q34: Sorry for interrupting, but is Hugging Face part of the TDS course? A34: I think it\u2019s been removed, probably because it\u2019s too heavy for the course. Q35: My next question is why are these vectors (embeddings) so long? It\u2019s just a word. For a paragraph, it must be thousands of variables. A35: It won\u2019t be. We\u2019re getting embeddings from OpenAI. We\u2019ll always get embeddings of the same length. It uses 1,536 numbers to represent a word. These are different features of the word. It might involve the shape of a bicycle. Does it involve SVD? It must be doing SVD. Q36: Can we use wrongly spelled words and get embeddings for them? A36: You can try. It should work. Anything similar to \u201cbicycle\u201d should work. Q37: My last question is how can we pass multiple words at the same time and get their embeddings separately? A37: I think this is the way you can pass multiple words. This should get us two different vectors. It\u2019s a list. The first embedding is for bicycle, and the second is for cycle. Q38: Can we get the names of the words and their embeddings separately in the JSON? A38: No, it won\u2019t get you the name of the embedding. It will store embeddings for each word. You can pass three different values. You can calculate three embeddings. Then you can compute the cosine similarity between them. The first index would get the embedding for bicycle, the second for cycle, and the third for . Q39: Can we have a session on Hugging Face? A39: We can have a session during the last week of the course. The last week should be a bit lighter. Hugging Face is totally open source, so it would be very helpful during the NLP part of the course. But Hugging Face won\u2019t be of much context when it comes to TDS. It would be for learning only. Q40: My first doubt is, can we use instead of ? A40: Yes, you can change it to . I\u2019m not sure about . It\u2019s a command-line tool. I\u2019ve never used it. I think even if it does, it shouldn\u2019t matter much because it\u2019s just a different library that allows you to make requests. I wanted to shift to another question. I don\u2019t know how to use this particular thing. Maybe it\u2019s possible to use it in Python, but I don\u2019t know. is better. If it\u2019s complicated, it\u2019s not a good tool. At the end, it\u2019s also using the module. Q41: My next question is why are the vectors (embeddings) so long? A41: That\u2019s the dimension it uses to represent a word. A higher dimension means better representation, but it requires more storage. You can think of them as a vector space, like a 3D space. Instead of representing a word in 3D, we\u2019re representing it in 1,536 dimensions. These are different features of the word. One might represent shape. Q42: Does it involve SVD? A42: I don\u2019t know the exact algorithm OpenAI uses to calculate embeddings. You can search on Google or ask ChatGPT. You can also ask ChatGPT for code completion. Q43: Question 9: Three different documents. For example, these are three different documents. You can think of them as paragraphs or words. The purpose is to figure out which word is related to the query word. One could be cat, one could be dog, and the other could be elephant. The query word could be kitten. You have to figure out which word relates more to it. The way to do it is using embeddings. A43: You would have to figure out the embedding for each one of them. The way to compare two words is to compute the dot product. Cosine similarity is the dot product divided by the norm of each vector. OpenAI returns normalized vectors. The cosine similarity between \u201cbicycle\u201d and \u201ccycle\u201d would be higher than between \u201cbicycle\u201d and \u201capple\u201d. That\u2019s how computers store this information."
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/live-session-2025-01-21",
    "downloaded_at": "2025-06-12T02:47:36.298565",
    "content": "Live Session: 21 Jan 2025 Q1: How much depth of knowledge is needed for the tools in the TDS course, specifically for GA1 and GA2? A1: The goal is to give you sufficient proficiency to execute the purpose of the tools, not to make you an expert. The focus is on GA1 and GA2 because of the approaching deadline. Basic knowledge will suffice; how deep you go is up to you. The biggest challenge is usually reading and understanding documentation. These sessions are designed to help you overcome that hurdle. Q2: What is the tool to create the API? A2: FastAPI. It will be demonstrated in this session. Q3: Will there be a review of the previous sessions? A3: Recordings are available on the YouTube playlist. Summaries are also available on the Tools in Data Science website (the last item on the page). The summaries were generated using AI, and the process is explained. An overarching summary may be added later, but not today. Q4: In the week 2 GA assignment, when using FastAPI, question 9 asks for an authentication tool from NGrok. After three uses, it says the limitation has expired. What can we do? A4: NGrok will be discussed in this session. The limitation is that you can only run one server or one tunnel at a time. Q5: In the GitHub Actions section, question 7 asks about creating a FastAPI webpage using GitHub. It seems to require a premium version. Is there a workaround? A5: You can do it without a premium version. The only time you might have an issue is if you\u2019re using Codespaces and run out of the 125-hour limitation. Students have free access to GitHub. Q6: What is the tool to create the API? A6: FastAPI. Q7: Are the scores from the initial check (9/10 or 10/10) final, or will they be evaluated after submission? A7: Whatever you last submitted is your final score. Q8: In GA1, question 2 says to submit only the JSON body, not the headers. But if I don\u2019t submit headers, it shows an error. What should I do? A8: This will be addressed toward the end of the session. Q9: When running UVicorn on WSL, there are no issues. But on Windows, it seems there\u2019s an issue with anti-something, some shielders, or something on my computer, flagging it and preventing it from running. What should I do? A9: Most web infrastructure runs on Linux servers (maybe 80%). These tools are designed with Linux in mind, and later ported to Windows. There will be some issues running them on Windows. You can get Linux in Windows now using the Windows Subsystem for Linux (WSL). You need at least 8 GB of RAM to run it with reasonable performance. Anything less won\u2019t work or will work poorly. If you can, install WSL; it\u2019s worth it. Then these tools will work out of the box. Q10: What is CI/CD? A10: Continuous Integration/Continuous Deployment. It automates tasks such as compiling, running, and sending code to devices. It reduces the time lag between finding a bug, fixing it, and pushing the fix to the devices that need it. This is useful in data science when pulling data from various places and quickly integrating findings into a workflow. Q11: What is Vercel? A11: Vercel is a platform to deploy applications. You can deploy quickly and easily, and it automatically rebuilds when you push an update. You can deploy directly from your GitHub repo. Q12: What is the difference between Docker run and Docker compose? A12: Docker compose is for local testing. You can create a local network, give it a name, and test with four or five containers. For larger deployments, use Swarm (provided by Docker), Kubernetes, or Mesos. Q13: Can we wrap our MAD1 and MAD2 projects using Docker? A13: Yes, that\u2019s possible. Q14: Is there a demo where all the tools are used in a single project? A14: There will be a separate session for the project, towards the end of this week or the beginning of next week. This session will show how all the tools fit together. Q15: If someone goes through CSS, JavaScript, GitHub, and REST API, will that cover 50% of the course? A15: Yes, roughly. The core technologies (REST APIs, JavaScript, HTML, CSS) haven\u2019t changed much in 30 years. Learning these will give you a foundation to learn other tools more easily. The course will also spend significant time on LLMs and how they fit into the workflow."
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/live-session-2025-01-22",
    "downloaded_at": "2025-06-12T02:47:37.376256",
    "content": "Live Session: 22 Jan 2025 Q1: What are the essential base technologies to learn for the TDS course? A1: Focus on these three areas: 1) Bash and shell scripting; 2) Git; 3) CSS, HTML, and JavaScript. Also, learn REST APIs. Other tools can be learned on the go once you have a basic understanding of these core technologies. Q2: Regarding the tools and techniques needed for the TDS course, are Bash and shell scripting, Git, CSS, HTML, JavaScript, and REST APIs the only essential ones? A2: Yes, those are the core technologies. Other tools are supplementary and can be learned as needed throughout the course. The instructor suggests a three-part approach to learning: 1) Define the purpose; 2) Determine the technique; 3) Select the tools. Q3: In short, is it sufficient to learn the listed technologies to a certain depth, not necessarily to the level of a diploma? A3: Yes, learning to a certain depth is sufficient. The learning process should always be purpose-driven. You don\u2019t need to become an expert in any one tool; you need to know how to use it to accomplish your task. Q4: For the last two questions in Week 2 (the Llama file and the Docker file), do we need to install the applications or can we do it online? A4: For the Llama file, you don\u2019t need to download anything. For the Docker file, you can use online tools like Google Colab, which provides a Linux environment. You can run Docker directly in Colab. Q5: I deployed a project via GitHub, but I\u2019m getting a 404 error. Why? A5: A 404 error means the page isn\u2019t found. The instructor suggests posting a screenshot and your email ID on the Discourse forum for more detailed debugging. Q6: In the Llama file question, the URL shows the correct answer initially, but after refreshing, it shows an incorrect answer. Why? A6: Post a screenshot and your email ID on the Discourse forum. This will allow the instructor to check the backend and the script to determine the cause. Q7: Are the graded assignments open internet or closed internet? A7: All graded assignments are open internet, except for the final in-person exam, which is closed internet. Q8: I\u2019m having trouble signing into GitHub with my IIT email. Is GitHub only available for personal emails? A8: GitHub is available for any email. You need to sign up first, then sign in. For evaluation purposes, your submissions will be linked to the email address you use to log in. The instructor recommends signing up with your IIT email. Q9: For the GitHub question, if I\u2019ve signed in with a personal ID but also have an IIT ID, will that be a problem? A9: There shouldn\u2019t be a problem. The instructor recommends using your IIT email for evaluation purposes. Q10: In the graded assignment 2, image compression, I\u2019m getting an error: \u201cCould not process the image. Is it browser supported? Image pixels do not match the original.\u201d I\u2019ve tried several ways, including using Photoshop to ensure the image resolution is the same. What\u2019s wrong? A10: The image size should be less than 1,300,000 bytes. The instructor will make a note of this issue and investigate. The error may be browser-related, so trying a different browser might help. The instructor also requests the Discourse link be shared. Q11: For the TDS project, do we have to choose the project, or will it be added to our course by default? A11: The TDS project is part of the course and will be automatically added. It\u2019s not a separate project like in other courses. Q12: Should I be worried that the evaluation scripts might be updated after I submit my answers, potentially changing my grade? A12: No, the evaluation scripts are updated to address additional corner cases, but the randomization of questions means that the changes are unlikely to affect your grade. The instructor suggests checking your answers again using GA2 as an exercise. Q13: How will we submit Project 1? Will it be via Google Form? A13: Yes, Project 1 will be submitted via Google Form. The deliverable will be a GitHub repository. Q14: I\u2019m using Windows, but many questions require Ubuntu. I copied the downloaded files to my WSL home folder, but I\u2019m not getting the correct answers. Is it possible to install a Windows system in Linux? A14: You can use WSL. The instructor asks for a screenshot to debug the issue. The student explains that they copied the files (a.txt and b.txt) to a TDS folder in their Ubuntu WSL environment. The command shows 40 lines of difference, but the submission is not accepted. The instructor suggests posting this on the Discourse forum. Q15: Question 16 in GA1 (rename files) is not accepting my answer, even though I\u2019ve tried using ChatGPT. What\u2019s wrong? A15: The instructor suggests posting this on the Discourse forum with your email ID. The instructor notes that many submissions are randomized, so the issue may be related to the specific randomized version of the question."
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/live-session-2025-01-23",
    "downloaded_at": "2025-06-12T02:47:38.430599",
    "content": "Live Session: 23 Jan 2025 Q1: How can I compare two files using the command line? A1: You can use the command in bash, or the command if you\u2019ve initialized a git repository. The command shows the differences between two files directly. compares commits in a git repository. Q2: I\u2019m having trouble viewing my GA1. It\u2019s showing zero ones. Can you help? A2: Let\u2019s look at your screen. It appears there are different timestamps. I\u2019ll help you troubleshoot. Q3: How can I move files from multiple subfolders into a single folder using the command line? A3: I used a bash script that combines the command (to locate files of a specific type, like files) and the command (to move them). The command searches the current directory ( ) for files ( ) and the option executes the command on each file found. The curly braces are placeholders for the filenames. Q4: Will knowing only six SQL commands (SELECT, FROM, GROUP BY, etc.) be enough to complete this course? A4: You\u2019ll only need basic SQL for this course, mainly for extracting data. We\u2019re not covering a full DBMS course. A good resource to learn more is SQLZoo. While you might not need more than six commands for this course, ChatGPT can help if you encounter more complex SQL queries. Q5: How can I deploy a Flask application to Vercel? A5: First, set up a git repository and connect it to your GitHub account. Then, create a virtual environment for your Python project using . Activate it using the appropriate script (e.g., ). Install Flask using . Create a file to exclude the virtual environment folder. Then, create a file with build instructions for Vercel. Commit and push your code to GitHub. Finally, add your project to Vercel, selecting the correct repository and build settings (Python, not Node). Vercel will automatically redeploy your application whenever you push changes to GitHub. This is called CI/CD (Continuous Integration/Continuous Deployment). Q6: What does the port number matter when deploying to Vercel? A6: When deploying to Vercel, the port number you use locally doesn\u2019t matter because Vercel will assign your application its own domain. You should remove from your Flask application before deploying to production. Q7: Why do I need administrator permissions to use ngrok? A7: ngrok is a command-line tool that forwards requests to your local host. It doesn\u2019t need to be installed in your virtual environment. However, you might need administrator privileges to forward requests through a port. If you encounter permission issues, try running PowerShell as administrator. Q8: What is ngrok and how does it work? A8: ngrok creates a public URL that forwards requests to your locally running application. This allows anyone on the internet to access your application, even though it\u2019s running on your local machine. Your computer acts as a server. Note that ngrok only works while your local server is running. For a permanent solution, deploy to a platform like Vercel or Netlify. Q9: What is a virtual environment and why is it useful? A9: A virtual environment creates a separate, isolated environment for your project. This prevents conflicts between different project dependencies. Think of it like creating a separate section in a swimming pool for a child, where the depth is less than the main pool. You can install libraries (like Flask and Pandas) within the virtual environment without affecting your global Python packages. Q10: What is the assignment? A10: Create a Flask application that takes a user\u2019s birth month as input and returns their zodiac sign. This is a fun exercise to improve your Flask skills. You can deploy it to Vercel or Netlify and share the link. Remember to create a file to exclude the virtual environment folder."
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/live-session-2025-01-29",
    "downloaded_at": "2025-06-12T02:47:39.490728",
    "content": "Live Session: 29 Jan 2025 Q1: I am a student, and I joined the session without using my IITM ID. How do I rejoin with my IITM ID? A1: You need to rejoin the session using your IITM ID. We don\u2019t allow anyone to join without their IITM ID. Q2: Today\u2019s session is mostly about doubt clearing. I haven\u2019t seen the GAs yet. Can I come tomorrow after I\u2019ve solved them? A2: Tomorrow and the day after, we will mostly be covering content, so there won\u2019t be much scope for doubt clearing. We can address doubts towards the end of the session or while discussing a specific topic if the doubt relates to that topic. Q3: Will the sessions cover content relevant to GA2? A3: No, the content will be relevant to GA3. The deadline for GA3 has been pushed to Wednesday. Q4: GA2 content looks straightforward. If I have any doubts after the sessions, I\u2019ll ask then. A4: That would be great. Q5: I was confused about the image compression in [unclear]. I tried to copy the code and run it in Colab, but it asked for third-party authentication. I wasn\u2019t sure what it was asking, so I pulled back. A5: I haven\u2019t used the code for solving that particular image compression question; I only used the provided website. I tried using the code, but it gave me an error about dimensions not matching the original file\u2019s dimensions. That\u2019s why I used the web application. There is a specific use case for this. Should we copy all the things like that and then change the parameters? For example, the path will be related to some website URL. It will be used in future classes. We probably won\u2019t spend much time on image compression, but it is important from a web perspective. In a particular video, they talked about how 50-51% of information on web pages is in image format, so reducing image size is important. From a project perspective, it won\u2019t be that relevant in future weeks. Q6: I tried to do Git commits from my CLI, but based on the given ID, a new repository was created. I want to use the one I created for GA1. How can I make sure that whatever changes I\u2019m making get committed to the repository I signed up for? A6: Please share your screen. (The instructor then appears to have difficulty understanding the question.) Q7: I have a doubt in question 4. Actually, I\u2019ve done the Vercel file for question 6 (What is the Vercel URL?). I\u2019m uploading that URL, but it\u2019s not showing that it\u2019s up. Can I share my screen? A7: Yes, please share your screen. (The instructor then guides the student through troubleshooting steps, including checking the code, going to the Vercel dashboard, and appending to the URL. The issue is that the Flask module is not installed on Vercel. The instructor suggests using a capital \u2018F\u2019 in in the requirements.txt file. The instructor also suggests using GitHub, where a requirements.txt file is not needed.) Q8: In the FastAPI question, I\u2019m pushing the website, but it\u2019s not taking the conditions (API class equals 1A or class equals 1B) mentioned in the question. It\u2019s also giving the whole JSON file. What should I do? A8: Regarding the Vercel question, you can mention a capital \u2018F\u2019 for Flask, but I think it won\u2019t install because\u2026 I\u2019ve just checked, and on the GitHub page, I don\u2019t have a requirements file. If you push it to GitHub and it\u2019s connected to GitHub, you don\u2019t need the requirements file. Something else is the issue. It\u2019s not able to pull the Flask module. You should not have to install it separately while running the file. I used . There\u2019s example code given in GA2 itself for question 6. There\u2019s sample code there that uses . I just modified that bit and put my function in there, and it works without any issues. The only difference is that I modified that and put the function inside that piece of code that handles the request. You don\u2019t need a separate file; Vercel can run the program without that. You still need to verify that your function actually runs. That\u2019s one thing you\u2019ll have to check. Regarding the FastAPI question, there\u2019s a logic error in your code. It shouldn\u2019t fetch all of it. Your query actually says (CLASSS) without an underscore. If you put an underscore there, it will probably give you the correct response. Q9: I\u2019m getting an error in question 10 of GA2. (Student shares screen.) A9: Please close the picture-in-picture; it won\u2019t disconnect the session. (The instructor then guides the student through troubleshooting steps, including copying the error and posting it on Discourse and tagging Anand. The instructor suggests using the ngrok URL (the one in front of forwarding in the terminal). The error is a Cloudflare error. The instructor suggests copying the error and sending it on Discourse and tagging Anand.) Q10: I wanted to say that while installing ngrok with the terminal, I wasn\u2019t able to do that, so I installed it in a different directory using the app. Is it doing anything? When I run it from here\u2026 A10: It shouldn\u2019t matter because we are able to access it through the browser. It was still able to access it, and you can see a 200 OK on there. That means the site is running okay; your model is running okay. Why you\u2019re getting a Cloudflare error, I\u2019m not entirely sure. That\u2019s normally to do with the CDN service that is giving some sort of response out there. We\u2019ll have to check with Anand what the issue is. Q11: Is my screen visible? In the Vercel question, sometimes it shows correctly, and now it\u2019s showing an error. It\u2019s showing correctly again. I don\u2019t know why this happens. The score also\u2026 A11: There was a slight bug; we discussed it this morning with Anand. There was a slight bug in the random generator for the file that you use. I believe it\u2019s been fixed now. That\u2019s why you\u2019re not getting an error at the moment. If you come across this problem again, notify us on Discourse. It shouldn\u2019t give you a problem anymore. Q12: One more thing: in the FastAPI question, I\u2019m pushing the website, but it\u2019s not taking the conditions (API class equals 1A or class equals 1B) mentioned in the question. It\u2019s also giving the whole JSON file. What should I do? A12: The issue is likely in your code\u2019s logic. You should try to fix the code. The word itself is a keyword in Python, so you\u2019ll have to find a workaround that enables you to use a query called (CLASSS) without the underscore. Q13: One more question: in question 9 (FastAPI), I\u2019m giving the URL, but when I run the file, it shows the whole data. When I add conditions, it also shows the whole data. I\u2019ll show you that. Should I run this first? A13: Before we do that, let\u2019s see what error comes out. You haven\u2019t put the actual correct URL, right? Just add . It\u2019s because this particular Flask module is not installed on Vercel. You should use the module instead of the command. You just use the requests and send the inputs to it. Because the proxy has its own method of doing some of these functions that don\u2019t match OpenAI\u2019s. It might have been a coincidence that it worked for 3.5. If you use the documentation that Anand has provided, then that might help. If you go back to where you get the token\u2026 You\u2019ll have to provide the documentation in this form. You\u2019ll use the requests instead of using the curl command. You just use the requests and send the inputs to it. Q14: In question 5, I\u2019ve enabled it, but I\u2019m getting an \u201cunexpected end of JSON input\u201d error. I\u2019m not sure why. I\u2019ve tried different structures for the JSON. A14: Copy this JSON to VS Code and save it as a JSON file. VS Code will parse it so you can see it better. At the bottom, you have an extra required address and additional properties that are not necessary. That shouldn\u2019t cause it to be invalid JSON. Try without that. Just remove that extra bit and try without it. Q15: One more thing: in FastAPI question 9, I\u2019m giving the URL, but it\u2019s giving me the whole data. Even when I add conditions, it shows the whole data. I\u2019ll show you. Should I run this first? A15: Add at the end of that. That\u2019s some logic error in your code. It should not fetch all of it. There\u2019s some logic error. You\u2019re getting a Cloudflare error. That\u2019s something to do with the CDN service giving some sort of response. We\u2019ll have to check with Anand. Q16: Is my screen visible? In this Vercel question, what happened is that sometimes it was showing correctly earlier, and now it\u2019s showing an error. And look, it\u2019s showing correctly again. I don\u2019t know why this happens. The score also\u2026 A16: At the moment, it\u2019s working, right? There was a slight bug; we discussed it this morning with Anand. There was a slight bug in the random generator for the file that you use. I believe it\u2019s been fixed now. That\u2019s why you\u2019re not getting an error at the moment. If you come across this problem again, notify us on Discourse. Q17: I\u2019m getting an error from this. I don\u2019t know how\u2026 A17: In the ninth question, you\u2019re getting an error. Earlier, it was working fine. You\u2019ll need to\u2026 this is the Vercel one, right? No, this is the FastAPI one. You\u2019ll have to run the server for that. You should post this on Discourse. Just copy that whole error message itself and put it in a notepad or something, and then post on Discourse. Q18: One more thing I wanted to say: actually, I\u2019m not\u2026 while installing ngrok with this terminal, I wasn\u2019t able to do that, so I installed it in a different directory using the app. Is it doing anything? When I run it from here\u2026 A18: It shouldn\u2019t matter because we are able to access it through the browser. It was still able to access it, and you can see a 200 OK on there. That means the site is running okay; your model is running okay. Why you\u2019re getting a Cloudflare error, I\u2019m not entirely sure. That\u2019s normally to do with the CDN service that is giving some sort of response out there. We\u2019ll have to check with Anand what the issue is. Q19: Is my screen visible? In this Vercel question, what happened is that sometimes it was showing correctly, and now it\u2019s showing an error. And look, it\u2019s showing correctly again. I don\u2019t know why this happens. The score also\u2026 A19: It looks like a Cloudflare error. I\u2019ve noted this error. It is from Cloudflare. You could just try again. When did you try this, apart from just now? You got the same error yesterday as well? Yeah, so that\u2019s some logic error in your code. It should not fetch all of it. There is some logic error. Q20: Should I install it separately? A20: No, you won\u2019t require requirements for it. Vercel is able to run the program without that. Q21: For Vercel, I will take the example code and try to run it. One more question: in question 9 (FastAPI), I\u2019m giving the URL, but when I run the file, it shows the whole data. When I add conditions, it also shows the whole data. I\u2019ll show you that. A21: You should use the requests module and send a request using headers and all those informations. What you are using is actually OpenAI\u2019s own library, and that will not work. You will have to use the requests module and send the request just like the examples shown. There will be a URL, a header, and a payload. If you use their own library, it will not construct it correctly. Because the proxy has its own method of doing some of these functions that don\u2019t match OpenAI\u2019s. For 3.5, it worked, but that was more of a coincidence. If you use the documentation that is there on the AI proxy that Anand has provided, there\u2019s documentation there. If you use that documentation, then that might help. If you go back to where you get the token\u2026 You\u2019ll have to provide the documentation in this form. You\u2019ll use the requests instead of using the curl command. You just use the requests and send the inputs to it. Q22: This was in ROE last term. I\u2019m getting an error. How? A22: This was a really fascinating question. There is a way, in fact many ways, to get it to say yes. You just have to trick it into saying yes. Just look up previous Discourse posts; you will probably find suggestions on there as well. Q23: Can I get the code for this? A23: He will\u2026 didn\u2019t he provide that in a Discourse post? Someone has pasted it on Discourse. If not, we can always ask him to provide it. Q24: I\u2019ve taken one more course, something on business BA or something like that. There is no GA at all for this. There is a GA, but you don\u2019t submit here. These two courses are somewhat different. A24: Right, right. Q25: When I joined (late), an ngrok error was being shown by someone. I\u2019m also getting a very similar error. I couldn\u2019t follow the discussion at all. I joined towards the end. Shall I share my screen? A25: Just before you share your screen, was it giving you a Cloudflare error? (The student describes the error.) You can share your screen. I think your problem is slightly different. (The instructor then guides the student through troubleshooting steps, including checking the ngrok URL and restarting the Lama server. The issue is that ngrok is running outside of the Ubuntu environment, and the Lama server is running inside the Ubuntu environment. The instructor suggests installing ngrok in the Windows machine and then creating a tunnel from there. The student tries this, but it\u2019s still giving an error. The instructor then suggests using the directly executable file for ngrok.) Q26: I tried all this, same issue. I\u2019m getting an error. I think I\u2019ve tried all this, same issue. A26: The account is limited to one simultaneous session. You\u2019ve got another session running somewhere. I think that is inside VS WSL. You\u2019ll have to stop that. You\u2019ll have to check for that. The output that your code is generating is wrong. It\u2019s generating null, null, which is wrong. Just try to check for\u2026 can you go back to the question once? It is sending some URL-encoded parameter. There might be a mistake while reading those parameters. Just changing that code will help. There\u2019s a problem with my code where it\u2019s fetching null for all the data, which it should not. You can either ask on Discourse or try to fix it yourself."
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/live-session-2025-02-04",
    "downloaded_at": "2025-06-12T02:47:40.575248",
    "content": "Live Session: 04 Feb 2025 Q1: I\u2019m having trouble with question 7 of the GA3 assignment. I\u2019m trying to send a POST request, but it keeps showing \u201cmethod not allowed\u201d. A1: When you access a URL from a browser, it sends a GET request. To send a POST request, you need an extension like Thunder Client or Postman. Thunder Client doesn\u2019t require a login, but Postman does. However, Thunder Client is now a paid service. Q2: Previously, I was seeing some things, but now I\u2019m getting the \u201cmethod not allowed\u201d error. I don\u2019t know why. A2: Let\u2019s troubleshoot this. We\u2019ll use Thunder Client. Q3: After changing my method to POST, what do I do next? A3: Go to the \u201cBody\u201d section in Thunder Client. Create a JSON object using curly braces . Then, refer to question 7 for the JSON object to copy and paste. Remove the three dots (\u2026) from the copied JSON. Click the \u201cSend\u201d button. Q4: I\u2019m getting an error: \u201cAPI key client option must be set either by passing API key to the client or by setting the OPENAI_API_KEY environment variable.\u201d Am I trying to access an OpenAI key? A4: Yes, you are. Since you don\u2019t have a file, you need to create one. For now, comment out the code after line 172 and replace it with to test. Restart the server. Q5: Thunder Client is not showing any paywall. A5: Thunder Client has a free version with limitations (e.g., 15 collections and 15 requests). Q6: Earlier, Thunder Client was free. When did it change? A6: Recently. Q7: I\u2019m still stuck. Can you spell \u201cThunder Client\u201d? A7: T-H-U-N-D-E-R-C-L-I-E-N-T Q8: I\u2019m still getting errors. What\u2019s wrong? A8: Let\u2019s review your code. You\u2019re trying to send a request using the OpenAI module, which won\u2019t work. You need to send the request through an API proxy. Q9: I tried using an API proxy, but I still got errors. A9: Let\u2019s focus on getting the basic functionality working. We\u2019ll create a simple application and send a POST request using Thunder Client. Q10: In the code, what goes in the brackets on lines 19, 20, 21, and 23? A10: Those lines are for allowing requests from external servers. You can list the servers you want to allow. If you use , anyone can access the application. It\u2019s better to restrict access by listing specific servers. For example, if you only want to allow access from and , you would list them. You only need to mention the domain name. Q11: I\u2019m stuck on the Docker part of the assignment. A11: Let\u2019s review the Docker process. You need to create a Docker image and push it. The deliverables are the Git repo and the Docker image. It should be a public repository. Q12: I\u2019m having trouble with the FastAPI part of the assignment. I\u2019m trying to send a POST request to a specific endpoint, but it\u2019s not working. A12: Let\u2019s review the code. You\u2019ll need to automate the process using an LLM. The LLM will generate the code, which you\u2019ll then execute using the subprocess module in Python. Q13: Why do we need to use the subprocess module? A13: In this project, you\u2019ll receive tasks in different languages (English, Hindi, Urdu). The LLM will generate the code to handle these tasks. The subprocess module allows you to execute the generated code on your local machine. Q14: I have a question about the Base64 encoding in GA3, question 6. I converted an image to Base64 using Python, but the UI said it was wrong. I found another method, but how do I know which Base64 encoding is correct? A14: If you paste the Base64 encoding into a decoder, you can visually compare the resulting image to the original. The size and resolution should be the same. Q15: Some of my answers from previous assignments disappeared after logging out of the website. Why? A15: That\u2019s a known issue. Some answers persist, but others are lost. Q16: Can I still check the answers to previous assignments, even though the deadline has passed? A16: Officially, no. However, if you can check the answers, you can learn from your mistakes. Q17: I got stuck on the Docker part of the assignment. Can you elaborate? A17: It sounds like you may have had issues with Docker push and tagging. Let\u2019s review your process. Q18: I only gave myself 5 hours for this assignment, which wasn\u2019t enough. GA2 took a lot of time, especially the last question (running a local server on a different API). A18: Five hours is often insufficient for these assignments. GA2, in particular, can be time-consuming. Q19: For question 9, I\u2019m trying to write a string that will make the AI say \u201cyes,\u201d but it\u2019s not working. Can you give me some hints? A19: That\u2019s something you\u2019ll have to figure out on your own. Try different prompts. You can also look at previous Discourse posts for ideas. Q20: Can I do this using the command prompt, or is there a way to do it from the website? A20: You can use the website, but you may need to use the command prompt for some tasks. Q21: I used Docker Desktop, but I don\u2019t remember exactly what I did. A21: That\u2019s okay. Let\u2019s focus on the current assignment. Q22: What will be the description for the FastAPI part of the assignment? A22: The description will include the three lines of code you\u2019ve already seen. These will be part of the request parameters. Q23: Why can\u2019t I just pass an ID instead of the whole string? A23: There might be other tasks that require different inputs. Q24: How are we restricting access to data from other servers? A24: We use the header to specify which servers are allowed to access the data. The header contains information about where the request is coming from and the type of request (GET, POST, etc.). If you use , any server can access it. Restricting access is a security measure. Q25: What is the trigger point for this assignment? A25: The trigger point is the same as before: a REST API POST call. Q26: For the fetch data from API and save it task, what is the URL? A26: It can be any URL. The assignment is about comparing your code, not fetching data from a specific URL. Q27: What is the purpose of the subprocess module? A27: The subprocess module allows you to execute commands from within your Python script. This is useful for executing code generated by the LLM. Q28: For task 3, what is the expected output? A28: The task can be described in different ways (e.g., English, Hindi). The LLM will generate the code to handle the task. You\u2019ll need to execute that code using the subprocess module. Q29: Is there a time frame for completing the project? A29: We\u2019ll prioritize project 1. We\u2019ll discuss the timeline for project 4 later. Q30: I have a question about the Base64 encoding in GA3, question 6. I converted an image to Base64 using Python, but the UI said it was wrong. I found another method, but how do I know which Base64 encoding is correct? A30: You can compare the decoded image from both methods visually. The size and resolution should be the same. If the encoding is correct, the decoded image will match the original. You can also encode the image using an encoder to verify. Q31: In previous assignments, some answers disappeared after logging out. Can we still check the answers to previous assignments, even though the deadline has passed? A31: Officially, no. However, reviewing your answers can still be beneficial for learning. Q32: Can you give me some hints on how to write a prompt to make the AI in question 9 say \u201cyes\u201d? A32: That\u2019s something you\u2019ll need to figure out on your own. Try different prompts. You can also look at previous Discourse posts for ideas."
  },
  {
    "title": "Tools in Data Science",
    "original_url": "https://tds.s-anand.net/#/live-sessions",
    "downloaded_at": "2025-06-12T02:47:41.656119",
    "content": "Live Sessions Live sessions by the instructors and TAs are recorded and uploaded to YouTube. These were downloaded using yt-dlp . The options compress the audio optimized for speech. They were then transcribed by Gemini 1.5 Flash 002 (currently the best model from a price-quality perspective for audio transcription). System prompt: User prompt:"
  }
]